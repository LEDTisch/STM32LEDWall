
LEDWall_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050e4  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0810537c  0810537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08105394  08105394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08105398  08105398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  0810539c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002d0  10000010  081053ac  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  100002e0  081053ac  000202e0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018d0b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000026e1  00000000  00000000  00038d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d88  00000000  00000000  0003b430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000cb0  00000000  00000000  0003c1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039f64  00000000  00000000  0003ce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00010e1b  00000000  00000000  00076dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00187d47  00000000  00000000  00087be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0020f92e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000038bc  00000000  00000000  0020f984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08105364 	.word	0x08105364

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08105364 	.word	0x08105364

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b0b      	ldr	r3, [pc, #44]	; (810030c <SystemInit+0x34>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a0a      	ldr	r2, [pc, #40]	; (810030c <SystemInit+0x34>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b07      	ldr	r3, [pc, #28]	; (810030c <SystemInit+0x34>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a06      	ldr	r2, [pc, #24]	; (810030c <SystemInit+0x34>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81002f8:	4b04      	ldr	r3, [pc, #16]	; (810030c <SystemInit+0x34>)
 81002fa:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81002fe:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Mod[MAX_LED][4];  // for brightness

int datasentflag=0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8100310:	b580      	push	{r7, lr}
 8100312:	b082      	sub	sp, #8
 8100314:	af00      	add	r7, sp, #0
 8100316:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8100318:	2100      	movs	r1, #0
 810031a:	4805      	ldr	r0, [pc, #20]	; (8100330 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 810031c:	f003 feec 	bl	81040f8 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8100320:	4b04      	ldr	r3, [pc, #16]	; (8100334 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8100322:	2201      	movs	r2, #1
 8100324:	601a      	str	r2, [r3, #0]
}
 8100326:	bf00      	nop
 8100328:	3708      	adds	r7, #8
 810032a:	46bd      	mov	sp, r7
 810032c:	bd80      	pop	{r7, pc}
 810032e:	bf00      	nop
 8100330:	100001d4 	.word	0x100001d4
 8100334:	1000002c 	.word	0x1000002c

08100338 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8100338:	b480      	push	{r7}
 810033a:	b085      	sub	sp, #20
 810033c:	af00      	add	r7, sp, #0
 810033e:	60f8      	str	r0, [r7, #12]
 8100340:	60b9      	str	r1, [r7, #8]
 8100342:	607a      	str	r2, [r7, #4]
 8100344:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8100346:	68fb      	ldr	r3, [r7, #12]
 8100348:	b2d9      	uxtb	r1, r3
 810034a:	4a11      	ldr	r2, [pc, #68]	; (8100390 <Set_LED+0x58>)
 810034c:	68fb      	ldr	r3, [r7, #12]
 810034e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8100352:	687b      	ldr	r3, [r7, #4]
 8100354:	b2d9      	uxtb	r1, r3
 8100356:	4a0e      	ldr	r2, [pc, #56]	; (8100390 <Set_LED+0x58>)
 8100358:	68fb      	ldr	r3, [r7, #12]
 810035a:	009b      	lsls	r3, r3, #2
 810035c:	4413      	add	r3, r2
 810035e:	460a      	mov	r2, r1
 8100360:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8100362:	68bb      	ldr	r3, [r7, #8]
 8100364:	b2d9      	uxtb	r1, r3
 8100366:	4a0a      	ldr	r2, [pc, #40]	; (8100390 <Set_LED+0x58>)
 8100368:	68fb      	ldr	r3, [r7, #12]
 810036a:	009b      	lsls	r3, r3, #2
 810036c:	4413      	add	r3, r2
 810036e:	460a      	mov	r2, r1
 8100370:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8100372:	683b      	ldr	r3, [r7, #0]
 8100374:	b2d9      	uxtb	r1, r3
 8100376:	4a06      	ldr	r2, [pc, #24]	; (8100390 <Set_LED+0x58>)
 8100378:	68fb      	ldr	r3, [r7, #12]
 810037a:	009b      	lsls	r3, r3, #2
 810037c:	4413      	add	r3, r2
 810037e:	460a      	mov	r2, r1
 8100380:	70da      	strb	r2, [r3, #3]
}
 8100382:	bf00      	nop
 8100384:	3714      	adds	r7, #20
 8100386:	46bd      	mov	sp, r7
 8100388:	f85d 7b04 	ldr.w	r7, [sp], #4
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop
 8100390:	100000a8 	.word	0x100000a8

08100394 <WS2812_Send>:
}



void WS2812_Send (void)
{
 8100394:	b580      	push	{r7, lr}
 8100396:	b086      	sub	sp, #24
 8100398:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 810039a:	2300      	movs	r3, #0
 810039c:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 810039e:	2300      	movs	r3, #0
 81003a0:	613b      	str	r3, [r7, #16]
 81003a2:	e036      	b.n	8100412 <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 81003a4:	4a2e      	ldr	r2, [pc, #184]	; (8100460 <WS2812_Send+0xcc>)
 81003a6:	693b      	ldr	r3, [r7, #16]
 81003a8:	009b      	lsls	r3, r3, #2
 81003aa:	4413      	add	r3, r2
 81003ac:	785b      	ldrb	r3, [r3, #1]
 81003ae:	041a      	lsls	r2, r3, #16
 81003b0:	492b      	ldr	r1, [pc, #172]	; (8100460 <WS2812_Send+0xcc>)
 81003b2:	693b      	ldr	r3, [r7, #16]
 81003b4:	009b      	lsls	r3, r3, #2
 81003b6:	440b      	add	r3, r1
 81003b8:	789b      	ldrb	r3, [r3, #2]
 81003ba:	021b      	lsls	r3, r3, #8
 81003bc:	431a      	orrs	r2, r3
 81003be:	4928      	ldr	r1, [pc, #160]	; (8100460 <WS2812_Send+0xcc>)
 81003c0:	693b      	ldr	r3, [r7, #16]
 81003c2:	009b      	lsls	r3, r3, #2
 81003c4:	440b      	add	r3, r1
 81003c6:	78db      	ldrb	r3, [r3, #3]
 81003c8:	4313      	orrs	r3, r2
 81003ca:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 81003cc:	2317      	movs	r3, #23
 81003ce:	60fb      	str	r3, [r7, #12]
 81003d0:	e019      	b.n	8100406 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 81003d2:	2201      	movs	r2, #1
 81003d4:	68fb      	ldr	r3, [r7, #12]
 81003d6:	fa02 f303 	lsl.w	r3, r2, r3
 81003da:	461a      	mov	r2, r3
 81003dc:	687b      	ldr	r3, [r7, #4]
 81003de:	4013      	ands	r3, r2
 81003e0:	2b00      	cmp	r3, #0
 81003e2:	d005      	beq.n	81003f0 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 58;  // 2/3 of 90
 81003e4:	4a1f      	ldr	r2, [pc, #124]	; (8100464 <WS2812_Send+0xd0>)
 81003e6:	697b      	ldr	r3, [r7, #20]
 81003e8:	213a      	movs	r1, #58	; 0x3a
 81003ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 81003ee:	e004      	b.n	81003fa <WS2812_Send+0x66>
			}

			else pwmData[indx] = 29;  // 1/3 of 90
 81003f0:	4a1c      	ldr	r2, [pc, #112]	; (8100464 <WS2812_Send+0xd0>)
 81003f2:	697b      	ldr	r3, [r7, #20]
 81003f4:	211d      	movs	r1, #29
 81003f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 81003fa:	697b      	ldr	r3, [r7, #20]
 81003fc:	3301      	adds	r3, #1
 81003fe:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8100400:	68fb      	ldr	r3, [r7, #12]
 8100402:	3b01      	subs	r3, #1
 8100404:	60fb      	str	r3, [r7, #12]
 8100406:	68fb      	ldr	r3, [r7, #12]
 8100408:	2b00      	cmp	r3, #0
 810040a:	dae2      	bge.n	81003d2 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 810040c:	693b      	ldr	r3, [r7, #16]
 810040e:	3301      	adds	r3, #1
 8100410:	613b      	str	r3, [r7, #16]
 8100412:	693b      	ldr	r3, [r7, #16]
 8100414:	2b00      	cmp	r3, #0
 8100416:	ddc5      	ble.n	81003a4 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8100418:	2300      	movs	r3, #0
 810041a:	60bb      	str	r3, [r7, #8]
 810041c:	e00a      	b.n	8100434 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 810041e:	4a11      	ldr	r2, [pc, #68]	; (8100464 <WS2812_Send+0xd0>)
 8100420:	697b      	ldr	r3, [r7, #20]
 8100422:	2100      	movs	r1, #0
 8100424:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8100428:	697b      	ldr	r3, [r7, #20]
 810042a:	3301      	adds	r3, #1
 810042c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 810042e:	68bb      	ldr	r3, [r7, #8]
 8100430:	3301      	adds	r3, #1
 8100432:	60bb      	str	r3, [r7, #8]
 8100434:	68bb      	ldr	r3, [r7, #8]
 8100436:	2b31      	cmp	r3, #49	; 0x31
 8100438:	ddf1      	ble.n	810041e <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 810043a:	697b      	ldr	r3, [r7, #20]
 810043c:	b29b      	uxth	r3, r3
 810043e:	4a09      	ldr	r2, [pc, #36]	; (8100464 <WS2812_Send+0xd0>)
 8100440:	2100      	movs	r1, #0
 8100442:	4809      	ldr	r0, [pc, #36]	; (8100468 <WS2812_Send+0xd4>)
 8100444:	f003 fc3e 	bl	8103cc4 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8100448:	bf00      	nop
 810044a:	4b08      	ldr	r3, [pc, #32]	; (810046c <WS2812_Send+0xd8>)
 810044c:	681b      	ldr	r3, [r3, #0]
 810044e:	2b00      	cmp	r3, #0
 8100450:	d0fb      	beq.n	810044a <WS2812_Send+0xb6>
	datasentflag = 0;
 8100452:	4b06      	ldr	r3, [pc, #24]	; (810046c <WS2812_Send+0xd8>)
 8100454:	2200      	movs	r2, #0
 8100456:	601a      	str	r2, [r3, #0]
}
 8100458:	bf00      	nop
 810045a:	3718      	adds	r7, #24
 810045c:	46bd      	mov	sp, r7
 810045e:	bd80      	pop	{r7, pc}
 8100460:	100000a8 	.word	0x100000a8
 8100464:	10000140 	.word	0x10000140
 8100468:	100001d4 	.word	0x100001d4
 810046c:	1000002c 	.word	0x1000002c

08100470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100470:	b580      	push	{r7, lr}
 8100472:	b082      	sub	sp, #8
 8100474:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100476:	4b25      	ldr	r3, [pc, #148]	; (810050c <main+0x9c>)
 8100478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810047c:	4a23      	ldr	r2, [pc, #140]	; (810050c <main+0x9c>)
 810047e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100486:	4b21      	ldr	r3, [pc, #132]	; (810050c <main+0x9c>)
 8100488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810048c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100490:	607b      	str	r3, [r7, #4]
 8100492:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100494:	2001      	movs	r0, #1
 8100496:	f003 f949 	bl	810372c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810049a:	f003 f9d3 	bl	8103844 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810049e:	2201      	movs	r2, #1
 81004a0:	2102      	movs	r1, #2
 81004a2:	2000      	movs	r0, #0
 81004a4:	f003 f954 	bl	8103750 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81004a8:	4b19      	ldr	r3, [pc, #100]	; (8100510 <main+0xa0>)
 81004aa:	681b      	ldr	r3, [r3, #0]
 81004ac:	091b      	lsrs	r3, r3, #4
 81004ae:	f003 030f 	and.w	r3, r3, #15
 81004b2:	2b07      	cmp	r3, #7
 81004b4:	d108      	bne.n	81004c8 <main+0x58>
 81004b6:	4b17      	ldr	r3, [pc, #92]	; (8100514 <main+0xa4>)
 81004b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81004bc:	4a15      	ldr	r2, [pc, #84]	; (8100514 <main+0xa4>)
 81004be:	f043 0301 	orr.w	r3, r3, #1
 81004c2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81004c6:	e007      	b.n	81004d8 <main+0x68>
 81004c8:	4b12      	ldr	r3, [pc, #72]	; (8100514 <main+0xa4>)
 81004ca:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81004ce:	4a11      	ldr	r2, [pc, #68]	; (8100514 <main+0xa4>)
 81004d0:	f043 0301 	orr.w	r3, r3, #1
 81004d4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81004d8:	f000 fa2e 	bl	8100938 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81004dc:	f000 f8ea 	bl	81006b4 <MX_GPIO_Init>
  MX_DMA_Init();
 81004e0:	f000 f8c8 	bl	8100674 <MX_DMA_Init>
  MX_TIM1_Init();
 81004e4:	f000 f81a 	bl	810051c <MX_TIM1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(orangeled_GPIO_Port, orangeled_Pin);
 81004e8:	2102      	movs	r1, #2
 81004ea:	480b      	ldr	r0, [pc, #44]	; (8100518 <main+0xa8>)
 81004ec:	f003 f903 	bl	81036f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 81004f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 81004f4:	f000 fad4 	bl	8100aa0 <HAL_Delay>

	  Set_LED(0, 100, 0, 0);
 81004f8:	2300      	movs	r3, #0
 81004fa:	2200      	movs	r2, #0
 81004fc:	2164      	movs	r1, #100	; 0x64
 81004fe:	2000      	movs	r0, #0
 8100500:	f7ff ff1a 	bl	8100338 <Set_LED>

	  //send(255, 255, 255);

	  WS2812_Send();
 8100504:	f7ff ff46 	bl	8100394 <WS2812_Send>
	  HAL_GPIO_TogglePin(orangeled_GPIO_Port, orangeled_Pin);
 8100508:	e7ee      	b.n	81004e8 <main+0x78>
 810050a:	bf00      	nop
 810050c:	58024400 	.word	0x58024400
 8100510:	e000ed00 	.word	0xe000ed00
 8100514:	58026400 	.word	0x58026400
 8100518:	58021000 	.word	0x58021000

0810051c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 810051c:	b580      	push	{r7, lr}
 810051e:	b09a      	sub	sp, #104	; 0x68
 8100520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8100522:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8100526:	2200      	movs	r2, #0
 8100528:	601a      	str	r2, [r3, #0]
 810052a:	605a      	str	r2, [r3, #4]
 810052c:	609a      	str	r2, [r3, #8]
 810052e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100530:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100534:	2200      	movs	r2, #0
 8100536:	601a      	str	r2, [r3, #0]
 8100538:	605a      	str	r2, [r3, #4]
 810053a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 810053c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100540:	2200      	movs	r2, #0
 8100542:	601a      	str	r2, [r3, #0]
 8100544:	605a      	str	r2, [r3, #4]
 8100546:	609a      	str	r2, [r3, #8]
 8100548:	60da      	str	r2, [r3, #12]
 810054a:	611a      	str	r2, [r3, #16]
 810054c:	615a      	str	r2, [r3, #20]
 810054e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100550:	1d3b      	adds	r3, r7, #4
 8100552:	222c      	movs	r2, #44	; 0x2c
 8100554:	2100      	movs	r1, #0
 8100556:	4618      	mov	r0, r3
 8100558:	f004 fefc 	bl	8105354 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 810055c:	4b43      	ldr	r3, [pc, #268]	; (810066c <MX_TIM1_Init+0x150>)
 810055e:	4a44      	ldr	r2, [pc, #272]	; (8100670 <MX_TIM1_Init+0x154>)
 8100560:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8100562:	4b42      	ldr	r3, [pc, #264]	; (810066c <MX_TIM1_Init+0x150>)
 8100564:	2200      	movs	r2, #0
 8100566:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100568:	4b40      	ldr	r3, [pc, #256]	; (810066c <MX_TIM1_Init+0x150>)
 810056a:	2200      	movs	r2, #0
 810056c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 810056e:	4b3f      	ldr	r3, [pc, #252]	; (810066c <MX_TIM1_Init+0x150>)
 8100570:	2259      	movs	r2, #89	; 0x59
 8100572:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100574:	4b3d      	ldr	r3, [pc, #244]	; (810066c <MX_TIM1_Init+0x150>)
 8100576:	2200      	movs	r2, #0
 8100578:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 810057a:	4b3c      	ldr	r3, [pc, #240]	; (810066c <MX_TIM1_Init+0x150>)
 810057c:	2200      	movs	r2, #0
 810057e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100580:	4b3a      	ldr	r3, [pc, #232]	; (810066c <MX_TIM1_Init+0x150>)
 8100582:	2200      	movs	r2, #0
 8100584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8100586:	4839      	ldr	r0, [pc, #228]	; (810066c <MX_TIM1_Init+0x150>)
 8100588:	f003 fae4 	bl	8103b54 <HAL_TIM_Base_Init>
 810058c:	4603      	mov	r3, r0
 810058e:	2b00      	cmp	r3, #0
 8100590:	d001      	beq.n	8100596 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8100592:	f000 f8c3 	bl	810071c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8100596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810059a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 810059c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 81005a0:	4619      	mov	r1, r3
 81005a2:	4832      	ldr	r0, [pc, #200]	; (810066c <MX_TIM1_Init+0x150>)
 81005a4:	f003 ffa8 	bl	81044f8 <HAL_TIM_ConfigClockSource>
 81005a8:	4603      	mov	r3, r0
 81005aa:	2b00      	cmp	r3, #0
 81005ac:	d001      	beq.n	81005b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 81005ae:	f000 f8b5 	bl	810071c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 81005b2:	482e      	ldr	r0, [pc, #184]	; (810066c <MX_TIM1_Init+0x150>)
 81005b4:	f003 fb25 	bl	8103c02 <HAL_TIM_PWM_Init>
 81005b8:	4603      	mov	r3, r0
 81005ba:	2b00      	cmp	r3, #0
 81005bc:	d001      	beq.n	81005c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 81005be:	f000 f8ad 	bl	810071c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81005c2:	2300      	movs	r3, #0
 81005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81005c6:	2300      	movs	r3, #0
 81005c8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81005ca:	2300      	movs	r3, #0
 81005cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 81005ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81005d2:	4619      	mov	r1, r3
 81005d4:	4825      	ldr	r0, [pc, #148]	; (810066c <MX_TIM1_Init+0x150>)
 81005d6:	f004 fd93 	bl	8105100 <HAL_TIMEx_MasterConfigSynchronization>
 81005da:	4603      	mov	r3, r0
 81005dc:	2b00      	cmp	r3, #0
 81005de:	d001      	beq.n	81005e4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 81005e0:	f000 f89c 	bl	810071c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81005e4:	2360      	movs	r3, #96	; 0x60
 81005e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 81005e8:	2300      	movs	r3, #0
 81005ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81005ec:	2300      	movs	r3, #0
 81005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81005f0:	2300      	movs	r3, #0
 81005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81005f4:	2300      	movs	r3, #0
 81005f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81005f8:	2300      	movs	r3, #0
 81005fa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81005fc:	2300      	movs	r3, #0
 81005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8100600:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100604:	2200      	movs	r2, #0
 8100606:	4619      	mov	r1, r3
 8100608:	4818      	ldr	r0, [pc, #96]	; (810066c <MX_TIM1_Init+0x150>)
 810060a:	f003 fe65 	bl	81042d8 <HAL_TIM_PWM_ConfigChannel>
 810060e:	4603      	mov	r3, r0
 8100610:	2b00      	cmp	r3, #0
 8100612:	d001      	beq.n	8100618 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8100614:	f000 f882 	bl	810071c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100618:	2300      	movs	r3, #0
 810061a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 810061c:	2300      	movs	r3, #0
 810061e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100620:	2300      	movs	r3, #0
 8100622:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100624:	2300      	movs	r3, #0
 8100626:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100628:	2300      	movs	r3, #0
 810062a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 810062c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100630:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100632:	2300      	movs	r3, #0
 8100634:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8100636:	2300      	movs	r3, #0
 8100638:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 810063a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810063e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8100640:	2300      	movs	r3, #0
 8100642:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100644:	2300      	movs	r3, #0
 8100646:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8100648:	1d3b      	adds	r3, r7, #4
 810064a:	4619      	mov	r1, r3
 810064c:	4807      	ldr	r0, [pc, #28]	; (810066c <MX_TIM1_Init+0x150>)
 810064e:	f004 fddf 	bl	8105210 <HAL_TIMEx_ConfigBreakDeadTime>
 8100652:	4603      	mov	r3, r0
 8100654:	2b00      	cmp	r3, #0
 8100656:	d001      	beq.n	810065c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8100658:	f000 f860 	bl	810071c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 810065c:	4803      	ldr	r0, [pc, #12]	; (810066c <MX_TIM1_Init+0x150>)
 810065e:	f000 f8d1 	bl	8100804 <HAL_TIM_MspPostInit>

}
 8100662:	bf00      	nop
 8100664:	3768      	adds	r7, #104	; 0x68
 8100666:	46bd      	mov	sp, r7
 8100668:	bd80      	pop	{r7, pc}
 810066a:	bf00      	nop
 810066c:	100001d4 	.word	0x100001d4
 8100670:	40010000 	.word	0x40010000

08100674 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8100674:	b580      	push	{r7, lr}
 8100676:	b082      	sub	sp, #8
 8100678:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 810067a:	4b0d      	ldr	r3, [pc, #52]	; (81006b0 <MX_DMA_Init+0x3c>)
 810067c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100680:	4a0b      	ldr	r2, [pc, #44]	; (81006b0 <MX_DMA_Init+0x3c>)
 8100682:	f043 0302 	orr.w	r3, r3, #2
 8100686:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810068a:	4b09      	ldr	r3, [pc, #36]	; (81006b0 <MX_DMA_Init+0x3c>)
 810068c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100690:	f003 0302 	and.w	r3, r3, #2
 8100694:	607b      	str	r3, [r7, #4]
 8100696:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8100698:	2200      	movs	r2, #0
 810069a:	2100      	movs	r1, #0
 810069c:	2039      	movs	r0, #57	; 0x39
 810069e:	f000 fafe 	bl	8100c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 81006a2:	2039      	movs	r0, #57	; 0x39
 81006a4:	f000 fb15 	bl	8100cd2 <HAL_NVIC_EnableIRQ>

}
 81006a8:	bf00      	nop
 81006aa:	3708      	adds	r7, #8
 81006ac:	46bd      	mov	sp, r7
 81006ae:	bd80      	pop	{r7, pc}
 81006b0:	58024400 	.word	0x58024400

081006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81006b4:	b580      	push	{r7, lr}
 81006b6:	b086      	sub	sp, #24
 81006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81006ba:	1d3b      	adds	r3, r7, #4
 81006bc:	2200      	movs	r2, #0
 81006be:	601a      	str	r2, [r3, #0]
 81006c0:	605a      	str	r2, [r3, #4]
 81006c2:	609a      	str	r2, [r3, #8]
 81006c4:	60da      	str	r2, [r3, #12]
 81006c6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81006c8:	4b12      	ldr	r3, [pc, #72]	; (8100714 <MX_GPIO_Init+0x60>)
 81006ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006ce:	4a11      	ldr	r2, [pc, #68]	; (8100714 <MX_GPIO_Init+0x60>)
 81006d0:	f043 0310 	orr.w	r3, r3, #16
 81006d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006d8:	4b0e      	ldr	r3, [pc, #56]	; (8100714 <MX_GPIO_Init+0x60>)
 81006da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006de:	f003 0310 	and.w	r3, r3, #16
 81006e2:	603b      	str	r3, [r7, #0]
 81006e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(orangeled_GPIO_Port, orangeled_Pin, GPIO_PIN_SET);
 81006e6:	2201      	movs	r2, #1
 81006e8:	2102      	movs	r1, #2
 81006ea:	480b      	ldr	r0, [pc, #44]	; (8100718 <MX_GPIO_Init+0x64>)
 81006ec:	f002 ffea 	bl	81036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : orangeled_Pin */
  GPIO_InitStruct.Pin = orangeled_Pin;
 81006f0:	2302      	movs	r3, #2
 81006f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81006f4:	2301      	movs	r3, #1
 81006f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006f8:	2300      	movs	r3, #0
 81006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81006fc:	2300      	movs	r3, #0
 81006fe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(orangeled_GPIO_Port, &GPIO_InitStruct);
 8100700:	1d3b      	adds	r3, r7, #4
 8100702:	4619      	mov	r1, r3
 8100704:	4804      	ldr	r0, [pc, #16]	; (8100718 <MX_GPIO_Init+0x64>)
 8100706:	f002 fe2d 	bl	8103364 <HAL_GPIO_Init>

}
 810070a:	bf00      	nop
 810070c:	3718      	adds	r7, #24
 810070e:	46bd      	mov	sp, r7
 8100710:	bd80      	pop	{r7, pc}
 8100712:	bf00      	nop
 8100714:	58024400 	.word	0x58024400
 8100718:	58021000 	.word	0x58021000

0810071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810071c:	b480      	push	{r7}
 810071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100720:	b672      	cpsid	i
}
 8100722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100724:	e7fe      	b.n	8100724 <Error_Handler+0x8>
	...

08100728 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100728:	b480      	push	{r7}
 810072a:	b083      	sub	sp, #12
 810072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810072e:	4b0a      	ldr	r3, [pc, #40]	; (8100758 <HAL_MspInit+0x30>)
 8100730:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100734:	4a08      	ldr	r2, [pc, #32]	; (8100758 <HAL_MspInit+0x30>)
 8100736:	f043 0302 	orr.w	r3, r3, #2
 810073a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810073e:	4b06      	ldr	r3, [pc, #24]	; (8100758 <HAL_MspInit+0x30>)
 8100740:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100744:	f003 0302 	and.w	r3, r3, #2
 8100748:	607b      	str	r3, [r7, #4]
 810074a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810074c:	bf00      	nop
 810074e:	370c      	adds	r7, #12
 8100750:	46bd      	mov	sp, r7
 8100752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100756:	4770      	bx	lr
 8100758:	58024400 	.word	0x58024400

0810075c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 810075c:	b580      	push	{r7, lr}
 810075e:	b084      	sub	sp, #16
 8100760:	af00      	add	r7, sp, #0
 8100762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8100764:	687b      	ldr	r3, [r7, #4]
 8100766:	681b      	ldr	r3, [r3, #0]
 8100768:	4a22      	ldr	r2, [pc, #136]	; (81007f4 <HAL_TIM_Base_MspInit+0x98>)
 810076a:	4293      	cmp	r3, r2
 810076c:	d13e      	bne.n	81007ec <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 810076e:	4b22      	ldr	r3, [pc, #136]	; (81007f8 <HAL_TIM_Base_MspInit+0x9c>)
 8100770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100774:	4a20      	ldr	r2, [pc, #128]	; (81007f8 <HAL_TIM_Base_MspInit+0x9c>)
 8100776:	f043 0301 	orr.w	r3, r3, #1
 810077a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810077e:	4b1e      	ldr	r3, [pc, #120]	; (81007f8 <HAL_TIM_Base_MspInit+0x9c>)
 8100780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100784:	f003 0301 	and.w	r3, r3, #1
 8100788:	60fb      	str	r3, [r7, #12]
 810078a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 810078c:	4b1b      	ldr	r3, [pc, #108]	; (81007fc <HAL_TIM_Base_MspInit+0xa0>)
 810078e:	4a1c      	ldr	r2, [pc, #112]	; (8100800 <HAL_TIM_Base_MspInit+0xa4>)
 8100790:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8100792:	4b1a      	ldr	r3, [pc, #104]	; (81007fc <HAL_TIM_Base_MspInit+0xa0>)
 8100794:	220b      	movs	r2, #11
 8100796:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8100798:	4b18      	ldr	r3, [pc, #96]	; (81007fc <HAL_TIM_Base_MspInit+0xa0>)
 810079a:	2240      	movs	r2, #64	; 0x40
 810079c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 810079e:	4b17      	ldr	r3, [pc, #92]	; (81007fc <HAL_TIM_Base_MspInit+0xa0>)
 81007a0:	2200      	movs	r2, #0
 81007a2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 81007a4:	4b15      	ldr	r3, [pc, #84]	; (81007fc <HAL_TIM_Base_MspInit+0xa0>)
 81007a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81007aa:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 81007ac:	4b13      	ldr	r3, [pc, #76]	; (81007fc <HAL_TIM_Base_MspInit+0xa0>)
 81007ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81007b2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 81007b4:	4b11      	ldr	r3, [pc, #68]	; (81007fc <HAL_TIM_Base_MspInit+0xa0>)
 81007b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81007ba:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 81007bc:	4b0f      	ldr	r3, [pc, #60]	; (81007fc <HAL_TIM_Base_MspInit+0xa0>)
 81007be:	2200      	movs	r2, #0
 81007c0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 81007c2:	4b0e      	ldr	r3, [pc, #56]	; (81007fc <HAL_TIM_Base_MspInit+0xa0>)
 81007c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 81007c8:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81007ca:	4b0c      	ldr	r3, [pc, #48]	; (81007fc <HAL_TIM_Base_MspInit+0xa0>)
 81007cc:	2200      	movs	r2, #0
 81007ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 81007d0:	480a      	ldr	r0, [pc, #40]	; (81007fc <HAL_TIM_Base_MspInit+0xa0>)
 81007d2:	f000 faad 	bl	8100d30 <HAL_DMA_Init>
 81007d6:	4603      	mov	r3, r0
 81007d8:	2b00      	cmp	r3, #0
 81007da:	d001      	beq.n	81007e0 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 81007dc:	f7ff ff9e 	bl	810071c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 81007e0:	687b      	ldr	r3, [r7, #4]
 81007e2:	4a06      	ldr	r2, [pc, #24]	; (81007fc <HAL_TIM_Base_MspInit+0xa0>)
 81007e4:	625a      	str	r2, [r3, #36]	; 0x24
 81007e6:	4a05      	ldr	r2, [pc, #20]	; (81007fc <HAL_TIM_Base_MspInit+0xa0>)
 81007e8:	687b      	ldr	r3, [r7, #4]
 81007ea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 81007ec:	bf00      	nop
 81007ee:	3710      	adds	r7, #16
 81007f0:	46bd      	mov	sp, r7
 81007f2:	bd80      	pop	{r7, pc}
 81007f4:	40010000 	.word	0x40010000
 81007f8:	58024400 	.word	0x58024400
 81007fc:	10000030 	.word	0x10000030
 8100800:	40020428 	.word	0x40020428

08100804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8100804:	b580      	push	{r7, lr}
 8100806:	b088      	sub	sp, #32
 8100808:	af00      	add	r7, sp, #0
 810080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810080c:	f107 030c 	add.w	r3, r7, #12
 8100810:	2200      	movs	r2, #0
 8100812:	601a      	str	r2, [r3, #0]
 8100814:	605a      	str	r2, [r3, #4]
 8100816:	609a      	str	r2, [r3, #8]
 8100818:	60da      	str	r2, [r3, #12]
 810081a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 810081c:	687b      	ldr	r3, [r7, #4]
 810081e:	681b      	ldr	r3, [r3, #0]
 8100820:	4a13      	ldr	r2, [pc, #76]	; (8100870 <HAL_TIM_MspPostInit+0x6c>)
 8100822:	4293      	cmp	r3, r2
 8100824:	d11f      	bne.n	8100866 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8100826:	4b13      	ldr	r3, [pc, #76]	; (8100874 <HAL_TIM_MspPostInit+0x70>)
 8100828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810082c:	4a11      	ldr	r2, [pc, #68]	; (8100874 <HAL_TIM_MspPostInit+0x70>)
 810082e:	f043 0310 	orr.w	r3, r3, #16
 8100832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100836:	4b0f      	ldr	r3, [pc, #60]	; (8100874 <HAL_TIM_MspPostInit+0x70>)
 8100838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810083c:	f003 0310 	and.w	r3, r3, #16
 8100840:	60bb      	str	r3, [r7, #8]
 8100842:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8100844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8100848:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810084a:	2302      	movs	r3, #2
 810084c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810084e:	2300      	movs	r3, #0
 8100850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100852:	2300      	movs	r3, #0
 8100854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8100856:	2301      	movs	r3, #1
 8100858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810085a:	f107 030c 	add.w	r3, r7, #12
 810085e:	4619      	mov	r1, r3
 8100860:	4805      	ldr	r0, [pc, #20]	; (8100878 <HAL_TIM_MspPostInit+0x74>)
 8100862:	f002 fd7f 	bl	8103364 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8100866:	bf00      	nop
 8100868:	3720      	adds	r7, #32
 810086a:	46bd      	mov	sp, r7
 810086c:	bd80      	pop	{r7, pc}
 810086e:	bf00      	nop
 8100870:	40010000 	.word	0x40010000
 8100874:	58024400 	.word	0x58024400
 8100878:	58021000 	.word	0x58021000

0810087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810087c:	b480      	push	{r7}
 810087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100880:	e7fe      	b.n	8100880 <NMI_Handler+0x4>

08100882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100882:	b480      	push	{r7}
 8100884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100886:	e7fe      	b.n	8100886 <HardFault_Handler+0x4>

08100888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100888:	b480      	push	{r7}
 810088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810088c:	e7fe      	b.n	810088c <MemManage_Handler+0x4>

0810088e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810088e:	b480      	push	{r7}
 8100890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100892:	e7fe      	b.n	8100892 <BusFault_Handler+0x4>

08100894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100894:	b480      	push	{r7}
 8100896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100898:	e7fe      	b.n	8100898 <UsageFault_Handler+0x4>

0810089a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810089a:	b480      	push	{r7}
 810089c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810089e:	bf00      	nop
 81008a0:	46bd      	mov	sp, r7
 81008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008a6:	4770      	bx	lr

081008a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81008a8:	b480      	push	{r7}
 81008aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81008ac:	bf00      	nop
 81008ae:	46bd      	mov	sp, r7
 81008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008b4:	4770      	bx	lr

081008b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81008b6:	b480      	push	{r7}
 81008b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81008ba:	bf00      	nop
 81008bc:	46bd      	mov	sp, r7
 81008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008c2:	4770      	bx	lr

081008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81008c4:	b580      	push	{r7, lr}
 81008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81008c8:	f000 f8ca 	bl	8100a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81008cc:	bf00      	nop
 81008ce:	bd80      	pop	{r7, pc}

081008d0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 81008d0:	b580      	push	{r7, lr}
 81008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 81008d4:	4802      	ldr	r0, [pc, #8]	; (81008e0 <DMA2_Stream1_IRQHandler+0x10>)
 81008d6:	f001 fa33 	bl	8101d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 81008da:	bf00      	nop
 81008dc:	bd80      	pop	{r7, pc}
 81008de:	bf00      	nop
 81008e0:	10000030 	.word	0x10000030

081008e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81008e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 810091c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81008e8:	f7ff fcf6 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81008ec:	480c      	ldr	r0, [pc, #48]	; (8100920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81008ee:	490d      	ldr	r1, [pc, #52]	; (8100924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81008f0:	4a0d      	ldr	r2, [pc, #52]	; (8100928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81008f4:	e002      	b.n	81008fc <LoopCopyDataInit>

081008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81008fa:	3304      	adds	r3, #4

081008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100900:	d3f9      	bcc.n	81008f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100902:	4a0a      	ldr	r2, [pc, #40]	; (810092c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100904:	4c0a      	ldr	r4, [pc, #40]	; (8100930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100908:	e001      	b.n	810090e <LoopFillZerobss>

0810090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810090c:	3204      	adds	r2, #4

0810090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100910:	d3fb      	bcc.n	810090a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100912:	f004 fcfb 	bl	810530c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100916:	f7ff fdab 	bl	8100470 <main>
  bx  lr
 810091a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810091c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100920:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100924:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8100928:	0810539c 	.word	0x0810539c
  ldr r2, =_sbss
 810092c:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8100930:	100002e0 	.word	0x100002e0

08100934 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100934:	e7fe      	b.n	8100934 <ADC3_IRQHandler>
	...

08100938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100938:	b580      	push	{r7, lr}
 810093a:	b082      	sub	sp, #8
 810093c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810093e:	4b28      	ldr	r3, [pc, #160]	; (81009e0 <HAL_Init+0xa8>)
 8100940:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100944:	4a26      	ldr	r2, [pc, #152]	; (81009e0 <HAL_Init+0xa8>)
 8100946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810094a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810094e:	4b24      	ldr	r3, [pc, #144]	; (81009e0 <HAL_Init+0xa8>)
 8100950:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100958:	603b      	str	r3, [r7, #0]
 810095a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810095c:	4b21      	ldr	r3, [pc, #132]	; (81009e4 <HAL_Init+0xac>)
 810095e:	681b      	ldr	r3, [r3, #0]
 8100960:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100964:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100968:	4a1e      	ldr	r2, [pc, #120]	; (81009e4 <HAL_Init+0xac>)
 810096a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810096e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100970:	4b1c      	ldr	r3, [pc, #112]	; (81009e4 <HAL_Init+0xac>)
 8100972:	681b      	ldr	r3, [r3, #0]
 8100974:	4a1b      	ldr	r2, [pc, #108]	; (81009e4 <HAL_Init+0xac>)
 8100976:	f043 0301 	orr.w	r3, r3, #1
 810097a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810097c:	2003      	movs	r0, #3
 810097e:	f000 f983 	bl	8100c88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100982:	f002 ff6d 	bl	8103860 <HAL_RCC_GetSysClockFreq>
 8100986:	4602      	mov	r2, r0
 8100988:	4b15      	ldr	r3, [pc, #84]	; (81009e0 <HAL_Init+0xa8>)
 810098a:	699b      	ldr	r3, [r3, #24]
 810098c:	0a1b      	lsrs	r3, r3, #8
 810098e:	f003 030f 	and.w	r3, r3, #15
 8100992:	4915      	ldr	r1, [pc, #84]	; (81009e8 <HAL_Init+0xb0>)
 8100994:	5ccb      	ldrb	r3, [r1, r3]
 8100996:	f003 031f 	and.w	r3, r3, #31
 810099a:	fa22 f303 	lsr.w	r3, r2, r3
 810099e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81009a0:	4b0f      	ldr	r3, [pc, #60]	; (81009e0 <HAL_Init+0xa8>)
 81009a2:	699b      	ldr	r3, [r3, #24]
 81009a4:	f003 030f 	and.w	r3, r3, #15
 81009a8:	4a0f      	ldr	r2, [pc, #60]	; (81009e8 <HAL_Init+0xb0>)
 81009aa:	5cd3      	ldrb	r3, [r2, r3]
 81009ac:	f003 031f 	and.w	r3, r3, #31
 81009b0:	687a      	ldr	r2, [r7, #4]
 81009b2:	fa22 f303 	lsr.w	r3, r2, r3
 81009b6:	4a0d      	ldr	r2, [pc, #52]	; (81009ec <HAL_Init+0xb4>)
 81009b8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81009ba:	4b0c      	ldr	r3, [pc, #48]	; (81009ec <HAL_Init+0xb4>)
 81009bc:	681b      	ldr	r3, [r3, #0]
 81009be:	4a0c      	ldr	r2, [pc, #48]	; (81009f0 <HAL_Init+0xb8>)
 81009c0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81009c2:	2000      	movs	r0, #0
 81009c4:	f000 f816 	bl	81009f4 <HAL_InitTick>
 81009c8:	4603      	mov	r3, r0
 81009ca:	2b00      	cmp	r3, #0
 81009cc:	d001      	beq.n	81009d2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81009ce:	2301      	movs	r3, #1
 81009d0:	e002      	b.n	81009d8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81009d2:	f7ff fea9 	bl	8100728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81009d6:	2300      	movs	r3, #0
}
 81009d8:	4618      	mov	r0, r3
 81009da:	3708      	adds	r7, #8
 81009dc:	46bd      	mov	sp, r7
 81009de:	bd80      	pop	{r7, pc}
 81009e0:	58024400 	.word	0x58024400
 81009e4:	40024400 	.word	0x40024400
 81009e8:	0810537c 	.word	0x0810537c
 81009ec:	10000004 	.word	0x10000004
 81009f0:	10000000 	.word	0x10000000

081009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81009f4:	b580      	push	{r7, lr}
 81009f6:	b082      	sub	sp, #8
 81009f8:	af00      	add	r7, sp, #0
 81009fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81009fc:	4b15      	ldr	r3, [pc, #84]	; (8100a54 <HAL_InitTick+0x60>)
 81009fe:	781b      	ldrb	r3, [r3, #0]
 8100a00:	2b00      	cmp	r3, #0
 8100a02:	d101      	bne.n	8100a08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100a04:	2301      	movs	r3, #1
 8100a06:	e021      	b.n	8100a4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100a08:	4b13      	ldr	r3, [pc, #76]	; (8100a58 <HAL_InitTick+0x64>)
 8100a0a:	681a      	ldr	r2, [r3, #0]
 8100a0c:	4b11      	ldr	r3, [pc, #68]	; (8100a54 <HAL_InitTick+0x60>)
 8100a0e:	781b      	ldrb	r3, [r3, #0]
 8100a10:	4619      	mov	r1, r3
 8100a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8100a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8100a1e:	4618      	mov	r0, r3
 8100a20:	f000 f965 	bl	8100cee <HAL_SYSTICK_Config>
 8100a24:	4603      	mov	r3, r0
 8100a26:	2b00      	cmp	r3, #0
 8100a28:	d001      	beq.n	8100a2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100a2a:	2301      	movs	r3, #1
 8100a2c:	e00e      	b.n	8100a4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100a2e:	687b      	ldr	r3, [r7, #4]
 8100a30:	2b0f      	cmp	r3, #15
 8100a32:	d80a      	bhi.n	8100a4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100a34:	2200      	movs	r2, #0
 8100a36:	6879      	ldr	r1, [r7, #4]
 8100a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100a3c:	f000 f92f 	bl	8100c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100a40:	4a06      	ldr	r2, [pc, #24]	; (8100a5c <HAL_InitTick+0x68>)
 8100a42:	687b      	ldr	r3, [r7, #4]
 8100a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100a46:	2300      	movs	r3, #0
 8100a48:	e000      	b.n	8100a4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100a4a:	2301      	movs	r3, #1
}
 8100a4c:	4618      	mov	r0, r3
 8100a4e:	3708      	adds	r7, #8
 8100a50:	46bd      	mov	sp, r7
 8100a52:	bd80      	pop	{r7, pc}
 8100a54:	1000000c 	.word	0x1000000c
 8100a58:	10000000 	.word	0x10000000
 8100a5c:	10000008 	.word	0x10000008

08100a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100a60:	b480      	push	{r7}
 8100a62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100a64:	4b06      	ldr	r3, [pc, #24]	; (8100a80 <HAL_IncTick+0x20>)
 8100a66:	781b      	ldrb	r3, [r3, #0]
 8100a68:	461a      	mov	r2, r3
 8100a6a:	4b06      	ldr	r3, [pc, #24]	; (8100a84 <HAL_IncTick+0x24>)
 8100a6c:	681b      	ldr	r3, [r3, #0]
 8100a6e:	4413      	add	r3, r2
 8100a70:	4a04      	ldr	r2, [pc, #16]	; (8100a84 <HAL_IncTick+0x24>)
 8100a72:	6013      	str	r3, [r2, #0]
}
 8100a74:	bf00      	nop
 8100a76:	46bd      	mov	sp, r7
 8100a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a7c:	4770      	bx	lr
 8100a7e:	bf00      	nop
 8100a80:	1000000c 	.word	0x1000000c
 8100a84:	100002dc 	.word	0x100002dc

08100a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100a88:	b480      	push	{r7}
 8100a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8100a8c:	4b03      	ldr	r3, [pc, #12]	; (8100a9c <HAL_GetTick+0x14>)
 8100a8e:	681b      	ldr	r3, [r3, #0]
}
 8100a90:	4618      	mov	r0, r3
 8100a92:	46bd      	mov	sp, r7
 8100a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a98:	4770      	bx	lr
 8100a9a:	bf00      	nop
 8100a9c:	100002dc 	.word	0x100002dc

08100aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100aa0:	b580      	push	{r7, lr}
 8100aa2:	b084      	sub	sp, #16
 8100aa4:	af00      	add	r7, sp, #0
 8100aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100aa8:	f7ff ffee 	bl	8100a88 <HAL_GetTick>
 8100aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100aae:	687b      	ldr	r3, [r7, #4]
 8100ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100ab2:	68fb      	ldr	r3, [r7, #12]
 8100ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8100ab8:	d005      	beq.n	8100ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100aba:	4b0a      	ldr	r3, [pc, #40]	; (8100ae4 <HAL_Delay+0x44>)
 8100abc:	781b      	ldrb	r3, [r3, #0]
 8100abe:	461a      	mov	r2, r3
 8100ac0:	68fb      	ldr	r3, [r7, #12]
 8100ac2:	4413      	add	r3, r2
 8100ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100ac6:	bf00      	nop
 8100ac8:	f7ff ffde 	bl	8100a88 <HAL_GetTick>
 8100acc:	4602      	mov	r2, r0
 8100ace:	68bb      	ldr	r3, [r7, #8]
 8100ad0:	1ad3      	subs	r3, r2, r3
 8100ad2:	68fa      	ldr	r2, [r7, #12]
 8100ad4:	429a      	cmp	r2, r3
 8100ad6:	d8f7      	bhi.n	8100ac8 <HAL_Delay+0x28>
  {
  }
}
 8100ad8:	bf00      	nop
 8100ada:	bf00      	nop
 8100adc:	3710      	adds	r7, #16
 8100ade:	46bd      	mov	sp, r7
 8100ae0:	bd80      	pop	{r7, pc}
 8100ae2:	bf00      	nop
 8100ae4:	1000000c 	.word	0x1000000c

08100ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100ae8:	b480      	push	{r7}
 8100aea:	b085      	sub	sp, #20
 8100aec:	af00      	add	r7, sp, #0
 8100aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100af0:	687b      	ldr	r3, [r7, #4]
 8100af2:	f003 0307 	and.w	r3, r3, #7
 8100af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100af8:	4b0c      	ldr	r3, [pc, #48]	; (8100b2c <__NVIC_SetPriorityGrouping+0x44>)
 8100afa:	68db      	ldr	r3, [r3, #12]
 8100afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100afe:	68ba      	ldr	r2, [r7, #8]
 8100b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100b04:	4013      	ands	r3, r2
 8100b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100b08:	68fb      	ldr	r3, [r7, #12]
 8100b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100b0c:	68bb      	ldr	r3, [r7, #8]
 8100b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100b1a:	4a04      	ldr	r2, [pc, #16]	; (8100b2c <__NVIC_SetPriorityGrouping+0x44>)
 8100b1c:	68bb      	ldr	r3, [r7, #8]
 8100b1e:	60d3      	str	r3, [r2, #12]
}
 8100b20:	bf00      	nop
 8100b22:	3714      	adds	r7, #20
 8100b24:	46bd      	mov	sp, r7
 8100b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b2a:	4770      	bx	lr
 8100b2c:	e000ed00 	.word	0xe000ed00

08100b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100b30:	b480      	push	{r7}
 8100b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100b34:	4b04      	ldr	r3, [pc, #16]	; (8100b48 <__NVIC_GetPriorityGrouping+0x18>)
 8100b36:	68db      	ldr	r3, [r3, #12]
 8100b38:	0a1b      	lsrs	r3, r3, #8
 8100b3a:	f003 0307 	and.w	r3, r3, #7
}
 8100b3e:	4618      	mov	r0, r3
 8100b40:	46bd      	mov	sp, r7
 8100b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b46:	4770      	bx	lr
 8100b48:	e000ed00 	.word	0xe000ed00

08100b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100b4c:	b480      	push	{r7}
 8100b4e:	b083      	sub	sp, #12
 8100b50:	af00      	add	r7, sp, #0
 8100b52:	4603      	mov	r3, r0
 8100b54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b5a:	2b00      	cmp	r3, #0
 8100b5c:	db0b      	blt.n	8100b76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100b5e:	88fb      	ldrh	r3, [r7, #6]
 8100b60:	f003 021f 	and.w	r2, r3, #31
 8100b64:	4907      	ldr	r1, [pc, #28]	; (8100b84 <__NVIC_EnableIRQ+0x38>)
 8100b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b6a:	095b      	lsrs	r3, r3, #5
 8100b6c:	2001      	movs	r0, #1
 8100b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8100b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100b76:	bf00      	nop
 8100b78:	370c      	adds	r7, #12
 8100b7a:	46bd      	mov	sp, r7
 8100b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b80:	4770      	bx	lr
 8100b82:	bf00      	nop
 8100b84:	e000e100 	.word	0xe000e100

08100b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100b88:	b480      	push	{r7}
 8100b8a:	b083      	sub	sp, #12
 8100b8c:	af00      	add	r7, sp, #0
 8100b8e:	4603      	mov	r3, r0
 8100b90:	6039      	str	r1, [r7, #0]
 8100b92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b98:	2b00      	cmp	r3, #0
 8100b9a:	db0a      	blt.n	8100bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100b9c:	683b      	ldr	r3, [r7, #0]
 8100b9e:	b2da      	uxtb	r2, r3
 8100ba0:	490c      	ldr	r1, [pc, #48]	; (8100bd4 <__NVIC_SetPriority+0x4c>)
 8100ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100ba6:	0112      	lsls	r2, r2, #4
 8100ba8:	b2d2      	uxtb	r2, r2
 8100baa:	440b      	add	r3, r1
 8100bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100bb0:	e00a      	b.n	8100bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100bb2:	683b      	ldr	r3, [r7, #0]
 8100bb4:	b2da      	uxtb	r2, r3
 8100bb6:	4908      	ldr	r1, [pc, #32]	; (8100bd8 <__NVIC_SetPriority+0x50>)
 8100bb8:	88fb      	ldrh	r3, [r7, #6]
 8100bba:	f003 030f 	and.w	r3, r3, #15
 8100bbe:	3b04      	subs	r3, #4
 8100bc0:	0112      	lsls	r2, r2, #4
 8100bc2:	b2d2      	uxtb	r2, r2
 8100bc4:	440b      	add	r3, r1
 8100bc6:	761a      	strb	r2, [r3, #24]
}
 8100bc8:	bf00      	nop
 8100bca:	370c      	adds	r7, #12
 8100bcc:	46bd      	mov	sp, r7
 8100bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bd2:	4770      	bx	lr
 8100bd4:	e000e100 	.word	0xe000e100
 8100bd8:	e000ed00 	.word	0xe000ed00

08100bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100bdc:	b480      	push	{r7}
 8100bde:	b089      	sub	sp, #36	; 0x24
 8100be0:	af00      	add	r7, sp, #0
 8100be2:	60f8      	str	r0, [r7, #12]
 8100be4:	60b9      	str	r1, [r7, #8]
 8100be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100be8:	68fb      	ldr	r3, [r7, #12]
 8100bea:	f003 0307 	and.w	r3, r3, #7
 8100bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100bf0:	69fb      	ldr	r3, [r7, #28]
 8100bf2:	f1c3 0307 	rsb	r3, r3, #7
 8100bf6:	2b04      	cmp	r3, #4
 8100bf8:	bf28      	it	cs
 8100bfa:	2304      	movcs	r3, #4
 8100bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100bfe:	69fb      	ldr	r3, [r7, #28]
 8100c00:	3304      	adds	r3, #4
 8100c02:	2b06      	cmp	r3, #6
 8100c04:	d902      	bls.n	8100c0c <NVIC_EncodePriority+0x30>
 8100c06:	69fb      	ldr	r3, [r7, #28]
 8100c08:	3b03      	subs	r3, #3
 8100c0a:	e000      	b.n	8100c0e <NVIC_EncodePriority+0x32>
 8100c0c:	2300      	movs	r3, #0
 8100c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8100c14:	69bb      	ldr	r3, [r7, #24]
 8100c16:	fa02 f303 	lsl.w	r3, r2, r3
 8100c1a:	43da      	mvns	r2, r3
 8100c1c:	68bb      	ldr	r3, [r7, #8]
 8100c1e:	401a      	ands	r2, r3
 8100c20:	697b      	ldr	r3, [r7, #20]
 8100c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100c24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8100c28:	697b      	ldr	r3, [r7, #20]
 8100c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8100c2e:	43d9      	mvns	r1, r3
 8100c30:	687b      	ldr	r3, [r7, #4]
 8100c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c34:	4313      	orrs	r3, r2
         );
}
 8100c36:	4618      	mov	r0, r3
 8100c38:	3724      	adds	r7, #36	; 0x24
 8100c3a:	46bd      	mov	sp, r7
 8100c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c40:	4770      	bx	lr
	...

08100c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100c44:	b580      	push	{r7, lr}
 8100c46:	b082      	sub	sp, #8
 8100c48:	af00      	add	r7, sp, #0
 8100c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100c4c:	687b      	ldr	r3, [r7, #4]
 8100c4e:	3b01      	subs	r3, #1
 8100c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100c54:	d301      	bcc.n	8100c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100c56:	2301      	movs	r3, #1
 8100c58:	e00f      	b.n	8100c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100c5a:	4a0a      	ldr	r2, [pc, #40]	; (8100c84 <SysTick_Config+0x40>)
 8100c5c:	687b      	ldr	r3, [r7, #4]
 8100c5e:	3b01      	subs	r3, #1
 8100c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100c62:	210f      	movs	r1, #15
 8100c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100c68:	f7ff ff8e 	bl	8100b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100c6c:	4b05      	ldr	r3, [pc, #20]	; (8100c84 <SysTick_Config+0x40>)
 8100c6e:	2200      	movs	r2, #0
 8100c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100c72:	4b04      	ldr	r3, [pc, #16]	; (8100c84 <SysTick_Config+0x40>)
 8100c74:	2207      	movs	r2, #7
 8100c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100c78:	2300      	movs	r3, #0
}
 8100c7a:	4618      	mov	r0, r3
 8100c7c:	3708      	adds	r7, #8
 8100c7e:	46bd      	mov	sp, r7
 8100c80:	bd80      	pop	{r7, pc}
 8100c82:	bf00      	nop
 8100c84:	e000e010 	.word	0xe000e010

08100c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100c88:	b580      	push	{r7, lr}
 8100c8a:	b082      	sub	sp, #8
 8100c8c:	af00      	add	r7, sp, #0
 8100c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100c90:	6878      	ldr	r0, [r7, #4]
 8100c92:	f7ff ff29 	bl	8100ae8 <__NVIC_SetPriorityGrouping>
}
 8100c96:	bf00      	nop
 8100c98:	3708      	adds	r7, #8
 8100c9a:	46bd      	mov	sp, r7
 8100c9c:	bd80      	pop	{r7, pc}

08100c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100c9e:	b580      	push	{r7, lr}
 8100ca0:	b086      	sub	sp, #24
 8100ca2:	af00      	add	r7, sp, #0
 8100ca4:	4603      	mov	r3, r0
 8100ca6:	60b9      	str	r1, [r7, #8]
 8100ca8:	607a      	str	r2, [r7, #4]
 8100caa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100cac:	f7ff ff40 	bl	8100b30 <__NVIC_GetPriorityGrouping>
 8100cb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100cb2:	687a      	ldr	r2, [r7, #4]
 8100cb4:	68b9      	ldr	r1, [r7, #8]
 8100cb6:	6978      	ldr	r0, [r7, #20]
 8100cb8:	f7ff ff90 	bl	8100bdc <NVIC_EncodePriority>
 8100cbc:	4602      	mov	r2, r0
 8100cbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100cc2:	4611      	mov	r1, r2
 8100cc4:	4618      	mov	r0, r3
 8100cc6:	f7ff ff5f 	bl	8100b88 <__NVIC_SetPriority>
}
 8100cca:	bf00      	nop
 8100ccc:	3718      	adds	r7, #24
 8100cce:	46bd      	mov	sp, r7
 8100cd0:	bd80      	pop	{r7, pc}

08100cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100cd2:	b580      	push	{r7, lr}
 8100cd4:	b082      	sub	sp, #8
 8100cd6:	af00      	add	r7, sp, #0
 8100cd8:	4603      	mov	r3, r0
 8100cda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100cdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100ce0:	4618      	mov	r0, r3
 8100ce2:	f7ff ff33 	bl	8100b4c <__NVIC_EnableIRQ>
}
 8100ce6:	bf00      	nop
 8100ce8:	3708      	adds	r7, #8
 8100cea:	46bd      	mov	sp, r7
 8100cec:	bd80      	pop	{r7, pc}

08100cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100cee:	b580      	push	{r7, lr}
 8100cf0:	b082      	sub	sp, #8
 8100cf2:	af00      	add	r7, sp, #0
 8100cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100cf6:	6878      	ldr	r0, [r7, #4]
 8100cf8:	f7ff ffa4 	bl	8100c44 <SysTick_Config>
 8100cfc:	4603      	mov	r3, r0
}
 8100cfe:	4618      	mov	r0, r3
 8100d00:	3708      	adds	r7, #8
 8100d02:	46bd      	mov	sp, r7
 8100d04:	bd80      	pop	{r7, pc}
	...

08100d08 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100d08:	b480      	push	{r7}
 8100d0a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100d0c:	4b07      	ldr	r3, [pc, #28]	; (8100d2c <HAL_GetCurrentCPUID+0x24>)
 8100d0e:	681b      	ldr	r3, [r3, #0]
 8100d10:	091b      	lsrs	r3, r3, #4
 8100d12:	f003 030f 	and.w	r3, r3, #15
 8100d16:	2b07      	cmp	r3, #7
 8100d18:	d101      	bne.n	8100d1e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100d1a:	2303      	movs	r3, #3
 8100d1c:	e000      	b.n	8100d20 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100d1e:	2301      	movs	r3, #1
  }
}
 8100d20:	4618      	mov	r0, r3
 8100d22:	46bd      	mov	sp, r7
 8100d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d28:	4770      	bx	lr
 8100d2a:	bf00      	nop
 8100d2c:	e000ed00 	.word	0xe000ed00

08100d30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8100d30:	b580      	push	{r7, lr}
 8100d32:	b086      	sub	sp, #24
 8100d34:	af00      	add	r7, sp, #0
 8100d36:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8100d38:	f7ff fea6 	bl	8100a88 <HAL_GetTick>
 8100d3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8100d3e:	687b      	ldr	r3, [r7, #4]
 8100d40:	2b00      	cmp	r3, #0
 8100d42:	d101      	bne.n	8100d48 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8100d44:	2301      	movs	r3, #1
 8100d46:	e314      	b.n	8101372 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8100d48:	687b      	ldr	r3, [r7, #4]
 8100d4a:	681b      	ldr	r3, [r3, #0]
 8100d4c:	4a66      	ldr	r2, [pc, #408]	; (8100ee8 <HAL_DMA_Init+0x1b8>)
 8100d4e:	4293      	cmp	r3, r2
 8100d50:	d04a      	beq.n	8100de8 <HAL_DMA_Init+0xb8>
 8100d52:	687b      	ldr	r3, [r7, #4]
 8100d54:	681b      	ldr	r3, [r3, #0]
 8100d56:	4a65      	ldr	r2, [pc, #404]	; (8100eec <HAL_DMA_Init+0x1bc>)
 8100d58:	4293      	cmp	r3, r2
 8100d5a:	d045      	beq.n	8100de8 <HAL_DMA_Init+0xb8>
 8100d5c:	687b      	ldr	r3, [r7, #4]
 8100d5e:	681b      	ldr	r3, [r3, #0]
 8100d60:	4a63      	ldr	r2, [pc, #396]	; (8100ef0 <HAL_DMA_Init+0x1c0>)
 8100d62:	4293      	cmp	r3, r2
 8100d64:	d040      	beq.n	8100de8 <HAL_DMA_Init+0xb8>
 8100d66:	687b      	ldr	r3, [r7, #4]
 8100d68:	681b      	ldr	r3, [r3, #0]
 8100d6a:	4a62      	ldr	r2, [pc, #392]	; (8100ef4 <HAL_DMA_Init+0x1c4>)
 8100d6c:	4293      	cmp	r3, r2
 8100d6e:	d03b      	beq.n	8100de8 <HAL_DMA_Init+0xb8>
 8100d70:	687b      	ldr	r3, [r7, #4]
 8100d72:	681b      	ldr	r3, [r3, #0]
 8100d74:	4a60      	ldr	r2, [pc, #384]	; (8100ef8 <HAL_DMA_Init+0x1c8>)
 8100d76:	4293      	cmp	r3, r2
 8100d78:	d036      	beq.n	8100de8 <HAL_DMA_Init+0xb8>
 8100d7a:	687b      	ldr	r3, [r7, #4]
 8100d7c:	681b      	ldr	r3, [r3, #0]
 8100d7e:	4a5f      	ldr	r2, [pc, #380]	; (8100efc <HAL_DMA_Init+0x1cc>)
 8100d80:	4293      	cmp	r3, r2
 8100d82:	d031      	beq.n	8100de8 <HAL_DMA_Init+0xb8>
 8100d84:	687b      	ldr	r3, [r7, #4]
 8100d86:	681b      	ldr	r3, [r3, #0]
 8100d88:	4a5d      	ldr	r2, [pc, #372]	; (8100f00 <HAL_DMA_Init+0x1d0>)
 8100d8a:	4293      	cmp	r3, r2
 8100d8c:	d02c      	beq.n	8100de8 <HAL_DMA_Init+0xb8>
 8100d8e:	687b      	ldr	r3, [r7, #4]
 8100d90:	681b      	ldr	r3, [r3, #0]
 8100d92:	4a5c      	ldr	r2, [pc, #368]	; (8100f04 <HAL_DMA_Init+0x1d4>)
 8100d94:	4293      	cmp	r3, r2
 8100d96:	d027      	beq.n	8100de8 <HAL_DMA_Init+0xb8>
 8100d98:	687b      	ldr	r3, [r7, #4]
 8100d9a:	681b      	ldr	r3, [r3, #0]
 8100d9c:	4a5a      	ldr	r2, [pc, #360]	; (8100f08 <HAL_DMA_Init+0x1d8>)
 8100d9e:	4293      	cmp	r3, r2
 8100da0:	d022      	beq.n	8100de8 <HAL_DMA_Init+0xb8>
 8100da2:	687b      	ldr	r3, [r7, #4]
 8100da4:	681b      	ldr	r3, [r3, #0]
 8100da6:	4a59      	ldr	r2, [pc, #356]	; (8100f0c <HAL_DMA_Init+0x1dc>)
 8100da8:	4293      	cmp	r3, r2
 8100daa:	d01d      	beq.n	8100de8 <HAL_DMA_Init+0xb8>
 8100dac:	687b      	ldr	r3, [r7, #4]
 8100dae:	681b      	ldr	r3, [r3, #0]
 8100db0:	4a57      	ldr	r2, [pc, #348]	; (8100f10 <HAL_DMA_Init+0x1e0>)
 8100db2:	4293      	cmp	r3, r2
 8100db4:	d018      	beq.n	8100de8 <HAL_DMA_Init+0xb8>
 8100db6:	687b      	ldr	r3, [r7, #4]
 8100db8:	681b      	ldr	r3, [r3, #0]
 8100dba:	4a56      	ldr	r2, [pc, #344]	; (8100f14 <HAL_DMA_Init+0x1e4>)
 8100dbc:	4293      	cmp	r3, r2
 8100dbe:	d013      	beq.n	8100de8 <HAL_DMA_Init+0xb8>
 8100dc0:	687b      	ldr	r3, [r7, #4]
 8100dc2:	681b      	ldr	r3, [r3, #0]
 8100dc4:	4a54      	ldr	r2, [pc, #336]	; (8100f18 <HAL_DMA_Init+0x1e8>)
 8100dc6:	4293      	cmp	r3, r2
 8100dc8:	d00e      	beq.n	8100de8 <HAL_DMA_Init+0xb8>
 8100dca:	687b      	ldr	r3, [r7, #4]
 8100dcc:	681b      	ldr	r3, [r3, #0]
 8100dce:	4a53      	ldr	r2, [pc, #332]	; (8100f1c <HAL_DMA_Init+0x1ec>)
 8100dd0:	4293      	cmp	r3, r2
 8100dd2:	d009      	beq.n	8100de8 <HAL_DMA_Init+0xb8>
 8100dd4:	687b      	ldr	r3, [r7, #4]
 8100dd6:	681b      	ldr	r3, [r3, #0]
 8100dd8:	4a51      	ldr	r2, [pc, #324]	; (8100f20 <HAL_DMA_Init+0x1f0>)
 8100dda:	4293      	cmp	r3, r2
 8100ddc:	d004      	beq.n	8100de8 <HAL_DMA_Init+0xb8>
 8100dde:	687b      	ldr	r3, [r7, #4]
 8100de0:	681b      	ldr	r3, [r3, #0]
 8100de2:	4a50      	ldr	r2, [pc, #320]	; (8100f24 <HAL_DMA_Init+0x1f4>)
 8100de4:	4293      	cmp	r3, r2
 8100de6:	d101      	bne.n	8100dec <HAL_DMA_Init+0xbc>
 8100de8:	2301      	movs	r3, #1
 8100dea:	e000      	b.n	8100dee <HAL_DMA_Init+0xbe>
 8100dec:	2300      	movs	r3, #0
 8100dee:	2b00      	cmp	r3, #0
 8100df0:	f000 813b 	beq.w	810106a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8100df4:	687b      	ldr	r3, [r7, #4]
 8100df6:	2200      	movs	r2, #0
 8100df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8100dfc:	687b      	ldr	r3, [r7, #4]
 8100dfe:	2202      	movs	r2, #2
 8100e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8100e04:	687b      	ldr	r3, [r7, #4]
 8100e06:	681b      	ldr	r3, [r3, #0]
 8100e08:	4a37      	ldr	r2, [pc, #220]	; (8100ee8 <HAL_DMA_Init+0x1b8>)
 8100e0a:	4293      	cmp	r3, r2
 8100e0c:	d04a      	beq.n	8100ea4 <HAL_DMA_Init+0x174>
 8100e0e:	687b      	ldr	r3, [r7, #4]
 8100e10:	681b      	ldr	r3, [r3, #0]
 8100e12:	4a36      	ldr	r2, [pc, #216]	; (8100eec <HAL_DMA_Init+0x1bc>)
 8100e14:	4293      	cmp	r3, r2
 8100e16:	d045      	beq.n	8100ea4 <HAL_DMA_Init+0x174>
 8100e18:	687b      	ldr	r3, [r7, #4]
 8100e1a:	681b      	ldr	r3, [r3, #0]
 8100e1c:	4a34      	ldr	r2, [pc, #208]	; (8100ef0 <HAL_DMA_Init+0x1c0>)
 8100e1e:	4293      	cmp	r3, r2
 8100e20:	d040      	beq.n	8100ea4 <HAL_DMA_Init+0x174>
 8100e22:	687b      	ldr	r3, [r7, #4]
 8100e24:	681b      	ldr	r3, [r3, #0]
 8100e26:	4a33      	ldr	r2, [pc, #204]	; (8100ef4 <HAL_DMA_Init+0x1c4>)
 8100e28:	4293      	cmp	r3, r2
 8100e2a:	d03b      	beq.n	8100ea4 <HAL_DMA_Init+0x174>
 8100e2c:	687b      	ldr	r3, [r7, #4]
 8100e2e:	681b      	ldr	r3, [r3, #0]
 8100e30:	4a31      	ldr	r2, [pc, #196]	; (8100ef8 <HAL_DMA_Init+0x1c8>)
 8100e32:	4293      	cmp	r3, r2
 8100e34:	d036      	beq.n	8100ea4 <HAL_DMA_Init+0x174>
 8100e36:	687b      	ldr	r3, [r7, #4]
 8100e38:	681b      	ldr	r3, [r3, #0]
 8100e3a:	4a30      	ldr	r2, [pc, #192]	; (8100efc <HAL_DMA_Init+0x1cc>)
 8100e3c:	4293      	cmp	r3, r2
 8100e3e:	d031      	beq.n	8100ea4 <HAL_DMA_Init+0x174>
 8100e40:	687b      	ldr	r3, [r7, #4]
 8100e42:	681b      	ldr	r3, [r3, #0]
 8100e44:	4a2e      	ldr	r2, [pc, #184]	; (8100f00 <HAL_DMA_Init+0x1d0>)
 8100e46:	4293      	cmp	r3, r2
 8100e48:	d02c      	beq.n	8100ea4 <HAL_DMA_Init+0x174>
 8100e4a:	687b      	ldr	r3, [r7, #4]
 8100e4c:	681b      	ldr	r3, [r3, #0]
 8100e4e:	4a2d      	ldr	r2, [pc, #180]	; (8100f04 <HAL_DMA_Init+0x1d4>)
 8100e50:	4293      	cmp	r3, r2
 8100e52:	d027      	beq.n	8100ea4 <HAL_DMA_Init+0x174>
 8100e54:	687b      	ldr	r3, [r7, #4]
 8100e56:	681b      	ldr	r3, [r3, #0]
 8100e58:	4a2b      	ldr	r2, [pc, #172]	; (8100f08 <HAL_DMA_Init+0x1d8>)
 8100e5a:	4293      	cmp	r3, r2
 8100e5c:	d022      	beq.n	8100ea4 <HAL_DMA_Init+0x174>
 8100e5e:	687b      	ldr	r3, [r7, #4]
 8100e60:	681b      	ldr	r3, [r3, #0]
 8100e62:	4a2a      	ldr	r2, [pc, #168]	; (8100f0c <HAL_DMA_Init+0x1dc>)
 8100e64:	4293      	cmp	r3, r2
 8100e66:	d01d      	beq.n	8100ea4 <HAL_DMA_Init+0x174>
 8100e68:	687b      	ldr	r3, [r7, #4]
 8100e6a:	681b      	ldr	r3, [r3, #0]
 8100e6c:	4a28      	ldr	r2, [pc, #160]	; (8100f10 <HAL_DMA_Init+0x1e0>)
 8100e6e:	4293      	cmp	r3, r2
 8100e70:	d018      	beq.n	8100ea4 <HAL_DMA_Init+0x174>
 8100e72:	687b      	ldr	r3, [r7, #4]
 8100e74:	681b      	ldr	r3, [r3, #0]
 8100e76:	4a27      	ldr	r2, [pc, #156]	; (8100f14 <HAL_DMA_Init+0x1e4>)
 8100e78:	4293      	cmp	r3, r2
 8100e7a:	d013      	beq.n	8100ea4 <HAL_DMA_Init+0x174>
 8100e7c:	687b      	ldr	r3, [r7, #4]
 8100e7e:	681b      	ldr	r3, [r3, #0]
 8100e80:	4a25      	ldr	r2, [pc, #148]	; (8100f18 <HAL_DMA_Init+0x1e8>)
 8100e82:	4293      	cmp	r3, r2
 8100e84:	d00e      	beq.n	8100ea4 <HAL_DMA_Init+0x174>
 8100e86:	687b      	ldr	r3, [r7, #4]
 8100e88:	681b      	ldr	r3, [r3, #0]
 8100e8a:	4a24      	ldr	r2, [pc, #144]	; (8100f1c <HAL_DMA_Init+0x1ec>)
 8100e8c:	4293      	cmp	r3, r2
 8100e8e:	d009      	beq.n	8100ea4 <HAL_DMA_Init+0x174>
 8100e90:	687b      	ldr	r3, [r7, #4]
 8100e92:	681b      	ldr	r3, [r3, #0]
 8100e94:	4a22      	ldr	r2, [pc, #136]	; (8100f20 <HAL_DMA_Init+0x1f0>)
 8100e96:	4293      	cmp	r3, r2
 8100e98:	d004      	beq.n	8100ea4 <HAL_DMA_Init+0x174>
 8100e9a:	687b      	ldr	r3, [r7, #4]
 8100e9c:	681b      	ldr	r3, [r3, #0]
 8100e9e:	4a21      	ldr	r2, [pc, #132]	; (8100f24 <HAL_DMA_Init+0x1f4>)
 8100ea0:	4293      	cmp	r3, r2
 8100ea2:	d108      	bne.n	8100eb6 <HAL_DMA_Init+0x186>
 8100ea4:	687b      	ldr	r3, [r7, #4]
 8100ea6:	681b      	ldr	r3, [r3, #0]
 8100ea8:	681a      	ldr	r2, [r3, #0]
 8100eaa:	687b      	ldr	r3, [r7, #4]
 8100eac:	681b      	ldr	r3, [r3, #0]
 8100eae:	f022 0201 	bic.w	r2, r2, #1
 8100eb2:	601a      	str	r2, [r3, #0]
 8100eb4:	e007      	b.n	8100ec6 <HAL_DMA_Init+0x196>
 8100eb6:	687b      	ldr	r3, [r7, #4]
 8100eb8:	681b      	ldr	r3, [r3, #0]
 8100eba:	681a      	ldr	r2, [r3, #0]
 8100ebc:	687b      	ldr	r3, [r7, #4]
 8100ebe:	681b      	ldr	r3, [r3, #0]
 8100ec0:	f022 0201 	bic.w	r2, r2, #1
 8100ec4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8100ec6:	e02f      	b.n	8100f28 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8100ec8:	f7ff fdde 	bl	8100a88 <HAL_GetTick>
 8100ecc:	4602      	mov	r2, r0
 8100ece:	693b      	ldr	r3, [r7, #16]
 8100ed0:	1ad3      	subs	r3, r2, r3
 8100ed2:	2b05      	cmp	r3, #5
 8100ed4:	d928      	bls.n	8100f28 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8100ed6:	687b      	ldr	r3, [r7, #4]
 8100ed8:	2220      	movs	r2, #32
 8100eda:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8100edc:	687b      	ldr	r3, [r7, #4]
 8100ede:	2203      	movs	r2, #3
 8100ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8100ee4:	2301      	movs	r3, #1
 8100ee6:	e244      	b.n	8101372 <HAL_DMA_Init+0x642>
 8100ee8:	40020010 	.word	0x40020010
 8100eec:	40020028 	.word	0x40020028
 8100ef0:	40020040 	.word	0x40020040
 8100ef4:	40020058 	.word	0x40020058
 8100ef8:	40020070 	.word	0x40020070
 8100efc:	40020088 	.word	0x40020088
 8100f00:	400200a0 	.word	0x400200a0
 8100f04:	400200b8 	.word	0x400200b8
 8100f08:	40020410 	.word	0x40020410
 8100f0c:	40020428 	.word	0x40020428
 8100f10:	40020440 	.word	0x40020440
 8100f14:	40020458 	.word	0x40020458
 8100f18:	40020470 	.word	0x40020470
 8100f1c:	40020488 	.word	0x40020488
 8100f20:	400204a0 	.word	0x400204a0
 8100f24:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8100f28:	687b      	ldr	r3, [r7, #4]
 8100f2a:	681b      	ldr	r3, [r3, #0]
 8100f2c:	681b      	ldr	r3, [r3, #0]
 8100f2e:	f003 0301 	and.w	r3, r3, #1
 8100f32:	2b00      	cmp	r3, #0
 8100f34:	d1c8      	bne.n	8100ec8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8100f36:	687b      	ldr	r3, [r7, #4]
 8100f38:	681b      	ldr	r3, [r3, #0]
 8100f3a:	681b      	ldr	r3, [r3, #0]
 8100f3c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8100f3e:	697a      	ldr	r2, [r7, #20]
 8100f40:	4b84      	ldr	r3, [pc, #528]	; (8101154 <HAL_DMA_Init+0x424>)
 8100f42:	4013      	ands	r3, r2
 8100f44:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8100f46:	687b      	ldr	r3, [r7, #4]
 8100f48:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8100f4a:	687b      	ldr	r3, [r7, #4]
 8100f4c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8100f4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8100f50:	687b      	ldr	r3, [r7, #4]
 8100f52:	691b      	ldr	r3, [r3, #16]
 8100f54:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8100f56:	687b      	ldr	r3, [r7, #4]
 8100f58:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8100f5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8100f5c:	687b      	ldr	r3, [r7, #4]
 8100f5e:	699b      	ldr	r3, [r3, #24]
 8100f60:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8100f62:	687b      	ldr	r3, [r7, #4]
 8100f64:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8100f66:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8100f68:	687b      	ldr	r3, [r7, #4]
 8100f6a:	6a1b      	ldr	r3, [r3, #32]
 8100f6c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8100f6e:	697a      	ldr	r2, [r7, #20]
 8100f70:	4313      	orrs	r3, r2
 8100f72:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8100f74:	687b      	ldr	r3, [r7, #4]
 8100f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100f78:	2b04      	cmp	r3, #4
 8100f7a:	d107      	bne.n	8100f8c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8100f7c:	687b      	ldr	r3, [r7, #4]
 8100f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8100f80:	687b      	ldr	r3, [r7, #4]
 8100f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100f84:	4313      	orrs	r3, r2
 8100f86:	697a      	ldr	r2, [r7, #20]
 8100f88:	4313      	orrs	r3, r2
 8100f8a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8100f8c:	4b72      	ldr	r3, [pc, #456]	; (8101158 <HAL_DMA_Init+0x428>)
 8100f8e:	681b      	ldr	r3, [r3, #0]
 8100f90:	0c1b      	lsrs	r3, r3, #16
 8100f92:	041b      	lsls	r3, r3, #16
 8100f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8100f98:	d328      	bcc.n	8100fec <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8100f9a:	687b      	ldr	r3, [r7, #4]
 8100f9c:	685b      	ldr	r3, [r3, #4]
 8100f9e:	2b28      	cmp	r3, #40	; 0x28
 8100fa0:	d903      	bls.n	8100faa <HAL_DMA_Init+0x27a>
 8100fa2:	687b      	ldr	r3, [r7, #4]
 8100fa4:	685b      	ldr	r3, [r3, #4]
 8100fa6:	2b2e      	cmp	r3, #46	; 0x2e
 8100fa8:	d917      	bls.n	8100fda <HAL_DMA_Init+0x2aa>
 8100faa:	687b      	ldr	r3, [r7, #4]
 8100fac:	685b      	ldr	r3, [r3, #4]
 8100fae:	2b3e      	cmp	r3, #62	; 0x3e
 8100fb0:	d903      	bls.n	8100fba <HAL_DMA_Init+0x28a>
 8100fb2:	687b      	ldr	r3, [r7, #4]
 8100fb4:	685b      	ldr	r3, [r3, #4]
 8100fb6:	2b42      	cmp	r3, #66	; 0x42
 8100fb8:	d90f      	bls.n	8100fda <HAL_DMA_Init+0x2aa>
 8100fba:	687b      	ldr	r3, [r7, #4]
 8100fbc:	685b      	ldr	r3, [r3, #4]
 8100fbe:	2b46      	cmp	r3, #70	; 0x46
 8100fc0:	d903      	bls.n	8100fca <HAL_DMA_Init+0x29a>
 8100fc2:	687b      	ldr	r3, [r7, #4]
 8100fc4:	685b      	ldr	r3, [r3, #4]
 8100fc6:	2b48      	cmp	r3, #72	; 0x48
 8100fc8:	d907      	bls.n	8100fda <HAL_DMA_Init+0x2aa>
 8100fca:	687b      	ldr	r3, [r7, #4]
 8100fcc:	685b      	ldr	r3, [r3, #4]
 8100fce:	2b4e      	cmp	r3, #78	; 0x4e
 8100fd0:	d905      	bls.n	8100fde <HAL_DMA_Init+0x2ae>
 8100fd2:	687b      	ldr	r3, [r7, #4]
 8100fd4:	685b      	ldr	r3, [r3, #4]
 8100fd6:	2b52      	cmp	r3, #82	; 0x52
 8100fd8:	d801      	bhi.n	8100fde <HAL_DMA_Init+0x2ae>
 8100fda:	2301      	movs	r3, #1
 8100fdc:	e000      	b.n	8100fe0 <HAL_DMA_Init+0x2b0>
 8100fde:	2300      	movs	r3, #0
 8100fe0:	2b00      	cmp	r3, #0
 8100fe2:	d003      	beq.n	8100fec <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8100fe4:	697b      	ldr	r3, [r7, #20]
 8100fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100fea:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8100fec:	687b      	ldr	r3, [r7, #4]
 8100fee:	681b      	ldr	r3, [r3, #0]
 8100ff0:	697a      	ldr	r2, [r7, #20]
 8100ff2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8100ff4:	687b      	ldr	r3, [r7, #4]
 8100ff6:	681b      	ldr	r3, [r3, #0]
 8100ff8:	695b      	ldr	r3, [r3, #20]
 8100ffa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8100ffc:	697b      	ldr	r3, [r7, #20]
 8100ffe:	f023 0307 	bic.w	r3, r3, #7
 8101002:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8101004:	687b      	ldr	r3, [r7, #4]
 8101006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101008:	697a      	ldr	r2, [r7, #20]
 810100a:	4313      	orrs	r3, r2
 810100c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810100e:	687b      	ldr	r3, [r7, #4]
 8101010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101012:	2b04      	cmp	r3, #4
 8101014:	d117      	bne.n	8101046 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8101016:	687b      	ldr	r3, [r7, #4]
 8101018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810101a:	697a      	ldr	r2, [r7, #20]
 810101c:	4313      	orrs	r3, r2
 810101e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8101020:	687b      	ldr	r3, [r7, #4]
 8101022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101024:	2b00      	cmp	r3, #0
 8101026:	d00e      	beq.n	8101046 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8101028:	6878      	ldr	r0, [r7, #4]
 810102a:	f002 f811 	bl	8103050 <DMA_CheckFifoParam>
 810102e:	4603      	mov	r3, r0
 8101030:	2b00      	cmp	r3, #0
 8101032:	d008      	beq.n	8101046 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8101034:	687b      	ldr	r3, [r7, #4]
 8101036:	2240      	movs	r2, #64	; 0x40
 8101038:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810103a:	687b      	ldr	r3, [r7, #4]
 810103c:	2201      	movs	r2, #1
 810103e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8101042:	2301      	movs	r3, #1
 8101044:	e195      	b.n	8101372 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8101046:	687b      	ldr	r3, [r7, #4]
 8101048:	681b      	ldr	r3, [r3, #0]
 810104a:	697a      	ldr	r2, [r7, #20]
 810104c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810104e:	6878      	ldr	r0, [r7, #4]
 8101050:	f001 ff4c 	bl	8102eec <DMA_CalcBaseAndBitshift>
 8101054:	4603      	mov	r3, r0
 8101056:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8101058:	687b      	ldr	r3, [r7, #4]
 810105a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810105c:	f003 031f 	and.w	r3, r3, #31
 8101060:	223f      	movs	r2, #63	; 0x3f
 8101062:	409a      	lsls	r2, r3
 8101064:	68bb      	ldr	r3, [r7, #8]
 8101066:	609a      	str	r2, [r3, #8]
 8101068:	e0cb      	b.n	8101202 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810106a:	687b      	ldr	r3, [r7, #4]
 810106c:	681b      	ldr	r3, [r3, #0]
 810106e:	4a3b      	ldr	r2, [pc, #236]	; (810115c <HAL_DMA_Init+0x42c>)
 8101070:	4293      	cmp	r3, r2
 8101072:	d022      	beq.n	81010ba <HAL_DMA_Init+0x38a>
 8101074:	687b      	ldr	r3, [r7, #4]
 8101076:	681b      	ldr	r3, [r3, #0]
 8101078:	4a39      	ldr	r2, [pc, #228]	; (8101160 <HAL_DMA_Init+0x430>)
 810107a:	4293      	cmp	r3, r2
 810107c:	d01d      	beq.n	81010ba <HAL_DMA_Init+0x38a>
 810107e:	687b      	ldr	r3, [r7, #4]
 8101080:	681b      	ldr	r3, [r3, #0]
 8101082:	4a38      	ldr	r2, [pc, #224]	; (8101164 <HAL_DMA_Init+0x434>)
 8101084:	4293      	cmp	r3, r2
 8101086:	d018      	beq.n	81010ba <HAL_DMA_Init+0x38a>
 8101088:	687b      	ldr	r3, [r7, #4]
 810108a:	681b      	ldr	r3, [r3, #0]
 810108c:	4a36      	ldr	r2, [pc, #216]	; (8101168 <HAL_DMA_Init+0x438>)
 810108e:	4293      	cmp	r3, r2
 8101090:	d013      	beq.n	81010ba <HAL_DMA_Init+0x38a>
 8101092:	687b      	ldr	r3, [r7, #4]
 8101094:	681b      	ldr	r3, [r3, #0]
 8101096:	4a35      	ldr	r2, [pc, #212]	; (810116c <HAL_DMA_Init+0x43c>)
 8101098:	4293      	cmp	r3, r2
 810109a:	d00e      	beq.n	81010ba <HAL_DMA_Init+0x38a>
 810109c:	687b      	ldr	r3, [r7, #4]
 810109e:	681b      	ldr	r3, [r3, #0]
 81010a0:	4a33      	ldr	r2, [pc, #204]	; (8101170 <HAL_DMA_Init+0x440>)
 81010a2:	4293      	cmp	r3, r2
 81010a4:	d009      	beq.n	81010ba <HAL_DMA_Init+0x38a>
 81010a6:	687b      	ldr	r3, [r7, #4]
 81010a8:	681b      	ldr	r3, [r3, #0]
 81010aa:	4a32      	ldr	r2, [pc, #200]	; (8101174 <HAL_DMA_Init+0x444>)
 81010ac:	4293      	cmp	r3, r2
 81010ae:	d004      	beq.n	81010ba <HAL_DMA_Init+0x38a>
 81010b0:	687b      	ldr	r3, [r7, #4]
 81010b2:	681b      	ldr	r3, [r3, #0]
 81010b4:	4a30      	ldr	r2, [pc, #192]	; (8101178 <HAL_DMA_Init+0x448>)
 81010b6:	4293      	cmp	r3, r2
 81010b8:	d101      	bne.n	81010be <HAL_DMA_Init+0x38e>
 81010ba:	2301      	movs	r3, #1
 81010bc:	e000      	b.n	81010c0 <HAL_DMA_Init+0x390>
 81010be:	2300      	movs	r3, #0
 81010c0:	2b00      	cmp	r3, #0
 81010c2:	f000 8095 	beq.w	81011f0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81010c6:	687b      	ldr	r3, [r7, #4]
 81010c8:	681b      	ldr	r3, [r3, #0]
 81010ca:	4a24      	ldr	r2, [pc, #144]	; (810115c <HAL_DMA_Init+0x42c>)
 81010cc:	4293      	cmp	r3, r2
 81010ce:	d021      	beq.n	8101114 <HAL_DMA_Init+0x3e4>
 81010d0:	687b      	ldr	r3, [r7, #4]
 81010d2:	681b      	ldr	r3, [r3, #0]
 81010d4:	4a22      	ldr	r2, [pc, #136]	; (8101160 <HAL_DMA_Init+0x430>)
 81010d6:	4293      	cmp	r3, r2
 81010d8:	d01c      	beq.n	8101114 <HAL_DMA_Init+0x3e4>
 81010da:	687b      	ldr	r3, [r7, #4]
 81010dc:	681b      	ldr	r3, [r3, #0]
 81010de:	4a21      	ldr	r2, [pc, #132]	; (8101164 <HAL_DMA_Init+0x434>)
 81010e0:	4293      	cmp	r3, r2
 81010e2:	d017      	beq.n	8101114 <HAL_DMA_Init+0x3e4>
 81010e4:	687b      	ldr	r3, [r7, #4]
 81010e6:	681b      	ldr	r3, [r3, #0]
 81010e8:	4a1f      	ldr	r2, [pc, #124]	; (8101168 <HAL_DMA_Init+0x438>)
 81010ea:	4293      	cmp	r3, r2
 81010ec:	d012      	beq.n	8101114 <HAL_DMA_Init+0x3e4>
 81010ee:	687b      	ldr	r3, [r7, #4]
 81010f0:	681b      	ldr	r3, [r3, #0]
 81010f2:	4a1e      	ldr	r2, [pc, #120]	; (810116c <HAL_DMA_Init+0x43c>)
 81010f4:	4293      	cmp	r3, r2
 81010f6:	d00d      	beq.n	8101114 <HAL_DMA_Init+0x3e4>
 81010f8:	687b      	ldr	r3, [r7, #4]
 81010fa:	681b      	ldr	r3, [r3, #0]
 81010fc:	4a1c      	ldr	r2, [pc, #112]	; (8101170 <HAL_DMA_Init+0x440>)
 81010fe:	4293      	cmp	r3, r2
 8101100:	d008      	beq.n	8101114 <HAL_DMA_Init+0x3e4>
 8101102:	687b      	ldr	r3, [r7, #4]
 8101104:	681b      	ldr	r3, [r3, #0]
 8101106:	4a1b      	ldr	r2, [pc, #108]	; (8101174 <HAL_DMA_Init+0x444>)
 8101108:	4293      	cmp	r3, r2
 810110a:	d003      	beq.n	8101114 <HAL_DMA_Init+0x3e4>
 810110c:	687b      	ldr	r3, [r7, #4]
 810110e:	681b      	ldr	r3, [r3, #0]
 8101110:	4a19      	ldr	r2, [pc, #100]	; (8101178 <HAL_DMA_Init+0x448>)
 8101112:	4293      	cmp	r3, r2
 8101114:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8101116:	687b      	ldr	r3, [r7, #4]
 8101118:	2200      	movs	r2, #0
 810111a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810111e:	687b      	ldr	r3, [r7, #4]
 8101120:	2202      	movs	r2, #2
 8101122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8101126:	687b      	ldr	r3, [r7, #4]
 8101128:	681b      	ldr	r3, [r3, #0]
 810112a:	681b      	ldr	r3, [r3, #0]
 810112c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 810112e:	697b      	ldr	r3, [r7, #20]
 8101130:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8101134:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8101138:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810113a:	687b      	ldr	r3, [r7, #4]
 810113c:	689b      	ldr	r3, [r3, #8]
 810113e:	2b40      	cmp	r3, #64	; 0x40
 8101140:	d01c      	beq.n	810117c <HAL_DMA_Init+0x44c>
 8101142:	687b      	ldr	r3, [r7, #4]
 8101144:	689b      	ldr	r3, [r3, #8]
 8101146:	2b80      	cmp	r3, #128	; 0x80
 8101148:	d102      	bne.n	8101150 <HAL_DMA_Init+0x420>
 810114a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810114e:	e016      	b.n	810117e <HAL_DMA_Init+0x44e>
 8101150:	2300      	movs	r3, #0
 8101152:	e014      	b.n	810117e <HAL_DMA_Init+0x44e>
 8101154:	fe10803f 	.word	0xfe10803f
 8101158:	5c001000 	.word	0x5c001000
 810115c:	58025408 	.word	0x58025408
 8101160:	5802541c 	.word	0x5802541c
 8101164:	58025430 	.word	0x58025430
 8101168:	58025444 	.word	0x58025444
 810116c:	58025458 	.word	0x58025458
 8101170:	5802546c 	.word	0x5802546c
 8101174:	58025480 	.word	0x58025480
 8101178:	58025494 	.word	0x58025494
 810117c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810117e:	687a      	ldr	r2, [r7, #4]
 8101180:	68d2      	ldr	r2, [r2, #12]
 8101182:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8101184:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8101186:	687b      	ldr	r3, [r7, #4]
 8101188:	691b      	ldr	r3, [r3, #16]
 810118a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810118c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810118e:	687b      	ldr	r3, [r7, #4]
 8101190:	695b      	ldr	r3, [r3, #20]
 8101192:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8101194:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8101196:	687b      	ldr	r3, [r7, #4]
 8101198:	699b      	ldr	r3, [r3, #24]
 810119a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810119c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810119e:	687b      	ldr	r3, [r7, #4]
 81011a0:	69db      	ldr	r3, [r3, #28]
 81011a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81011a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 81011a6:	687b      	ldr	r3, [r7, #4]
 81011a8:	6a1b      	ldr	r3, [r3, #32]
 81011aa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81011ac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81011ae:	697a      	ldr	r2, [r7, #20]
 81011b0:	4313      	orrs	r3, r2
 81011b2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 81011b4:	687b      	ldr	r3, [r7, #4]
 81011b6:	681b      	ldr	r3, [r3, #0]
 81011b8:	697a      	ldr	r2, [r7, #20]
 81011ba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81011bc:	687b      	ldr	r3, [r7, #4]
 81011be:	681b      	ldr	r3, [r3, #0]
 81011c0:	461a      	mov	r2, r3
 81011c2:	4b6e      	ldr	r3, [pc, #440]	; (810137c <HAL_DMA_Init+0x64c>)
 81011c4:	4413      	add	r3, r2
 81011c6:	4a6e      	ldr	r2, [pc, #440]	; (8101380 <HAL_DMA_Init+0x650>)
 81011c8:	fba2 2303 	umull	r2, r3, r2, r3
 81011cc:	091b      	lsrs	r3, r3, #4
 81011ce:	009a      	lsls	r2, r3, #2
 81011d0:	687b      	ldr	r3, [r7, #4]
 81011d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81011d4:	6878      	ldr	r0, [r7, #4]
 81011d6:	f001 fe89 	bl	8102eec <DMA_CalcBaseAndBitshift>
 81011da:	4603      	mov	r3, r0
 81011dc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81011de:	687b      	ldr	r3, [r7, #4]
 81011e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81011e2:	f003 031f 	and.w	r3, r3, #31
 81011e6:	2201      	movs	r2, #1
 81011e8:	409a      	lsls	r2, r3
 81011ea:	68fb      	ldr	r3, [r7, #12]
 81011ec:	605a      	str	r2, [r3, #4]
 81011ee:	e008      	b.n	8101202 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81011f0:	687b      	ldr	r3, [r7, #4]
 81011f2:	2240      	movs	r2, #64	; 0x40
 81011f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 81011f6:	687b      	ldr	r3, [r7, #4]
 81011f8:	2203      	movs	r2, #3
 81011fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 81011fe:	2301      	movs	r3, #1
 8101200:	e0b7      	b.n	8101372 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101202:	687b      	ldr	r3, [r7, #4]
 8101204:	681b      	ldr	r3, [r3, #0]
 8101206:	4a5f      	ldr	r2, [pc, #380]	; (8101384 <HAL_DMA_Init+0x654>)
 8101208:	4293      	cmp	r3, r2
 810120a:	d072      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 810120c:	687b      	ldr	r3, [r7, #4]
 810120e:	681b      	ldr	r3, [r3, #0]
 8101210:	4a5d      	ldr	r2, [pc, #372]	; (8101388 <HAL_DMA_Init+0x658>)
 8101212:	4293      	cmp	r3, r2
 8101214:	d06d      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 8101216:	687b      	ldr	r3, [r7, #4]
 8101218:	681b      	ldr	r3, [r3, #0]
 810121a:	4a5c      	ldr	r2, [pc, #368]	; (810138c <HAL_DMA_Init+0x65c>)
 810121c:	4293      	cmp	r3, r2
 810121e:	d068      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 8101220:	687b      	ldr	r3, [r7, #4]
 8101222:	681b      	ldr	r3, [r3, #0]
 8101224:	4a5a      	ldr	r2, [pc, #360]	; (8101390 <HAL_DMA_Init+0x660>)
 8101226:	4293      	cmp	r3, r2
 8101228:	d063      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 810122a:	687b      	ldr	r3, [r7, #4]
 810122c:	681b      	ldr	r3, [r3, #0]
 810122e:	4a59      	ldr	r2, [pc, #356]	; (8101394 <HAL_DMA_Init+0x664>)
 8101230:	4293      	cmp	r3, r2
 8101232:	d05e      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 8101234:	687b      	ldr	r3, [r7, #4]
 8101236:	681b      	ldr	r3, [r3, #0]
 8101238:	4a57      	ldr	r2, [pc, #348]	; (8101398 <HAL_DMA_Init+0x668>)
 810123a:	4293      	cmp	r3, r2
 810123c:	d059      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 810123e:	687b      	ldr	r3, [r7, #4]
 8101240:	681b      	ldr	r3, [r3, #0]
 8101242:	4a56      	ldr	r2, [pc, #344]	; (810139c <HAL_DMA_Init+0x66c>)
 8101244:	4293      	cmp	r3, r2
 8101246:	d054      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 8101248:	687b      	ldr	r3, [r7, #4]
 810124a:	681b      	ldr	r3, [r3, #0]
 810124c:	4a54      	ldr	r2, [pc, #336]	; (81013a0 <HAL_DMA_Init+0x670>)
 810124e:	4293      	cmp	r3, r2
 8101250:	d04f      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 8101252:	687b      	ldr	r3, [r7, #4]
 8101254:	681b      	ldr	r3, [r3, #0]
 8101256:	4a53      	ldr	r2, [pc, #332]	; (81013a4 <HAL_DMA_Init+0x674>)
 8101258:	4293      	cmp	r3, r2
 810125a:	d04a      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 810125c:	687b      	ldr	r3, [r7, #4]
 810125e:	681b      	ldr	r3, [r3, #0]
 8101260:	4a51      	ldr	r2, [pc, #324]	; (81013a8 <HAL_DMA_Init+0x678>)
 8101262:	4293      	cmp	r3, r2
 8101264:	d045      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 8101266:	687b      	ldr	r3, [r7, #4]
 8101268:	681b      	ldr	r3, [r3, #0]
 810126a:	4a50      	ldr	r2, [pc, #320]	; (81013ac <HAL_DMA_Init+0x67c>)
 810126c:	4293      	cmp	r3, r2
 810126e:	d040      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 8101270:	687b      	ldr	r3, [r7, #4]
 8101272:	681b      	ldr	r3, [r3, #0]
 8101274:	4a4e      	ldr	r2, [pc, #312]	; (81013b0 <HAL_DMA_Init+0x680>)
 8101276:	4293      	cmp	r3, r2
 8101278:	d03b      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 810127a:	687b      	ldr	r3, [r7, #4]
 810127c:	681b      	ldr	r3, [r3, #0]
 810127e:	4a4d      	ldr	r2, [pc, #308]	; (81013b4 <HAL_DMA_Init+0x684>)
 8101280:	4293      	cmp	r3, r2
 8101282:	d036      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 8101284:	687b      	ldr	r3, [r7, #4]
 8101286:	681b      	ldr	r3, [r3, #0]
 8101288:	4a4b      	ldr	r2, [pc, #300]	; (81013b8 <HAL_DMA_Init+0x688>)
 810128a:	4293      	cmp	r3, r2
 810128c:	d031      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 810128e:	687b      	ldr	r3, [r7, #4]
 8101290:	681b      	ldr	r3, [r3, #0]
 8101292:	4a4a      	ldr	r2, [pc, #296]	; (81013bc <HAL_DMA_Init+0x68c>)
 8101294:	4293      	cmp	r3, r2
 8101296:	d02c      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 8101298:	687b      	ldr	r3, [r7, #4]
 810129a:	681b      	ldr	r3, [r3, #0]
 810129c:	4a48      	ldr	r2, [pc, #288]	; (81013c0 <HAL_DMA_Init+0x690>)
 810129e:	4293      	cmp	r3, r2
 81012a0:	d027      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 81012a2:	687b      	ldr	r3, [r7, #4]
 81012a4:	681b      	ldr	r3, [r3, #0]
 81012a6:	4a47      	ldr	r2, [pc, #284]	; (81013c4 <HAL_DMA_Init+0x694>)
 81012a8:	4293      	cmp	r3, r2
 81012aa:	d022      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 81012ac:	687b      	ldr	r3, [r7, #4]
 81012ae:	681b      	ldr	r3, [r3, #0]
 81012b0:	4a45      	ldr	r2, [pc, #276]	; (81013c8 <HAL_DMA_Init+0x698>)
 81012b2:	4293      	cmp	r3, r2
 81012b4:	d01d      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 81012b6:	687b      	ldr	r3, [r7, #4]
 81012b8:	681b      	ldr	r3, [r3, #0]
 81012ba:	4a44      	ldr	r2, [pc, #272]	; (81013cc <HAL_DMA_Init+0x69c>)
 81012bc:	4293      	cmp	r3, r2
 81012be:	d018      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 81012c0:	687b      	ldr	r3, [r7, #4]
 81012c2:	681b      	ldr	r3, [r3, #0]
 81012c4:	4a42      	ldr	r2, [pc, #264]	; (81013d0 <HAL_DMA_Init+0x6a0>)
 81012c6:	4293      	cmp	r3, r2
 81012c8:	d013      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 81012ca:	687b      	ldr	r3, [r7, #4]
 81012cc:	681b      	ldr	r3, [r3, #0]
 81012ce:	4a41      	ldr	r2, [pc, #260]	; (81013d4 <HAL_DMA_Init+0x6a4>)
 81012d0:	4293      	cmp	r3, r2
 81012d2:	d00e      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 81012d4:	687b      	ldr	r3, [r7, #4]
 81012d6:	681b      	ldr	r3, [r3, #0]
 81012d8:	4a3f      	ldr	r2, [pc, #252]	; (81013d8 <HAL_DMA_Init+0x6a8>)
 81012da:	4293      	cmp	r3, r2
 81012dc:	d009      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 81012de:	687b      	ldr	r3, [r7, #4]
 81012e0:	681b      	ldr	r3, [r3, #0]
 81012e2:	4a3e      	ldr	r2, [pc, #248]	; (81013dc <HAL_DMA_Init+0x6ac>)
 81012e4:	4293      	cmp	r3, r2
 81012e6:	d004      	beq.n	81012f2 <HAL_DMA_Init+0x5c2>
 81012e8:	687b      	ldr	r3, [r7, #4]
 81012ea:	681b      	ldr	r3, [r3, #0]
 81012ec:	4a3c      	ldr	r2, [pc, #240]	; (81013e0 <HAL_DMA_Init+0x6b0>)
 81012ee:	4293      	cmp	r3, r2
 81012f0:	d101      	bne.n	81012f6 <HAL_DMA_Init+0x5c6>
 81012f2:	2301      	movs	r3, #1
 81012f4:	e000      	b.n	81012f8 <HAL_DMA_Init+0x5c8>
 81012f6:	2300      	movs	r3, #0
 81012f8:	2b00      	cmp	r3, #0
 81012fa:	d032      	beq.n	8101362 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81012fc:	6878      	ldr	r0, [r7, #4]
 81012fe:	f001 ff23 	bl	8103148 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8101302:	687b      	ldr	r3, [r7, #4]
 8101304:	689b      	ldr	r3, [r3, #8]
 8101306:	2b80      	cmp	r3, #128	; 0x80
 8101308:	d102      	bne.n	8101310 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 810130a:	687b      	ldr	r3, [r7, #4]
 810130c:	2200      	movs	r2, #0
 810130e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8101310:	687b      	ldr	r3, [r7, #4]
 8101312:	685a      	ldr	r2, [r3, #4]
 8101314:	687b      	ldr	r3, [r7, #4]
 8101316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101318:	b2d2      	uxtb	r2, r2
 810131a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810131c:	687b      	ldr	r3, [r7, #4]
 810131e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101320:	687a      	ldr	r2, [r7, #4]
 8101322:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8101324:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8101326:	687b      	ldr	r3, [r7, #4]
 8101328:	685b      	ldr	r3, [r3, #4]
 810132a:	2b00      	cmp	r3, #0
 810132c:	d010      	beq.n	8101350 <HAL_DMA_Init+0x620>
 810132e:	687b      	ldr	r3, [r7, #4]
 8101330:	685b      	ldr	r3, [r3, #4]
 8101332:	2b08      	cmp	r3, #8
 8101334:	d80c      	bhi.n	8101350 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8101336:	6878      	ldr	r0, [r7, #4]
 8101338:	f001 ffa0 	bl	810327c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 810133c:	687b      	ldr	r3, [r7, #4]
 810133e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101340:	2200      	movs	r2, #0
 8101342:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8101344:	687b      	ldr	r3, [r7, #4]
 8101346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101348:	687a      	ldr	r2, [r7, #4]
 810134a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810134c:	605a      	str	r2, [r3, #4]
 810134e:	e008      	b.n	8101362 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8101350:	687b      	ldr	r3, [r7, #4]
 8101352:	2200      	movs	r2, #0
 8101354:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8101356:	687b      	ldr	r3, [r7, #4]
 8101358:	2200      	movs	r2, #0
 810135a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 810135c:	687b      	ldr	r3, [r7, #4]
 810135e:	2200      	movs	r2, #0
 8101360:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8101362:	687b      	ldr	r3, [r7, #4]
 8101364:	2200      	movs	r2, #0
 8101366:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8101368:	687b      	ldr	r3, [r7, #4]
 810136a:	2201      	movs	r2, #1
 810136c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8101370:	2300      	movs	r3, #0
}
 8101372:	4618      	mov	r0, r3
 8101374:	3718      	adds	r7, #24
 8101376:	46bd      	mov	sp, r7
 8101378:	bd80      	pop	{r7, pc}
 810137a:	bf00      	nop
 810137c:	a7fdabf8 	.word	0xa7fdabf8
 8101380:	cccccccd 	.word	0xcccccccd
 8101384:	40020010 	.word	0x40020010
 8101388:	40020028 	.word	0x40020028
 810138c:	40020040 	.word	0x40020040
 8101390:	40020058 	.word	0x40020058
 8101394:	40020070 	.word	0x40020070
 8101398:	40020088 	.word	0x40020088
 810139c:	400200a0 	.word	0x400200a0
 81013a0:	400200b8 	.word	0x400200b8
 81013a4:	40020410 	.word	0x40020410
 81013a8:	40020428 	.word	0x40020428
 81013ac:	40020440 	.word	0x40020440
 81013b0:	40020458 	.word	0x40020458
 81013b4:	40020470 	.word	0x40020470
 81013b8:	40020488 	.word	0x40020488
 81013bc:	400204a0 	.word	0x400204a0
 81013c0:	400204b8 	.word	0x400204b8
 81013c4:	58025408 	.word	0x58025408
 81013c8:	5802541c 	.word	0x5802541c
 81013cc:	58025430 	.word	0x58025430
 81013d0:	58025444 	.word	0x58025444
 81013d4:	58025458 	.word	0x58025458
 81013d8:	5802546c 	.word	0x5802546c
 81013dc:	58025480 	.word	0x58025480
 81013e0:	58025494 	.word	0x58025494

081013e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 81013e4:	b580      	push	{r7, lr}
 81013e6:	b086      	sub	sp, #24
 81013e8:	af00      	add	r7, sp, #0
 81013ea:	60f8      	str	r0, [r7, #12]
 81013ec:	60b9      	str	r1, [r7, #8]
 81013ee:	607a      	str	r2, [r7, #4]
 81013f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81013f2:	2300      	movs	r3, #0
 81013f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81013f6:	68fb      	ldr	r3, [r7, #12]
 81013f8:	2b00      	cmp	r3, #0
 81013fa:	d101      	bne.n	8101400 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 81013fc:	2301      	movs	r3, #1
 81013fe:	e226      	b.n	810184e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8101400:	68fb      	ldr	r3, [r7, #12]
 8101402:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8101406:	2b01      	cmp	r3, #1
 8101408:	d101      	bne.n	810140e <HAL_DMA_Start_IT+0x2a>
 810140a:	2302      	movs	r3, #2
 810140c:	e21f      	b.n	810184e <HAL_DMA_Start_IT+0x46a>
 810140e:	68fb      	ldr	r3, [r7, #12]
 8101410:	2201      	movs	r2, #1
 8101412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8101416:	68fb      	ldr	r3, [r7, #12]
 8101418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810141c:	b2db      	uxtb	r3, r3
 810141e:	2b01      	cmp	r3, #1
 8101420:	f040 820a 	bne.w	8101838 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8101424:	68fb      	ldr	r3, [r7, #12]
 8101426:	2202      	movs	r2, #2
 8101428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810142c:	68fb      	ldr	r3, [r7, #12]
 810142e:	2200      	movs	r2, #0
 8101430:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8101432:	68fb      	ldr	r3, [r7, #12]
 8101434:	681b      	ldr	r3, [r3, #0]
 8101436:	4a68      	ldr	r2, [pc, #416]	; (81015d8 <HAL_DMA_Start_IT+0x1f4>)
 8101438:	4293      	cmp	r3, r2
 810143a:	d04a      	beq.n	81014d2 <HAL_DMA_Start_IT+0xee>
 810143c:	68fb      	ldr	r3, [r7, #12]
 810143e:	681b      	ldr	r3, [r3, #0]
 8101440:	4a66      	ldr	r2, [pc, #408]	; (81015dc <HAL_DMA_Start_IT+0x1f8>)
 8101442:	4293      	cmp	r3, r2
 8101444:	d045      	beq.n	81014d2 <HAL_DMA_Start_IT+0xee>
 8101446:	68fb      	ldr	r3, [r7, #12]
 8101448:	681b      	ldr	r3, [r3, #0]
 810144a:	4a65      	ldr	r2, [pc, #404]	; (81015e0 <HAL_DMA_Start_IT+0x1fc>)
 810144c:	4293      	cmp	r3, r2
 810144e:	d040      	beq.n	81014d2 <HAL_DMA_Start_IT+0xee>
 8101450:	68fb      	ldr	r3, [r7, #12]
 8101452:	681b      	ldr	r3, [r3, #0]
 8101454:	4a63      	ldr	r2, [pc, #396]	; (81015e4 <HAL_DMA_Start_IT+0x200>)
 8101456:	4293      	cmp	r3, r2
 8101458:	d03b      	beq.n	81014d2 <HAL_DMA_Start_IT+0xee>
 810145a:	68fb      	ldr	r3, [r7, #12]
 810145c:	681b      	ldr	r3, [r3, #0]
 810145e:	4a62      	ldr	r2, [pc, #392]	; (81015e8 <HAL_DMA_Start_IT+0x204>)
 8101460:	4293      	cmp	r3, r2
 8101462:	d036      	beq.n	81014d2 <HAL_DMA_Start_IT+0xee>
 8101464:	68fb      	ldr	r3, [r7, #12]
 8101466:	681b      	ldr	r3, [r3, #0]
 8101468:	4a60      	ldr	r2, [pc, #384]	; (81015ec <HAL_DMA_Start_IT+0x208>)
 810146a:	4293      	cmp	r3, r2
 810146c:	d031      	beq.n	81014d2 <HAL_DMA_Start_IT+0xee>
 810146e:	68fb      	ldr	r3, [r7, #12]
 8101470:	681b      	ldr	r3, [r3, #0]
 8101472:	4a5f      	ldr	r2, [pc, #380]	; (81015f0 <HAL_DMA_Start_IT+0x20c>)
 8101474:	4293      	cmp	r3, r2
 8101476:	d02c      	beq.n	81014d2 <HAL_DMA_Start_IT+0xee>
 8101478:	68fb      	ldr	r3, [r7, #12]
 810147a:	681b      	ldr	r3, [r3, #0]
 810147c:	4a5d      	ldr	r2, [pc, #372]	; (81015f4 <HAL_DMA_Start_IT+0x210>)
 810147e:	4293      	cmp	r3, r2
 8101480:	d027      	beq.n	81014d2 <HAL_DMA_Start_IT+0xee>
 8101482:	68fb      	ldr	r3, [r7, #12]
 8101484:	681b      	ldr	r3, [r3, #0]
 8101486:	4a5c      	ldr	r2, [pc, #368]	; (81015f8 <HAL_DMA_Start_IT+0x214>)
 8101488:	4293      	cmp	r3, r2
 810148a:	d022      	beq.n	81014d2 <HAL_DMA_Start_IT+0xee>
 810148c:	68fb      	ldr	r3, [r7, #12]
 810148e:	681b      	ldr	r3, [r3, #0]
 8101490:	4a5a      	ldr	r2, [pc, #360]	; (81015fc <HAL_DMA_Start_IT+0x218>)
 8101492:	4293      	cmp	r3, r2
 8101494:	d01d      	beq.n	81014d2 <HAL_DMA_Start_IT+0xee>
 8101496:	68fb      	ldr	r3, [r7, #12]
 8101498:	681b      	ldr	r3, [r3, #0]
 810149a:	4a59      	ldr	r2, [pc, #356]	; (8101600 <HAL_DMA_Start_IT+0x21c>)
 810149c:	4293      	cmp	r3, r2
 810149e:	d018      	beq.n	81014d2 <HAL_DMA_Start_IT+0xee>
 81014a0:	68fb      	ldr	r3, [r7, #12]
 81014a2:	681b      	ldr	r3, [r3, #0]
 81014a4:	4a57      	ldr	r2, [pc, #348]	; (8101604 <HAL_DMA_Start_IT+0x220>)
 81014a6:	4293      	cmp	r3, r2
 81014a8:	d013      	beq.n	81014d2 <HAL_DMA_Start_IT+0xee>
 81014aa:	68fb      	ldr	r3, [r7, #12]
 81014ac:	681b      	ldr	r3, [r3, #0]
 81014ae:	4a56      	ldr	r2, [pc, #344]	; (8101608 <HAL_DMA_Start_IT+0x224>)
 81014b0:	4293      	cmp	r3, r2
 81014b2:	d00e      	beq.n	81014d2 <HAL_DMA_Start_IT+0xee>
 81014b4:	68fb      	ldr	r3, [r7, #12]
 81014b6:	681b      	ldr	r3, [r3, #0]
 81014b8:	4a54      	ldr	r2, [pc, #336]	; (810160c <HAL_DMA_Start_IT+0x228>)
 81014ba:	4293      	cmp	r3, r2
 81014bc:	d009      	beq.n	81014d2 <HAL_DMA_Start_IT+0xee>
 81014be:	68fb      	ldr	r3, [r7, #12]
 81014c0:	681b      	ldr	r3, [r3, #0]
 81014c2:	4a53      	ldr	r2, [pc, #332]	; (8101610 <HAL_DMA_Start_IT+0x22c>)
 81014c4:	4293      	cmp	r3, r2
 81014c6:	d004      	beq.n	81014d2 <HAL_DMA_Start_IT+0xee>
 81014c8:	68fb      	ldr	r3, [r7, #12]
 81014ca:	681b      	ldr	r3, [r3, #0]
 81014cc:	4a51      	ldr	r2, [pc, #324]	; (8101614 <HAL_DMA_Start_IT+0x230>)
 81014ce:	4293      	cmp	r3, r2
 81014d0:	d108      	bne.n	81014e4 <HAL_DMA_Start_IT+0x100>
 81014d2:	68fb      	ldr	r3, [r7, #12]
 81014d4:	681b      	ldr	r3, [r3, #0]
 81014d6:	681a      	ldr	r2, [r3, #0]
 81014d8:	68fb      	ldr	r3, [r7, #12]
 81014da:	681b      	ldr	r3, [r3, #0]
 81014dc:	f022 0201 	bic.w	r2, r2, #1
 81014e0:	601a      	str	r2, [r3, #0]
 81014e2:	e007      	b.n	81014f4 <HAL_DMA_Start_IT+0x110>
 81014e4:	68fb      	ldr	r3, [r7, #12]
 81014e6:	681b      	ldr	r3, [r3, #0]
 81014e8:	681a      	ldr	r2, [r3, #0]
 81014ea:	68fb      	ldr	r3, [r7, #12]
 81014ec:	681b      	ldr	r3, [r3, #0]
 81014ee:	f022 0201 	bic.w	r2, r2, #1
 81014f2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81014f4:	683b      	ldr	r3, [r7, #0]
 81014f6:	687a      	ldr	r2, [r7, #4]
 81014f8:	68b9      	ldr	r1, [r7, #8]
 81014fa:	68f8      	ldr	r0, [r7, #12]
 81014fc:	f001 fb4a 	bl	8102b94 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101500:	68fb      	ldr	r3, [r7, #12]
 8101502:	681b      	ldr	r3, [r3, #0]
 8101504:	4a34      	ldr	r2, [pc, #208]	; (81015d8 <HAL_DMA_Start_IT+0x1f4>)
 8101506:	4293      	cmp	r3, r2
 8101508:	d04a      	beq.n	81015a0 <HAL_DMA_Start_IT+0x1bc>
 810150a:	68fb      	ldr	r3, [r7, #12]
 810150c:	681b      	ldr	r3, [r3, #0]
 810150e:	4a33      	ldr	r2, [pc, #204]	; (81015dc <HAL_DMA_Start_IT+0x1f8>)
 8101510:	4293      	cmp	r3, r2
 8101512:	d045      	beq.n	81015a0 <HAL_DMA_Start_IT+0x1bc>
 8101514:	68fb      	ldr	r3, [r7, #12]
 8101516:	681b      	ldr	r3, [r3, #0]
 8101518:	4a31      	ldr	r2, [pc, #196]	; (81015e0 <HAL_DMA_Start_IT+0x1fc>)
 810151a:	4293      	cmp	r3, r2
 810151c:	d040      	beq.n	81015a0 <HAL_DMA_Start_IT+0x1bc>
 810151e:	68fb      	ldr	r3, [r7, #12]
 8101520:	681b      	ldr	r3, [r3, #0]
 8101522:	4a30      	ldr	r2, [pc, #192]	; (81015e4 <HAL_DMA_Start_IT+0x200>)
 8101524:	4293      	cmp	r3, r2
 8101526:	d03b      	beq.n	81015a0 <HAL_DMA_Start_IT+0x1bc>
 8101528:	68fb      	ldr	r3, [r7, #12]
 810152a:	681b      	ldr	r3, [r3, #0]
 810152c:	4a2e      	ldr	r2, [pc, #184]	; (81015e8 <HAL_DMA_Start_IT+0x204>)
 810152e:	4293      	cmp	r3, r2
 8101530:	d036      	beq.n	81015a0 <HAL_DMA_Start_IT+0x1bc>
 8101532:	68fb      	ldr	r3, [r7, #12]
 8101534:	681b      	ldr	r3, [r3, #0]
 8101536:	4a2d      	ldr	r2, [pc, #180]	; (81015ec <HAL_DMA_Start_IT+0x208>)
 8101538:	4293      	cmp	r3, r2
 810153a:	d031      	beq.n	81015a0 <HAL_DMA_Start_IT+0x1bc>
 810153c:	68fb      	ldr	r3, [r7, #12]
 810153e:	681b      	ldr	r3, [r3, #0]
 8101540:	4a2b      	ldr	r2, [pc, #172]	; (81015f0 <HAL_DMA_Start_IT+0x20c>)
 8101542:	4293      	cmp	r3, r2
 8101544:	d02c      	beq.n	81015a0 <HAL_DMA_Start_IT+0x1bc>
 8101546:	68fb      	ldr	r3, [r7, #12]
 8101548:	681b      	ldr	r3, [r3, #0]
 810154a:	4a2a      	ldr	r2, [pc, #168]	; (81015f4 <HAL_DMA_Start_IT+0x210>)
 810154c:	4293      	cmp	r3, r2
 810154e:	d027      	beq.n	81015a0 <HAL_DMA_Start_IT+0x1bc>
 8101550:	68fb      	ldr	r3, [r7, #12]
 8101552:	681b      	ldr	r3, [r3, #0]
 8101554:	4a28      	ldr	r2, [pc, #160]	; (81015f8 <HAL_DMA_Start_IT+0x214>)
 8101556:	4293      	cmp	r3, r2
 8101558:	d022      	beq.n	81015a0 <HAL_DMA_Start_IT+0x1bc>
 810155a:	68fb      	ldr	r3, [r7, #12]
 810155c:	681b      	ldr	r3, [r3, #0]
 810155e:	4a27      	ldr	r2, [pc, #156]	; (81015fc <HAL_DMA_Start_IT+0x218>)
 8101560:	4293      	cmp	r3, r2
 8101562:	d01d      	beq.n	81015a0 <HAL_DMA_Start_IT+0x1bc>
 8101564:	68fb      	ldr	r3, [r7, #12]
 8101566:	681b      	ldr	r3, [r3, #0]
 8101568:	4a25      	ldr	r2, [pc, #148]	; (8101600 <HAL_DMA_Start_IT+0x21c>)
 810156a:	4293      	cmp	r3, r2
 810156c:	d018      	beq.n	81015a0 <HAL_DMA_Start_IT+0x1bc>
 810156e:	68fb      	ldr	r3, [r7, #12]
 8101570:	681b      	ldr	r3, [r3, #0]
 8101572:	4a24      	ldr	r2, [pc, #144]	; (8101604 <HAL_DMA_Start_IT+0x220>)
 8101574:	4293      	cmp	r3, r2
 8101576:	d013      	beq.n	81015a0 <HAL_DMA_Start_IT+0x1bc>
 8101578:	68fb      	ldr	r3, [r7, #12]
 810157a:	681b      	ldr	r3, [r3, #0]
 810157c:	4a22      	ldr	r2, [pc, #136]	; (8101608 <HAL_DMA_Start_IT+0x224>)
 810157e:	4293      	cmp	r3, r2
 8101580:	d00e      	beq.n	81015a0 <HAL_DMA_Start_IT+0x1bc>
 8101582:	68fb      	ldr	r3, [r7, #12]
 8101584:	681b      	ldr	r3, [r3, #0]
 8101586:	4a21      	ldr	r2, [pc, #132]	; (810160c <HAL_DMA_Start_IT+0x228>)
 8101588:	4293      	cmp	r3, r2
 810158a:	d009      	beq.n	81015a0 <HAL_DMA_Start_IT+0x1bc>
 810158c:	68fb      	ldr	r3, [r7, #12]
 810158e:	681b      	ldr	r3, [r3, #0]
 8101590:	4a1f      	ldr	r2, [pc, #124]	; (8101610 <HAL_DMA_Start_IT+0x22c>)
 8101592:	4293      	cmp	r3, r2
 8101594:	d004      	beq.n	81015a0 <HAL_DMA_Start_IT+0x1bc>
 8101596:	68fb      	ldr	r3, [r7, #12]
 8101598:	681b      	ldr	r3, [r3, #0]
 810159a:	4a1e      	ldr	r2, [pc, #120]	; (8101614 <HAL_DMA_Start_IT+0x230>)
 810159c:	4293      	cmp	r3, r2
 810159e:	d101      	bne.n	81015a4 <HAL_DMA_Start_IT+0x1c0>
 81015a0:	2301      	movs	r3, #1
 81015a2:	e000      	b.n	81015a6 <HAL_DMA_Start_IT+0x1c2>
 81015a4:	2300      	movs	r3, #0
 81015a6:	2b00      	cmp	r3, #0
 81015a8:	d036      	beq.n	8101618 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81015aa:	68fb      	ldr	r3, [r7, #12]
 81015ac:	681b      	ldr	r3, [r3, #0]
 81015ae:	681b      	ldr	r3, [r3, #0]
 81015b0:	f023 021e 	bic.w	r2, r3, #30
 81015b4:	68fb      	ldr	r3, [r7, #12]
 81015b6:	681b      	ldr	r3, [r3, #0]
 81015b8:	f042 0216 	orr.w	r2, r2, #22
 81015bc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 81015be:	68fb      	ldr	r3, [r7, #12]
 81015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81015c2:	2b00      	cmp	r3, #0
 81015c4:	d03e      	beq.n	8101644 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 81015c6:	68fb      	ldr	r3, [r7, #12]
 81015c8:	681b      	ldr	r3, [r3, #0]
 81015ca:	681a      	ldr	r2, [r3, #0]
 81015cc:	68fb      	ldr	r3, [r7, #12]
 81015ce:	681b      	ldr	r3, [r3, #0]
 81015d0:	f042 0208 	orr.w	r2, r2, #8
 81015d4:	601a      	str	r2, [r3, #0]
 81015d6:	e035      	b.n	8101644 <HAL_DMA_Start_IT+0x260>
 81015d8:	40020010 	.word	0x40020010
 81015dc:	40020028 	.word	0x40020028
 81015e0:	40020040 	.word	0x40020040
 81015e4:	40020058 	.word	0x40020058
 81015e8:	40020070 	.word	0x40020070
 81015ec:	40020088 	.word	0x40020088
 81015f0:	400200a0 	.word	0x400200a0
 81015f4:	400200b8 	.word	0x400200b8
 81015f8:	40020410 	.word	0x40020410
 81015fc:	40020428 	.word	0x40020428
 8101600:	40020440 	.word	0x40020440
 8101604:	40020458 	.word	0x40020458
 8101608:	40020470 	.word	0x40020470
 810160c:	40020488 	.word	0x40020488
 8101610:	400204a0 	.word	0x400204a0
 8101614:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8101618:	68fb      	ldr	r3, [r7, #12]
 810161a:	681b      	ldr	r3, [r3, #0]
 810161c:	681b      	ldr	r3, [r3, #0]
 810161e:	f023 020e 	bic.w	r2, r3, #14
 8101622:	68fb      	ldr	r3, [r7, #12]
 8101624:	681b      	ldr	r3, [r3, #0]
 8101626:	f042 020a 	orr.w	r2, r2, #10
 810162a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 810162c:	68fb      	ldr	r3, [r7, #12]
 810162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101630:	2b00      	cmp	r3, #0
 8101632:	d007      	beq.n	8101644 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8101634:	68fb      	ldr	r3, [r7, #12]
 8101636:	681b      	ldr	r3, [r3, #0]
 8101638:	681a      	ldr	r2, [r3, #0]
 810163a:	68fb      	ldr	r3, [r7, #12]
 810163c:	681b      	ldr	r3, [r3, #0]
 810163e:	f042 0204 	orr.w	r2, r2, #4
 8101642:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101644:	68fb      	ldr	r3, [r7, #12]
 8101646:	681b      	ldr	r3, [r3, #0]
 8101648:	4a83      	ldr	r2, [pc, #524]	; (8101858 <HAL_DMA_Start_IT+0x474>)
 810164a:	4293      	cmp	r3, r2
 810164c:	d072      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 810164e:	68fb      	ldr	r3, [r7, #12]
 8101650:	681b      	ldr	r3, [r3, #0]
 8101652:	4a82      	ldr	r2, [pc, #520]	; (810185c <HAL_DMA_Start_IT+0x478>)
 8101654:	4293      	cmp	r3, r2
 8101656:	d06d      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 8101658:	68fb      	ldr	r3, [r7, #12]
 810165a:	681b      	ldr	r3, [r3, #0]
 810165c:	4a80      	ldr	r2, [pc, #512]	; (8101860 <HAL_DMA_Start_IT+0x47c>)
 810165e:	4293      	cmp	r3, r2
 8101660:	d068      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 8101662:	68fb      	ldr	r3, [r7, #12]
 8101664:	681b      	ldr	r3, [r3, #0]
 8101666:	4a7f      	ldr	r2, [pc, #508]	; (8101864 <HAL_DMA_Start_IT+0x480>)
 8101668:	4293      	cmp	r3, r2
 810166a:	d063      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 810166c:	68fb      	ldr	r3, [r7, #12]
 810166e:	681b      	ldr	r3, [r3, #0]
 8101670:	4a7d      	ldr	r2, [pc, #500]	; (8101868 <HAL_DMA_Start_IT+0x484>)
 8101672:	4293      	cmp	r3, r2
 8101674:	d05e      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 8101676:	68fb      	ldr	r3, [r7, #12]
 8101678:	681b      	ldr	r3, [r3, #0]
 810167a:	4a7c      	ldr	r2, [pc, #496]	; (810186c <HAL_DMA_Start_IT+0x488>)
 810167c:	4293      	cmp	r3, r2
 810167e:	d059      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 8101680:	68fb      	ldr	r3, [r7, #12]
 8101682:	681b      	ldr	r3, [r3, #0]
 8101684:	4a7a      	ldr	r2, [pc, #488]	; (8101870 <HAL_DMA_Start_IT+0x48c>)
 8101686:	4293      	cmp	r3, r2
 8101688:	d054      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 810168a:	68fb      	ldr	r3, [r7, #12]
 810168c:	681b      	ldr	r3, [r3, #0]
 810168e:	4a79      	ldr	r2, [pc, #484]	; (8101874 <HAL_DMA_Start_IT+0x490>)
 8101690:	4293      	cmp	r3, r2
 8101692:	d04f      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 8101694:	68fb      	ldr	r3, [r7, #12]
 8101696:	681b      	ldr	r3, [r3, #0]
 8101698:	4a77      	ldr	r2, [pc, #476]	; (8101878 <HAL_DMA_Start_IT+0x494>)
 810169a:	4293      	cmp	r3, r2
 810169c:	d04a      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 810169e:	68fb      	ldr	r3, [r7, #12]
 81016a0:	681b      	ldr	r3, [r3, #0]
 81016a2:	4a76      	ldr	r2, [pc, #472]	; (810187c <HAL_DMA_Start_IT+0x498>)
 81016a4:	4293      	cmp	r3, r2
 81016a6:	d045      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 81016a8:	68fb      	ldr	r3, [r7, #12]
 81016aa:	681b      	ldr	r3, [r3, #0]
 81016ac:	4a74      	ldr	r2, [pc, #464]	; (8101880 <HAL_DMA_Start_IT+0x49c>)
 81016ae:	4293      	cmp	r3, r2
 81016b0:	d040      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 81016b2:	68fb      	ldr	r3, [r7, #12]
 81016b4:	681b      	ldr	r3, [r3, #0]
 81016b6:	4a73      	ldr	r2, [pc, #460]	; (8101884 <HAL_DMA_Start_IT+0x4a0>)
 81016b8:	4293      	cmp	r3, r2
 81016ba:	d03b      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 81016bc:	68fb      	ldr	r3, [r7, #12]
 81016be:	681b      	ldr	r3, [r3, #0]
 81016c0:	4a71      	ldr	r2, [pc, #452]	; (8101888 <HAL_DMA_Start_IT+0x4a4>)
 81016c2:	4293      	cmp	r3, r2
 81016c4:	d036      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 81016c6:	68fb      	ldr	r3, [r7, #12]
 81016c8:	681b      	ldr	r3, [r3, #0]
 81016ca:	4a70      	ldr	r2, [pc, #448]	; (810188c <HAL_DMA_Start_IT+0x4a8>)
 81016cc:	4293      	cmp	r3, r2
 81016ce:	d031      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 81016d0:	68fb      	ldr	r3, [r7, #12]
 81016d2:	681b      	ldr	r3, [r3, #0]
 81016d4:	4a6e      	ldr	r2, [pc, #440]	; (8101890 <HAL_DMA_Start_IT+0x4ac>)
 81016d6:	4293      	cmp	r3, r2
 81016d8:	d02c      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 81016da:	68fb      	ldr	r3, [r7, #12]
 81016dc:	681b      	ldr	r3, [r3, #0]
 81016de:	4a6d      	ldr	r2, [pc, #436]	; (8101894 <HAL_DMA_Start_IT+0x4b0>)
 81016e0:	4293      	cmp	r3, r2
 81016e2:	d027      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 81016e4:	68fb      	ldr	r3, [r7, #12]
 81016e6:	681b      	ldr	r3, [r3, #0]
 81016e8:	4a6b      	ldr	r2, [pc, #428]	; (8101898 <HAL_DMA_Start_IT+0x4b4>)
 81016ea:	4293      	cmp	r3, r2
 81016ec:	d022      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 81016ee:	68fb      	ldr	r3, [r7, #12]
 81016f0:	681b      	ldr	r3, [r3, #0]
 81016f2:	4a6a      	ldr	r2, [pc, #424]	; (810189c <HAL_DMA_Start_IT+0x4b8>)
 81016f4:	4293      	cmp	r3, r2
 81016f6:	d01d      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 81016f8:	68fb      	ldr	r3, [r7, #12]
 81016fa:	681b      	ldr	r3, [r3, #0]
 81016fc:	4a68      	ldr	r2, [pc, #416]	; (81018a0 <HAL_DMA_Start_IT+0x4bc>)
 81016fe:	4293      	cmp	r3, r2
 8101700:	d018      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 8101702:	68fb      	ldr	r3, [r7, #12]
 8101704:	681b      	ldr	r3, [r3, #0]
 8101706:	4a67      	ldr	r2, [pc, #412]	; (81018a4 <HAL_DMA_Start_IT+0x4c0>)
 8101708:	4293      	cmp	r3, r2
 810170a:	d013      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 810170c:	68fb      	ldr	r3, [r7, #12]
 810170e:	681b      	ldr	r3, [r3, #0]
 8101710:	4a65      	ldr	r2, [pc, #404]	; (81018a8 <HAL_DMA_Start_IT+0x4c4>)
 8101712:	4293      	cmp	r3, r2
 8101714:	d00e      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 8101716:	68fb      	ldr	r3, [r7, #12]
 8101718:	681b      	ldr	r3, [r3, #0]
 810171a:	4a64      	ldr	r2, [pc, #400]	; (81018ac <HAL_DMA_Start_IT+0x4c8>)
 810171c:	4293      	cmp	r3, r2
 810171e:	d009      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 8101720:	68fb      	ldr	r3, [r7, #12]
 8101722:	681b      	ldr	r3, [r3, #0]
 8101724:	4a62      	ldr	r2, [pc, #392]	; (81018b0 <HAL_DMA_Start_IT+0x4cc>)
 8101726:	4293      	cmp	r3, r2
 8101728:	d004      	beq.n	8101734 <HAL_DMA_Start_IT+0x350>
 810172a:	68fb      	ldr	r3, [r7, #12]
 810172c:	681b      	ldr	r3, [r3, #0]
 810172e:	4a61      	ldr	r2, [pc, #388]	; (81018b4 <HAL_DMA_Start_IT+0x4d0>)
 8101730:	4293      	cmp	r3, r2
 8101732:	d101      	bne.n	8101738 <HAL_DMA_Start_IT+0x354>
 8101734:	2301      	movs	r3, #1
 8101736:	e000      	b.n	810173a <HAL_DMA_Start_IT+0x356>
 8101738:	2300      	movs	r3, #0
 810173a:	2b00      	cmp	r3, #0
 810173c:	d01a      	beq.n	8101774 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 810173e:	68fb      	ldr	r3, [r7, #12]
 8101740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101742:	681b      	ldr	r3, [r3, #0]
 8101744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101748:	2b00      	cmp	r3, #0
 810174a:	d007      	beq.n	810175c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 810174c:	68fb      	ldr	r3, [r7, #12]
 810174e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101750:	681a      	ldr	r2, [r3, #0]
 8101752:	68fb      	ldr	r3, [r7, #12]
 8101754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810175a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 810175c:	68fb      	ldr	r3, [r7, #12]
 810175e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101760:	2b00      	cmp	r3, #0
 8101762:	d007      	beq.n	8101774 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8101764:	68fb      	ldr	r3, [r7, #12]
 8101766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101768:	681a      	ldr	r2, [r3, #0]
 810176a:	68fb      	ldr	r3, [r7, #12]
 810176c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810176e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8101772:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8101774:	68fb      	ldr	r3, [r7, #12]
 8101776:	681b      	ldr	r3, [r3, #0]
 8101778:	4a37      	ldr	r2, [pc, #220]	; (8101858 <HAL_DMA_Start_IT+0x474>)
 810177a:	4293      	cmp	r3, r2
 810177c:	d04a      	beq.n	8101814 <HAL_DMA_Start_IT+0x430>
 810177e:	68fb      	ldr	r3, [r7, #12]
 8101780:	681b      	ldr	r3, [r3, #0]
 8101782:	4a36      	ldr	r2, [pc, #216]	; (810185c <HAL_DMA_Start_IT+0x478>)
 8101784:	4293      	cmp	r3, r2
 8101786:	d045      	beq.n	8101814 <HAL_DMA_Start_IT+0x430>
 8101788:	68fb      	ldr	r3, [r7, #12]
 810178a:	681b      	ldr	r3, [r3, #0]
 810178c:	4a34      	ldr	r2, [pc, #208]	; (8101860 <HAL_DMA_Start_IT+0x47c>)
 810178e:	4293      	cmp	r3, r2
 8101790:	d040      	beq.n	8101814 <HAL_DMA_Start_IT+0x430>
 8101792:	68fb      	ldr	r3, [r7, #12]
 8101794:	681b      	ldr	r3, [r3, #0]
 8101796:	4a33      	ldr	r2, [pc, #204]	; (8101864 <HAL_DMA_Start_IT+0x480>)
 8101798:	4293      	cmp	r3, r2
 810179a:	d03b      	beq.n	8101814 <HAL_DMA_Start_IT+0x430>
 810179c:	68fb      	ldr	r3, [r7, #12]
 810179e:	681b      	ldr	r3, [r3, #0]
 81017a0:	4a31      	ldr	r2, [pc, #196]	; (8101868 <HAL_DMA_Start_IT+0x484>)
 81017a2:	4293      	cmp	r3, r2
 81017a4:	d036      	beq.n	8101814 <HAL_DMA_Start_IT+0x430>
 81017a6:	68fb      	ldr	r3, [r7, #12]
 81017a8:	681b      	ldr	r3, [r3, #0]
 81017aa:	4a30      	ldr	r2, [pc, #192]	; (810186c <HAL_DMA_Start_IT+0x488>)
 81017ac:	4293      	cmp	r3, r2
 81017ae:	d031      	beq.n	8101814 <HAL_DMA_Start_IT+0x430>
 81017b0:	68fb      	ldr	r3, [r7, #12]
 81017b2:	681b      	ldr	r3, [r3, #0]
 81017b4:	4a2e      	ldr	r2, [pc, #184]	; (8101870 <HAL_DMA_Start_IT+0x48c>)
 81017b6:	4293      	cmp	r3, r2
 81017b8:	d02c      	beq.n	8101814 <HAL_DMA_Start_IT+0x430>
 81017ba:	68fb      	ldr	r3, [r7, #12]
 81017bc:	681b      	ldr	r3, [r3, #0]
 81017be:	4a2d      	ldr	r2, [pc, #180]	; (8101874 <HAL_DMA_Start_IT+0x490>)
 81017c0:	4293      	cmp	r3, r2
 81017c2:	d027      	beq.n	8101814 <HAL_DMA_Start_IT+0x430>
 81017c4:	68fb      	ldr	r3, [r7, #12]
 81017c6:	681b      	ldr	r3, [r3, #0]
 81017c8:	4a2b      	ldr	r2, [pc, #172]	; (8101878 <HAL_DMA_Start_IT+0x494>)
 81017ca:	4293      	cmp	r3, r2
 81017cc:	d022      	beq.n	8101814 <HAL_DMA_Start_IT+0x430>
 81017ce:	68fb      	ldr	r3, [r7, #12]
 81017d0:	681b      	ldr	r3, [r3, #0]
 81017d2:	4a2a      	ldr	r2, [pc, #168]	; (810187c <HAL_DMA_Start_IT+0x498>)
 81017d4:	4293      	cmp	r3, r2
 81017d6:	d01d      	beq.n	8101814 <HAL_DMA_Start_IT+0x430>
 81017d8:	68fb      	ldr	r3, [r7, #12]
 81017da:	681b      	ldr	r3, [r3, #0]
 81017dc:	4a28      	ldr	r2, [pc, #160]	; (8101880 <HAL_DMA_Start_IT+0x49c>)
 81017de:	4293      	cmp	r3, r2
 81017e0:	d018      	beq.n	8101814 <HAL_DMA_Start_IT+0x430>
 81017e2:	68fb      	ldr	r3, [r7, #12]
 81017e4:	681b      	ldr	r3, [r3, #0]
 81017e6:	4a27      	ldr	r2, [pc, #156]	; (8101884 <HAL_DMA_Start_IT+0x4a0>)
 81017e8:	4293      	cmp	r3, r2
 81017ea:	d013      	beq.n	8101814 <HAL_DMA_Start_IT+0x430>
 81017ec:	68fb      	ldr	r3, [r7, #12]
 81017ee:	681b      	ldr	r3, [r3, #0]
 81017f0:	4a25      	ldr	r2, [pc, #148]	; (8101888 <HAL_DMA_Start_IT+0x4a4>)
 81017f2:	4293      	cmp	r3, r2
 81017f4:	d00e      	beq.n	8101814 <HAL_DMA_Start_IT+0x430>
 81017f6:	68fb      	ldr	r3, [r7, #12]
 81017f8:	681b      	ldr	r3, [r3, #0]
 81017fa:	4a24      	ldr	r2, [pc, #144]	; (810188c <HAL_DMA_Start_IT+0x4a8>)
 81017fc:	4293      	cmp	r3, r2
 81017fe:	d009      	beq.n	8101814 <HAL_DMA_Start_IT+0x430>
 8101800:	68fb      	ldr	r3, [r7, #12]
 8101802:	681b      	ldr	r3, [r3, #0]
 8101804:	4a22      	ldr	r2, [pc, #136]	; (8101890 <HAL_DMA_Start_IT+0x4ac>)
 8101806:	4293      	cmp	r3, r2
 8101808:	d004      	beq.n	8101814 <HAL_DMA_Start_IT+0x430>
 810180a:	68fb      	ldr	r3, [r7, #12]
 810180c:	681b      	ldr	r3, [r3, #0]
 810180e:	4a21      	ldr	r2, [pc, #132]	; (8101894 <HAL_DMA_Start_IT+0x4b0>)
 8101810:	4293      	cmp	r3, r2
 8101812:	d108      	bne.n	8101826 <HAL_DMA_Start_IT+0x442>
 8101814:	68fb      	ldr	r3, [r7, #12]
 8101816:	681b      	ldr	r3, [r3, #0]
 8101818:	681a      	ldr	r2, [r3, #0]
 810181a:	68fb      	ldr	r3, [r7, #12]
 810181c:	681b      	ldr	r3, [r3, #0]
 810181e:	f042 0201 	orr.w	r2, r2, #1
 8101822:	601a      	str	r2, [r3, #0]
 8101824:	e012      	b.n	810184c <HAL_DMA_Start_IT+0x468>
 8101826:	68fb      	ldr	r3, [r7, #12]
 8101828:	681b      	ldr	r3, [r3, #0]
 810182a:	681a      	ldr	r2, [r3, #0]
 810182c:	68fb      	ldr	r3, [r7, #12]
 810182e:	681b      	ldr	r3, [r3, #0]
 8101830:	f042 0201 	orr.w	r2, r2, #1
 8101834:	601a      	str	r2, [r3, #0]
 8101836:	e009      	b.n	810184c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8101838:	68fb      	ldr	r3, [r7, #12]
 810183a:	2200      	movs	r2, #0
 810183c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8101840:	68fb      	ldr	r3, [r7, #12]
 8101842:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101846:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8101848:	2301      	movs	r3, #1
 810184a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 810184c:	7dfb      	ldrb	r3, [r7, #23]
}
 810184e:	4618      	mov	r0, r3
 8101850:	3718      	adds	r7, #24
 8101852:	46bd      	mov	sp, r7
 8101854:	bd80      	pop	{r7, pc}
 8101856:	bf00      	nop
 8101858:	40020010 	.word	0x40020010
 810185c:	40020028 	.word	0x40020028
 8101860:	40020040 	.word	0x40020040
 8101864:	40020058 	.word	0x40020058
 8101868:	40020070 	.word	0x40020070
 810186c:	40020088 	.word	0x40020088
 8101870:	400200a0 	.word	0x400200a0
 8101874:	400200b8 	.word	0x400200b8
 8101878:	40020410 	.word	0x40020410
 810187c:	40020428 	.word	0x40020428
 8101880:	40020440 	.word	0x40020440
 8101884:	40020458 	.word	0x40020458
 8101888:	40020470 	.word	0x40020470
 810188c:	40020488 	.word	0x40020488
 8101890:	400204a0 	.word	0x400204a0
 8101894:	400204b8 	.word	0x400204b8
 8101898:	58025408 	.word	0x58025408
 810189c:	5802541c 	.word	0x5802541c
 81018a0:	58025430 	.word	0x58025430
 81018a4:	58025444 	.word	0x58025444
 81018a8:	58025458 	.word	0x58025458
 81018ac:	5802546c 	.word	0x5802546c
 81018b0:	58025480 	.word	0x58025480
 81018b4:	58025494 	.word	0x58025494

081018b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81018b8:	b580      	push	{r7, lr}
 81018ba:	b084      	sub	sp, #16
 81018bc:	af00      	add	r7, sp, #0
 81018be:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81018c0:	687b      	ldr	r3, [r7, #4]
 81018c2:	2b00      	cmp	r3, #0
 81018c4:	d101      	bne.n	81018ca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81018c6:	2301      	movs	r3, #1
 81018c8:	e205      	b.n	8101cd6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81018ca:	687b      	ldr	r3, [r7, #4]
 81018cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81018d0:	b2db      	uxtb	r3, r3
 81018d2:	2b02      	cmp	r3, #2
 81018d4:	d004      	beq.n	81018e0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81018d6:	687b      	ldr	r3, [r7, #4]
 81018d8:	2280      	movs	r2, #128	; 0x80
 81018da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 81018dc:	2301      	movs	r3, #1
 81018de:	e1fa      	b.n	8101cd6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81018e0:	687b      	ldr	r3, [r7, #4]
 81018e2:	681b      	ldr	r3, [r3, #0]
 81018e4:	4a8c      	ldr	r2, [pc, #560]	; (8101b18 <HAL_DMA_Abort_IT+0x260>)
 81018e6:	4293      	cmp	r3, r2
 81018e8:	d04a      	beq.n	8101980 <HAL_DMA_Abort_IT+0xc8>
 81018ea:	687b      	ldr	r3, [r7, #4]
 81018ec:	681b      	ldr	r3, [r3, #0]
 81018ee:	4a8b      	ldr	r2, [pc, #556]	; (8101b1c <HAL_DMA_Abort_IT+0x264>)
 81018f0:	4293      	cmp	r3, r2
 81018f2:	d045      	beq.n	8101980 <HAL_DMA_Abort_IT+0xc8>
 81018f4:	687b      	ldr	r3, [r7, #4]
 81018f6:	681b      	ldr	r3, [r3, #0]
 81018f8:	4a89      	ldr	r2, [pc, #548]	; (8101b20 <HAL_DMA_Abort_IT+0x268>)
 81018fa:	4293      	cmp	r3, r2
 81018fc:	d040      	beq.n	8101980 <HAL_DMA_Abort_IT+0xc8>
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	681b      	ldr	r3, [r3, #0]
 8101902:	4a88      	ldr	r2, [pc, #544]	; (8101b24 <HAL_DMA_Abort_IT+0x26c>)
 8101904:	4293      	cmp	r3, r2
 8101906:	d03b      	beq.n	8101980 <HAL_DMA_Abort_IT+0xc8>
 8101908:	687b      	ldr	r3, [r7, #4]
 810190a:	681b      	ldr	r3, [r3, #0]
 810190c:	4a86      	ldr	r2, [pc, #536]	; (8101b28 <HAL_DMA_Abort_IT+0x270>)
 810190e:	4293      	cmp	r3, r2
 8101910:	d036      	beq.n	8101980 <HAL_DMA_Abort_IT+0xc8>
 8101912:	687b      	ldr	r3, [r7, #4]
 8101914:	681b      	ldr	r3, [r3, #0]
 8101916:	4a85      	ldr	r2, [pc, #532]	; (8101b2c <HAL_DMA_Abort_IT+0x274>)
 8101918:	4293      	cmp	r3, r2
 810191a:	d031      	beq.n	8101980 <HAL_DMA_Abort_IT+0xc8>
 810191c:	687b      	ldr	r3, [r7, #4]
 810191e:	681b      	ldr	r3, [r3, #0]
 8101920:	4a83      	ldr	r2, [pc, #524]	; (8101b30 <HAL_DMA_Abort_IT+0x278>)
 8101922:	4293      	cmp	r3, r2
 8101924:	d02c      	beq.n	8101980 <HAL_DMA_Abort_IT+0xc8>
 8101926:	687b      	ldr	r3, [r7, #4]
 8101928:	681b      	ldr	r3, [r3, #0]
 810192a:	4a82      	ldr	r2, [pc, #520]	; (8101b34 <HAL_DMA_Abort_IT+0x27c>)
 810192c:	4293      	cmp	r3, r2
 810192e:	d027      	beq.n	8101980 <HAL_DMA_Abort_IT+0xc8>
 8101930:	687b      	ldr	r3, [r7, #4]
 8101932:	681b      	ldr	r3, [r3, #0]
 8101934:	4a80      	ldr	r2, [pc, #512]	; (8101b38 <HAL_DMA_Abort_IT+0x280>)
 8101936:	4293      	cmp	r3, r2
 8101938:	d022      	beq.n	8101980 <HAL_DMA_Abort_IT+0xc8>
 810193a:	687b      	ldr	r3, [r7, #4]
 810193c:	681b      	ldr	r3, [r3, #0]
 810193e:	4a7f      	ldr	r2, [pc, #508]	; (8101b3c <HAL_DMA_Abort_IT+0x284>)
 8101940:	4293      	cmp	r3, r2
 8101942:	d01d      	beq.n	8101980 <HAL_DMA_Abort_IT+0xc8>
 8101944:	687b      	ldr	r3, [r7, #4]
 8101946:	681b      	ldr	r3, [r3, #0]
 8101948:	4a7d      	ldr	r2, [pc, #500]	; (8101b40 <HAL_DMA_Abort_IT+0x288>)
 810194a:	4293      	cmp	r3, r2
 810194c:	d018      	beq.n	8101980 <HAL_DMA_Abort_IT+0xc8>
 810194e:	687b      	ldr	r3, [r7, #4]
 8101950:	681b      	ldr	r3, [r3, #0]
 8101952:	4a7c      	ldr	r2, [pc, #496]	; (8101b44 <HAL_DMA_Abort_IT+0x28c>)
 8101954:	4293      	cmp	r3, r2
 8101956:	d013      	beq.n	8101980 <HAL_DMA_Abort_IT+0xc8>
 8101958:	687b      	ldr	r3, [r7, #4]
 810195a:	681b      	ldr	r3, [r3, #0]
 810195c:	4a7a      	ldr	r2, [pc, #488]	; (8101b48 <HAL_DMA_Abort_IT+0x290>)
 810195e:	4293      	cmp	r3, r2
 8101960:	d00e      	beq.n	8101980 <HAL_DMA_Abort_IT+0xc8>
 8101962:	687b      	ldr	r3, [r7, #4]
 8101964:	681b      	ldr	r3, [r3, #0]
 8101966:	4a79      	ldr	r2, [pc, #484]	; (8101b4c <HAL_DMA_Abort_IT+0x294>)
 8101968:	4293      	cmp	r3, r2
 810196a:	d009      	beq.n	8101980 <HAL_DMA_Abort_IT+0xc8>
 810196c:	687b      	ldr	r3, [r7, #4]
 810196e:	681b      	ldr	r3, [r3, #0]
 8101970:	4a77      	ldr	r2, [pc, #476]	; (8101b50 <HAL_DMA_Abort_IT+0x298>)
 8101972:	4293      	cmp	r3, r2
 8101974:	d004      	beq.n	8101980 <HAL_DMA_Abort_IT+0xc8>
 8101976:	687b      	ldr	r3, [r7, #4]
 8101978:	681b      	ldr	r3, [r3, #0]
 810197a:	4a76      	ldr	r2, [pc, #472]	; (8101b54 <HAL_DMA_Abort_IT+0x29c>)
 810197c:	4293      	cmp	r3, r2
 810197e:	d101      	bne.n	8101984 <HAL_DMA_Abort_IT+0xcc>
 8101980:	2301      	movs	r3, #1
 8101982:	e000      	b.n	8101986 <HAL_DMA_Abort_IT+0xce>
 8101984:	2300      	movs	r3, #0
 8101986:	2b00      	cmp	r3, #0
 8101988:	d065      	beq.n	8101a56 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 810198a:	687b      	ldr	r3, [r7, #4]
 810198c:	2204      	movs	r2, #4
 810198e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8101992:	687b      	ldr	r3, [r7, #4]
 8101994:	681b      	ldr	r3, [r3, #0]
 8101996:	4a60      	ldr	r2, [pc, #384]	; (8101b18 <HAL_DMA_Abort_IT+0x260>)
 8101998:	4293      	cmp	r3, r2
 810199a:	d04a      	beq.n	8101a32 <HAL_DMA_Abort_IT+0x17a>
 810199c:	687b      	ldr	r3, [r7, #4]
 810199e:	681b      	ldr	r3, [r3, #0]
 81019a0:	4a5e      	ldr	r2, [pc, #376]	; (8101b1c <HAL_DMA_Abort_IT+0x264>)
 81019a2:	4293      	cmp	r3, r2
 81019a4:	d045      	beq.n	8101a32 <HAL_DMA_Abort_IT+0x17a>
 81019a6:	687b      	ldr	r3, [r7, #4]
 81019a8:	681b      	ldr	r3, [r3, #0]
 81019aa:	4a5d      	ldr	r2, [pc, #372]	; (8101b20 <HAL_DMA_Abort_IT+0x268>)
 81019ac:	4293      	cmp	r3, r2
 81019ae:	d040      	beq.n	8101a32 <HAL_DMA_Abort_IT+0x17a>
 81019b0:	687b      	ldr	r3, [r7, #4]
 81019b2:	681b      	ldr	r3, [r3, #0]
 81019b4:	4a5b      	ldr	r2, [pc, #364]	; (8101b24 <HAL_DMA_Abort_IT+0x26c>)
 81019b6:	4293      	cmp	r3, r2
 81019b8:	d03b      	beq.n	8101a32 <HAL_DMA_Abort_IT+0x17a>
 81019ba:	687b      	ldr	r3, [r7, #4]
 81019bc:	681b      	ldr	r3, [r3, #0]
 81019be:	4a5a      	ldr	r2, [pc, #360]	; (8101b28 <HAL_DMA_Abort_IT+0x270>)
 81019c0:	4293      	cmp	r3, r2
 81019c2:	d036      	beq.n	8101a32 <HAL_DMA_Abort_IT+0x17a>
 81019c4:	687b      	ldr	r3, [r7, #4]
 81019c6:	681b      	ldr	r3, [r3, #0]
 81019c8:	4a58      	ldr	r2, [pc, #352]	; (8101b2c <HAL_DMA_Abort_IT+0x274>)
 81019ca:	4293      	cmp	r3, r2
 81019cc:	d031      	beq.n	8101a32 <HAL_DMA_Abort_IT+0x17a>
 81019ce:	687b      	ldr	r3, [r7, #4]
 81019d0:	681b      	ldr	r3, [r3, #0]
 81019d2:	4a57      	ldr	r2, [pc, #348]	; (8101b30 <HAL_DMA_Abort_IT+0x278>)
 81019d4:	4293      	cmp	r3, r2
 81019d6:	d02c      	beq.n	8101a32 <HAL_DMA_Abort_IT+0x17a>
 81019d8:	687b      	ldr	r3, [r7, #4]
 81019da:	681b      	ldr	r3, [r3, #0]
 81019dc:	4a55      	ldr	r2, [pc, #340]	; (8101b34 <HAL_DMA_Abort_IT+0x27c>)
 81019de:	4293      	cmp	r3, r2
 81019e0:	d027      	beq.n	8101a32 <HAL_DMA_Abort_IT+0x17a>
 81019e2:	687b      	ldr	r3, [r7, #4]
 81019e4:	681b      	ldr	r3, [r3, #0]
 81019e6:	4a54      	ldr	r2, [pc, #336]	; (8101b38 <HAL_DMA_Abort_IT+0x280>)
 81019e8:	4293      	cmp	r3, r2
 81019ea:	d022      	beq.n	8101a32 <HAL_DMA_Abort_IT+0x17a>
 81019ec:	687b      	ldr	r3, [r7, #4]
 81019ee:	681b      	ldr	r3, [r3, #0]
 81019f0:	4a52      	ldr	r2, [pc, #328]	; (8101b3c <HAL_DMA_Abort_IT+0x284>)
 81019f2:	4293      	cmp	r3, r2
 81019f4:	d01d      	beq.n	8101a32 <HAL_DMA_Abort_IT+0x17a>
 81019f6:	687b      	ldr	r3, [r7, #4]
 81019f8:	681b      	ldr	r3, [r3, #0]
 81019fa:	4a51      	ldr	r2, [pc, #324]	; (8101b40 <HAL_DMA_Abort_IT+0x288>)
 81019fc:	4293      	cmp	r3, r2
 81019fe:	d018      	beq.n	8101a32 <HAL_DMA_Abort_IT+0x17a>
 8101a00:	687b      	ldr	r3, [r7, #4]
 8101a02:	681b      	ldr	r3, [r3, #0]
 8101a04:	4a4f      	ldr	r2, [pc, #316]	; (8101b44 <HAL_DMA_Abort_IT+0x28c>)
 8101a06:	4293      	cmp	r3, r2
 8101a08:	d013      	beq.n	8101a32 <HAL_DMA_Abort_IT+0x17a>
 8101a0a:	687b      	ldr	r3, [r7, #4]
 8101a0c:	681b      	ldr	r3, [r3, #0]
 8101a0e:	4a4e      	ldr	r2, [pc, #312]	; (8101b48 <HAL_DMA_Abort_IT+0x290>)
 8101a10:	4293      	cmp	r3, r2
 8101a12:	d00e      	beq.n	8101a32 <HAL_DMA_Abort_IT+0x17a>
 8101a14:	687b      	ldr	r3, [r7, #4]
 8101a16:	681b      	ldr	r3, [r3, #0]
 8101a18:	4a4c      	ldr	r2, [pc, #304]	; (8101b4c <HAL_DMA_Abort_IT+0x294>)
 8101a1a:	4293      	cmp	r3, r2
 8101a1c:	d009      	beq.n	8101a32 <HAL_DMA_Abort_IT+0x17a>
 8101a1e:	687b      	ldr	r3, [r7, #4]
 8101a20:	681b      	ldr	r3, [r3, #0]
 8101a22:	4a4b      	ldr	r2, [pc, #300]	; (8101b50 <HAL_DMA_Abort_IT+0x298>)
 8101a24:	4293      	cmp	r3, r2
 8101a26:	d004      	beq.n	8101a32 <HAL_DMA_Abort_IT+0x17a>
 8101a28:	687b      	ldr	r3, [r7, #4]
 8101a2a:	681b      	ldr	r3, [r3, #0]
 8101a2c:	4a49      	ldr	r2, [pc, #292]	; (8101b54 <HAL_DMA_Abort_IT+0x29c>)
 8101a2e:	4293      	cmp	r3, r2
 8101a30:	d108      	bne.n	8101a44 <HAL_DMA_Abort_IT+0x18c>
 8101a32:	687b      	ldr	r3, [r7, #4]
 8101a34:	681b      	ldr	r3, [r3, #0]
 8101a36:	681a      	ldr	r2, [r3, #0]
 8101a38:	687b      	ldr	r3, [r7, #4]
 8101a3a:	681b      	ldr	r3, [r3, #0]
 8101a3c:	f022 0201 	bic.w	r2, r2, #1
 8101a40:	601a      	str	r2, [r3, #0]
 8101a42:	e147      	b.n	8101cd4 <HAL_DMA_Abort_IT+0x41c>
 8101a44:	687b      	ldr	r3, [r7, #4]
 8101a46:	681b      	ldr	r3, [r3, #0]
 8101a48:	681a      	ldr	r2, [r3, #0]
 8101a4a:	687b      	ldr	r3, [r7, #4]
 8101a4c:	681b      	ldr	r3, [r3, #0]
 8101a4e:	f022 0201 	bic.w	r2, r2, #1
 8101a52:	601a      	str	r2, [r3, #0]
 8101a54:	e13e      	b.n	8101cd4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8101a56:	687b      	ldr	r3, [r7, #4]
 8101a58:	681b      	ldr	r3, [r3, #0]
 8101a5a:	681a      	ldr	r2, [r3, #0]
 8101a5c:	687b      	ldr	r3, [r7, #4]
 8101a5e:	681b      	ldr	r3, [r3, #0]
 8101a60:	f022 020e 	bic.w	r2, r2, #14
 8101a64:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8101a66:	687b      	ldr	r3, [r7, #4]
 8101a68:	681b      	ldr	r3, [r3, #0]
 8101a6a:	4a2b      	ldr	r2, [pc, #172]	; (8101b18 <HAL_DMA_Abort_IT+0x260>)
 8101a6c:	4293      	cmp	r3, r2
 8101a6e:	d04a      	beq.n	8101b06 <HAL_DMA_Abort_IT+0x24e>
 8101a70:	687b      	ldr	r3, [r7, #4]
 8101a72:	681b      	ldr	r3, [r3, #0]
 8101a74:	4a29      	ldr	r2, [pc, #164]	; (8101b1c <HAL_DMA_Abort_IT+0x264>)
 8101a76:	4293      	cmp	r3, r2
 8101a78:	d045      	beq.n	8101b06 <HAL_DMA_Abort_IT+0x24e>
 8101a7a:	687b      	ldr	r3, [r7, #4]
 8101a7c:	681b      	ldr	r3, [r3, #0]
 8101a7e:	4a28      	ldr	r2, [pc, #160]	; (8101b20 <HAL_DMA_Abort_IT+0x268>)
 8101a80:	4293      	cmp	r3, r2
 8101a82:	d040      	beq.n	8101b06 <HAL_DMA_Abort_IT+0x24e>
 8101a84:	687b      	ldr	r3, [r7, #4]
 8101a86:	681b      	ldr	r3, [r3, #0]
 8101a88:	4a26      	ldr	r2, [pc, #152]	; (8101b24 <HAL_DMA_Abort_IT+0x26c>)
 8101a8a:	4293      	cmp	r3, r2
 8101a8c:	d03b      	beq.n	8101b06 <HAL_DMA_Abort_IT+0x24e>
 8101a8e:	687b      	ldr	r3, [r7, #4]
 8101a90:	681b      	ldr	r3, [r3, #0]
 8101a92:	4a25      	ldr	r2, [pc, #148]	; (8101b28 <HAL_DMA_Abort_IT+0x270>)
 8101a94:	4293      	cmp	r3, r2
 8101a96:	d036      	beq.n	8101b06 <HAL_DMA_Abort_IT+0x24e>
 8101a98:	687b      	ldr	r3, [r7, #4]
 8101a9a:	681b      	ldr	r3, [r3, #0]
 8101a9c:	4a23      	ldr	r2, [pc, #140]	; (8101b2c <HAL_DMA_Abort_IT+0x274>)
 8101a9e:	4293      	cmp	r3, r2
 8101aa0:	d031      	beq.n	8101b06 <HAL_DMA_Abort_IT+0x24e>
 8101aa2:	687b      	ldr	r3, [r7, #4]
 8101aa4:	681b      	ldr	r3, [r3, #0]
 8101aa6:	4a22      	ldr	r2, [pc, #136]	; (8101b30 <HAL_DMA_Abort_IT+0x278>)
 8101aa8:	4293      	cmp	r3, r2
 8101aaa:	d02c      	beq.n	8101b06 <HAL_DMA_Abort_IT+0x24e>
 8101aac:	687b      	ldr	r3, [r7, #4]
 8101aae:	681b      	ldr	r3, [r3, #0]
 8101ab0:	4a20      	ldr	r2, [pc, #128]	; (8101b34 <HAL_DMA_Abort_IT+0x27c>)
 8101ab2:	4293      	cmp	r3, r2
 8101ab4:	d027      	beq.n	8101b06 <HAL_DMA_Abort_IT+0x24e>
 8101ab6:	687b      	ldr	r3, [r7, #4]
 8101ab8:	681b      	ldr	r3, [r3, #0]
 8101aba:	4a1f      	ldr	r2, [pc, #124]	; (8101b38 <HAL_DMA_Abort_IT+0x280>)
 8101abc:	4293      	cmp	r3, r2
 8101abe:	d022      	beq.n	8101b06 <HAL_DMA_Abort_IT+0x24e>
 8101ac0:	687b      	ldr	r3, [r7, #4]
 8101ac2:	681b      	ldr	r3, [r3, #0]
 8101ac4:	4a1d      	ldr	r2, [pc, #116]	; (8101b3c <HAL_DMA_Abort_IT+0x284>)
 8101ac6:	4293      	cmp	r3, r2
 8101ac8:	d01d      	beq.n	8101b06 <HAL_DMA_Abort_IT+0x24e>
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	681b      	ldr	r3, [r3, #0]
 8101ace:	4a1c      	ldr	r2, [pc, #112]	; (8101b40 <HAL_DMA_Abort_IT+0x288>)
 8101ad0:	4293      	cmp	r3, r2
 8101ad2:	d018      	beq.n	8101b06 <HAL_DMA_Abort_IT+0x24e>
 8101ad4:	687b      	ldr	r3, [r7, #4]
 8101ad6:	681b      	ldr	r3, [r3, #0]
 8101ad8:	4a1a      	ldr	r2, [pc, #104]	; (8101b44 <HAL_DMA_Abort_IT+0x28c>)
 8101ada:	4293      	cmp	r3, r2
 8101adc:	d013      	beq.n	8101b06 <HAL_DMA_Abort_IT+0x24e>
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	681b      	ldr	r3, [r3, #0]
 8101ae2:	4a19      	ldr	r2, [pc, #100]	; (8101b48 <HAL_DMA_Abort_IT+0x290>)
 8101ae4:	4293      	cmp	r3, r2
 8101ae6:	d00e      	beq.n	8101b06 <HAL_DMA_Abort_IT+0x24e>
 8101ae8:	687b      	ldr	r3, [r7, #4]
 8101aea:	681b      	ldr	r3, [r3, #0]
 8101aec:	4a17      	ldr	r2, [pc, #92]	; (8101b4c <HAL_DMA_Abort_IT+0x294>)
 8101aee:	4293      	cmp	r3, r2
 8101af0:	d009      	beq.n	8101b06 <HAL_DMA_Abort_IT+0x24e>
 8101af2:	687b      	ldr	r3, [r7, #4]
 8101af4:	681b      	ldr	r3, [r3, #0]
 8101af6:	4a16      	ldr	r2, [pc, #88]	; (8101b50 <HAL_DMA_Abort_IT+0x298>)
 8101af8:	4293      	cmp	r3, r2
 8101afa:	d004      	beq.n	8101b06 <HAL_DMA_Abort_IT+0x24e>
 8101afc:	687b      	ldr	r3, [r7, #4]
 8101afe:	681b      	ldr	r3, [r3, #0]
 8101b00:	4a14      	ldr	r2, [pc, #80]	; (8101b54 <HAL_DMA_Abort_IT+0x29c>)
 8101b02:	4293      	cmp	r3, r2
 8101b04:	d128      	bne.n	8101b58 <HAL_DMA_Abort_IT+0x2a0>
 8101b06:	687b      	ldr	r3, [r7, #4]
 8101b08:	681b      	ldr	r3, [r3, #0]
 8101b0a:	681a      	ldr	r2, [r3, #0]
 8101b0c:	687b      	ldr	r3, [r7, #4]
 8101b0e:	681b      	ldr	r3, [r3, #0]
 8101b10:	f022 0201 	bic.w	r2, r2, #1
 8101b14:	601a      	str	r2, [r3, #0]
 8101b16:	e027      	b.n	8101b68 <HAL_DMA_Abort_IT+0x2b0>
 8101b18:	40020010 	.word	0x40020010
 8101b1c:	40020028 	.word	0x40020028
 8101b20:	40020040 	.word	0x40020040
 8101b24:	40020058 	.word	0x40020058
 8101b28:	40020070 	.word	0x40020070
 8101b2c:	40020088 	.word	0x40020088
 8101b30:	400200a0 	.word	0x400200a0
 8101b34:	400200b8 	.word	0x400200b8
 8101b38:	40020410 	.word	0x40020410
 8101b3c:	40020428 	.word	0x40020428
 8101b40:	40020440 	.word	0x40020440
 8101b44:	40020458 	.word	0x40020458
 8101b48:	40020470 	.word	0x40020470
 8101b4c:	40020488 	.word	0x40020488
 8101b50:	400204a0 	.word	0x400204a0
 8101b54:	400204b8 	.word	0x400204b8
 8101b58:	687b      	ldr	r3, [r7, #4]
 8101b5a:	681b      	ldr	r3, [r3, #0]
 8101b5c:	681a      	ldr	r2, [r3, #0]
 8101b5e:	687b      	ldr	r3, [r7, #4]
 8101b60:	681b      	ldr	r3, [r3, #0]
 8101b62:	f022 0201 	bic.w	r2, r2, #1
 8101b66:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101b68:	687b      	ldr	r3, [r7, #4]
 8101b6a:	681b      	ldr	r3, [r3, #0]
 8101b6c:	4a5c      	ldr	r2, [pc, #368]	; (8101ce0 <HAL_DMA_Abort_IT+0x428>)
 8101b6e:	4293      	cmp	r3, r2
 8101b70:	d072      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101b72:	687b      	ldr	r3, [r7, #4]
 8101b74:	681b      	ldr	r3, [r3, #0]
 8101b76:	4a5b      	ldr	r2, [pc, #364]	; (8101ce4 <HAL_DMA_Abort_IT+0x42c>)
 8101b78:	4293      	cmp	r3, r2
 8101b7a:	d06d      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101b7c:	687b      	ldr	r3, [r7, #4]
 8101b7e:	681b      	ldr	r3, [r3, #0]
 8101b80:	4a59      	ldr	r2, [pc, #356]	; (8101ce8 <HAL_DMA_Abort_IT+0x430>)
 8101b82:	4293      	cmp	r3, r2
 8101b84:	d068      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101b86:	687b      	ldr	r3, [r7, #4]
 8101b88:	681b      	ldr	r3, [r3, #0]
 8101b8a:	4a58      	ldr	r2, [pc, #352]	; (8101cec <HAL_DMA_Abort_IT+0x434>)
 8101b8c:	4293      	cmp	r3, r2
 8101b8e:	d063      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101b90:	687b      	ldr	r3, [r7, #4]
 8101b92:	681b      	ldr	r3, [r3, #0]
 8101b94:	4a56      	ldr	r2, [pc, #344]	; (8101cf0 <HAL_DMA_Abort_IT+0x438>)
 8101b96:	4293      	cmp	r3, r2
 8101b98:	d05e      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101b9a:	687b      	ldr	r3, [r7, #4]
 8101b9c:	681b      	ldr	r3, [r3, #0]
 8101b9e:	4a55      	ldr	r2, [pc, #340]	; (8101cf4 <HAL_DMA_Abort_IT+0x43c>)
 8101ba0:	4293      	cmp	r3, r2
 8101ba2:	d059      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101ba4:	687b      	ldr	r3, [r7, #4]
 8101ba6:	681b      	ldr	r3, [r3, #0]
 8101ba8:	4a53      	ldr	r2, [pc, #332]	; (8101cf8 <HAL_DMA_Abort_IT+0x440>)
 8101baa:	4293      	cmp	r3, r2
 8101bac:	d054      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101bae:	687b      	ldr	r3, [r7, #4]
 8101bb0:	681b      	ldr	r3, [r3, #0]
 8101bb2:	4a52      	ldr	r2, [pc, #328]	; (8101cfc <HAL_DMA_Abort_IT+0x444>)
 8101bb4:	4293      	cmp	r3, r2
 8101bb6:	d04f      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101bb8:	687b      	ldr	r3, [r7, #4]
 8101bba:	681b      	ldr	r3, [r3, #0]
 8101bbc:	4a50      	ldr	r2, [pc, #320]	; (8101d00 <HAL_DMA_Abort_IT+0x448>)
 8101bbe:	4293      	cmp	r3, r2
 8101bc0:	d04a      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101bc2:	687b      	ldr	r3, [r7, #4]
 8101bc4:	681b      	ldr	r3, [r3, #0]
 8101bc6:	4a4f      	ldr	r2, [pc, #316]	; (8101d04 <HAL_DMA_Abort_IT+0x44c>)
 8101bc8:	4293      	cmp	r3, r2
 8101bca:	d045      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101bcc:	687b      	ldr	r3, [r7, #4]
 8101bce:	681b      	ldr	r3, [r3, #0]
 8101bd0:	4a4d      	ldr	r2, [pc, #308]	; (8101d08 <HAL_DMA_Abort_IT+0x450>)
 8101bd2:	4293      	cmp	r3, r2
 8101bd4:	d040      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101bd6:	687b      	ldr	r3, [r7, #4]
 8101bd8:	681b      	ldr	r3, [r3, #0]
 8101bda:	4a4c      	ldr	r2, [pc, #304]	; (8101d0c <HAL_DMA_Abort_IT+0x454>)
 8101bdc:	4293      	cmp	r3, r2
 8101bde:	d03b      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101be0:	687b      	ldr	r3, [r7, #4]
 8101be2:	681b      	ldr	r3, [r3, #0]
 8101be4:	4a4a      	ldr	r2, [pc, #296]	; (8101d10 <HAL_DMA_Abort_IT+0x458>)
 8101be6:	4293      	cmp	r3, r2
 8101be8:	d036      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101bea:	687b      	ldr	r3, [r7, #4]
 8101bec:	681b      	ldr	r3, [r3, #0]
 8101bee:	4a49      	ldr	r2, [pc, #292]	; (8101d14 <HAL_DMA_Abort_IT+0x45c>)
 8101bf0:	4293      	cmp	r3, r2
 8101bf2:	d031      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101bf4:	687b      	ldr	r3, [r7, #4]
 8101bf6:	681b      	ldr	r3, [r3, #0]
 8101bf8:	4a47      	ldr	r2, [pc, #284]	; (8101d18 <HAL_DMA_Abort_IT+0x460>)
 8101bfa:	4293      	cmp	r3, r2
 8101bfc:	d02c      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101bfe:	687b      	ldr	r3, [r7, #4]
 8101c00:	681b      	ldr	r3, [r3, #0]
 8101c02:	4a46      	ldr	r2, [pc, #280]	; (8101d1c <HAL_DMA_Abort_IT+0x464>)
 8101c04:	4293      	cmp	r3, r2
 8101c06:	d027      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101c08:	687b      	ldr	r3, [r7, #4]
 8101c0a:	681b      	ldr	r3, [r3, #0]
 8101c0c:	4a44      	ldr	r2, [pc, #272]	; (8101d20 <HAL_DMA_Abort_IT+0x468>)
 8101c0e:	4293      	cmp	r3, r2
 8101c10:	d022      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101c12:	687b      	ldr	r3, [r7, #4]
 8101c14:	681b      	ldr	r3, [r3, #0]
 8101c16:	4a43      	ldr	r2, [pc, #268]	; (8101d24 <HAL_DMA_Abort_IT+0x46c>)
 8101c18:	4293      	cmp	r3, r2
 8101c1a:	d01d      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101c1c:	687b      	ldr	r3, [r7, #4]
 8101c1e:	681b      	ldr	r3, [r3, #0]
 8101c20:	4a41      	ldr	r2, [pc, #260]	; (8101d28 <HAL_DMA_Abort_IT+0x470>)
 8101c22:	4293      	cmp	r3, r2
 8101c24:	d018      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101c26:	687b      	ldr	r3, [r7, #4]
 8101c28:	681b      	ldr	r3, [r3, #0]
 8101c2a:	4a40      	ldr	r2, [pc, #256]	; (8101d2c <HAL_DMA_Abort_IT+0x474>)
 8101c2c:	4293      	cmp	r3, r2
 8101c2e:	d013      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101c30:	687b      	ldr	r3, [r7, #4]
 8101c32:	681b      	ldr	r3, [r3, #0]
 8101c34:	4a3e      	ldr	r2, [pc, #248]	; (8101d30 <HAL_DMA_Abort_IT+0x478>)
 8101c36:	4293      	cmp	r3, r2
 8101c38:	d00e      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101c3a:	687b      	ldr	r3, [r7, #4]
 8101c3c:	681b      	ldr	r3, [r3, #0]
 8101c3e:	4a3d      	ldr	r2, [pc, #244]	; (8101d34 <HAL_DMA_Abort_IT+0x47c>)
 8101c40:	4293      	cmp	r3, r2
 8101c42:	d009      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101c44:	687b      	ldr	r3, [r7, #4]
 8101c46:	681b      	ldr	r3, [r3, #0]
 8101c48:	4a3b      	ldr	r2, [pc, #236]	; (8101d38 <HAL_DMA_Abort_IT+0x480>)
 8101c4a:	4293      	cmp	r3, r2
 8101c4c:	d004      	beq.n	8101c58 <HAL_DMA_Abort_IT+0x3a0>
 8101c4e:	687b      	ldr	r3, [r7, #4]
 8101c50:	681b      	ldr	r3, [r3, #0]
 8101c52:	4a3a      	ldr	r2, [pc, #232]	; (8101d3c <HAL_DMA_Abort_IT+0x484>)
 8101c54:	4293      	cmp	r3, r2
 8101c56:	d101      	bne.n	8101c5c <HAL_DMA_Abort_IT+0x3a4>
 8101c58:	2301      	movs	r3, #1
 8101c5a:	e000      	b.n	8101c5e <HAL_DMA_Abort_IT+0x3a6>
 8101c5c:	2300      	movs	r3, #0
 8101c5e:	2b00      	cmp	r3, #0
 8101c60:	d028      	beq.n	8101cb4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8101c62:	687b      	ldr	r3, [r7, #4]
 8101c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101c66:	681a      	ldr	r2, [r3, #0]
 8101c68:	687b      	ldr	r3, [r7, #4]
 8101c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8101c70:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8101c72:	687b      	ldr	r3, [r7, #4]
 8101c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101c76:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8101c78:	687b      	ldr	r3, [r7, #4]
 8101c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101c7c:	f003 031f 	and.w	r3, r3, #31
 8101c80:	2201      	movs	r2, #1
 8101c82:	409a      	lsls	r2, r3
 8101c84:	68fb      	ldr	r3, [r7, #12]
 8101c86:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8101c88:	687b      	ldr	r3, [r7, #4]
 8101c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101c8c:	687a      	ldr	r2, [r7, #4]
 8101c8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8101c90:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8101c92:	687b      	ldr	r3, [r7, #4]
 8101c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101c96:	2b00      	cmp	r3, #0
 8101c98:	d00c      	beq.n	8101cb4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8101c9a:	687b      	ldr	r3, [r7, #4]
 8101c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101c9e:	681a      	ldr	r2, [r3, #0]
 8101ca0:	687b      	ldr	r3, [r7, #4]
 8101ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8101ca8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8101caa:	687b      	ldr	r3, [r7, #4]
 8101cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101cae:	687a      	ldr	r2, [r7, #4]
 8101cb0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8101cb2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8101cb4:	687b      	ldr	r3, [r7, #4]
 8101cb6:	2200      	movs	r2, #0
 8101cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8101cbc:	687b      	ldr	r3, [r7, #4]
 8101cbe:	2201      	movs	r2, #1
 8101cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8101cc4:	687b      	ldr	r3, [r7, #4]
 8101cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101cc8:	2b00      	cmp	r3, #0
 8101cca:	d003      	beq.n	8101cd4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8101ccc:	687b      	ldr	r3, [r7, #4]
 8101cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101cd0:	6878      	ldr	r0, [r7, #4]
 8101cd2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8101cd4:	2300      	movs	r3, #0
}
 8101cd6:	4618      	mov	r0, r3
 8101cd8:	3710      	adds	r7, #16
 8101cda:	46bd      	mov	sp, r7
 8101cdc:	bd80      	pop	{r7, pc}
 8101cde:	bf00      	nop
 8101ce0:	40020010 	.word	0x40020010
 8101ce4:	40020028 	.word	0x40020028
 8101ce8:	40020040 	.word	0x40020040
 8101cec:	40020058 	.word	0x40020058
 8101cf0:	40020070 	.word	0x40020070
 8101cf4:	40020088 	.word	0x40020088
 8101cf8:	400200a0 	.word	0x400200a0
 8101cfc:	400200b8 	.word	0x400200b8
 8101d00:	40020410 	.word	0x40020410
 8101d04:	40020428 	.word	0x40020428
 8101d08:	40020440 	.word	0x40020440
 8101d0c:	40020458 	.word	0x40020458
 8101d10:	40020470 	.word	0x40020470
 8101d14:	40020488 	.word	0x40020488
 8101d18:	400204a0 	.word	0x400204a0
 8101d1c:	400204b8 	.word	0x400204b8
 8101d20:	58025408 	.word	0x58025408
 8101d24:	5802541c 	.word	0x5802541c
 8101d28:	58025430 	.word	0x58025430
 8101d2c:	58025444 	.word	0x58025444
 8101d30:	58025458 	.word	0x58025458
 8101d34:	5802546c 	.word	0x5802546c
 8101d38:	58025480 	.word	0x58025480
 8101d3c:	58025494 	.word	0x58025494

08101d40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8101d40:	b580      	push	{r7, lr}
 8101d42:	b08a      	sub	sp, #40	; 0x28
 8101d44:	af00      	add	r7, sp, #0
 8101d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8101d48:	2300      	movs	r3, #0
 8101d4a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8101d4c:	4b67      	ldr	r3, [pc, #412]	; (8101eec <HAL_DMA_IRQHandler+0x1ac>)
 8101d4e:	681b      	ldr	r3, [r3, #0]
 8101d50:	4a67      	ldr	r2, [pc, #412]	; (8101ef0 <HAL_DMA_IRQHandler+0x1b0>)
 8101d52:	fba2 2303 	umull	r2, r3, r2, r3
 8101d56:	0a9b      	lsrs	r3, r3, #10
 8101d58:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8101d5a:	687b      	ldr	r3, [r7, #4]
 8101d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101d5e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8101d60:	687b      	ldr	r3, [r7, #4]
 8101d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101d64:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8101d66:	6a3b      	ldr	r3, [r7, #32]
 8101d68:	681b      	ldr	r3, [r3, #0]
 8101d6a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8101d6c:	69fb      	ldr	r3, [r7, #28]
 8101d6e:	681b      	ldr	r3, [r3, #0]
 8101d70:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8101d72:	687b      	ldr	r3, [r7, #4]
 8101d74:	681b      	ldr	r3, [r3, #0]
 8101d76:	4a5f      	ldr	r2, [pc, #380]	; (8101ef4 <HAL_DMA_IRQHandler+0x1b4>)
 8101d78:	4293      	cmp	r3, r2
 8101d7a:	d04a      	beq.n	8101e12 <HAL_DMA_IRQHandler+0xd2>
 8101d7c:	687b      	ldr	r3, [r7, #4]
 8101d7e:	681b      	ldr	r3, [r3, #0]
 8101d80:	4a5d      	ldr	r2, [pc, #372]	; (8101ef8 <HAL_DMA_IRQHandler+0x1b8>)
 8101d82:	4293      	cmp	r3, r2
 8101d84:	d045      	beq.n	8101e12 <HAL_DMA_IRQHandler+0xd2>
 8101d86:	687b      	ldr	r3, [r7, #4]
 8101d88:	681b      	ldr	r3, [r3, #0]
 8101d8a:	4a5c      	ldr	r2, [pc, #368]	; (8101efc <HAL_DMA_IRQHandler+0x1bc>)
 8101d8c:	4293      	cmp	r3, r2
 8101d8e:	d040      	beq.n	8101e12 <HAL_DMA_IRQHandler+0xd2>
 8101d90:	687b      	ldr	r3, [r7, #4]
 8101d92:	681b      	ldr	r3, [r3, #0]
 8101d94:	4a5a      	ldr	r2, [pc, #360]	; (8101f00 <HAL_DMA_IRQHandler+0x1c0>)
 8101d96:	4293      	cmp	r3, r2
 8101d98:	d03b      	beq.n	8101e12 <HAL_DMA_IRQHandler+0xd2>
 8101d9a:	687b      	ldr	r3, [r7, #4]
 8101d9c:	681b      	ldr	r3, [r3, #0]
 8101d9e:	4a59      	ldr	r2, [pc, #356]	; (8101f04 <HAL_DMA_IRQHandler+0x1c4>)
 8101da0:	4293      	cmp	r3, r2
 8101da2:	d036      	beq.n	8101e12 <HAL_DMA_IRQHandler+0xd2>
 8101da4:	687b      	ldr	r3, [r7, #4]
 8101da6:	681b      	ldr	r3, [r3, #0]
 8101da8:	4a57      	ldr	r2, [pc, #348]	; (8101f08 <HAL_DMA_IRQHandler+0x1c8>)
 8101daa:	4293      	cmp	r3, r2
 8101dac:	d031      	beq.n	8101e12 <HAL_DMA_IRQHandler+0xd2>
 8101dae:	687b      	ldr	r3, [r7, #4]
 8101db0:	681b      	ldr	r3, [r3, #0]
 8101db2:	4a56      	ldr	r2, [pc, #344]	; (8101f0c <HAL_DMA_IRQHandler+0x1cc>)
 8101db4:	4293      	cmp	r3, r2
 8101db6:	d02c      	beq.n	8101e12 <HAL_DMA_IRQHandler+0xd2>
 8101db8:	687b      	ldr	r3, [r7, #4]
 8101dba:	681b      	ldr	r3, [r3, #0]
 8101dbc:	4a54      	ldr	r2, [pc, #336]	; (8101f10 <HAL_DMA_IRQHandler+0x1d0>)
 8101dbe:	4293      	cmp	r3, r2
 8101dc0:	d027      	beq.n	8101e12 <HAL_DMA_IRQHandler+0xd2>
 8101dc2:	687b      	ldr	r3, [r7, #4]
 8101dc4:	681b      	ldr	r3, [r3, #0]
 8101dc6:	4a53      	ldr	r2, [pc, #332]	; (8101f14 <HAL_DMA_IRQHandler+0x1d4>)
 8101dc8:	4293      	cmp	r3, r2
 8101dca:	d022      	beq.n	8101e12 <HAL_DMA_IRQHandler+0xd2>
 8101dcc:	687b      	ldr	r3, [r7, #4]
 8101dce:	681b      	ldr	r3, [r3, #0]
 8101dd0:	4a51      	ldr	r2, [pc, #324]	; (8101f18 <HAL_DMA_IRQHandler+0x1d8>)
 8101dd2:	4293      	cmp	r3, r2
 8101dd4:	d01d      	beq.n	8101e12 <HAL_DMA_IRQHandler+0xd2>
 8101dd6:	687b      	ldr	r3, [r7, #4]
 8101dd8:	681b      	ldr	r3, [r3, #0]
 8101dda:	4a50      	ldr	r2, [pc, #320]	; (8101f1c <HAL_DMA_IRQHandler+0x1dc>)
 8101ddc:	4293      	cmp	r3, r2
 8101dde:	d018      	beq.n	8101e12 <HAL_DMA_IRQHandler+0xd2>
 8101de0:	687b      	ldr	r3, [r7, #4]
 8101de2:	681b      	ldr	r3, [r3, #0]
 8101de4:	4a4e      	ldr	r2, [pc, #312]	; (8101f20 <HAL_DMA_IRQHandler+0x1e0>)
 8101de6:	4293      	cmp	r3, r2
 8101de8:	d013      	beq.n	8101e12 <HAL_DMA_IRQHandler+0xd2>
 8101dea:	687b      	ldr	r3, [r7, #4]
 8101dec:	681b      	ldr	r3, [r3, #0]
 8101dee:	4a4d      	ldr	r2, [pc, #308]	; (8101f24 <HAL_DMA_IRQHandler+0x1e4>)
 8101df0:	4293      	cmp	r3, r2
 8101df2:	d00e      	beq.n	8101e12 <HAL_DMA_IRQHandler+0xd2>
 8101df4:	687b      	ldr	r3, [r7, #4]
 8101df6:	681b      	ldr	r3, [r3, #0]
 8101df8:	4a4b      	ldr	r2, [pc, #300]	; (8101f28 <HAL_DMA_IRQHandler+0x1e8>)
 8101dfa:	4293      	cmp	r3, r2
 8101dfc:	d009      	beq.n	8101e12 <HAL_DMA_IRQHandler+0xd2>
 8101dfe:	687b      	ldr	r3, [r7, #4]
 8101e00:	681b      	ldr	r3, [r3, #0]
 8101e02:	4a4a      	ldr	r2, [pc, #296]	; (8101f2c <HAL_DMA_IRQHandler+0x1ec>)
 8101e04:	4293      	cmp	r3, r2
 8101e06:	d004      	beq.n	8101e12 <HAL_DMA_IRQHandler+0xd2>
 8101e08:	687b      	ldr	r3, [r7, #4]
 8101e0a:	681b      	ldr	r3, [r3, #0]
 8101e0c:	4a48      	ldr	r2, [pc, #288]	; (8101f30 <HAL_DMA_IRQHandler+0x1f0>)
 8101e0e:	4293      	cmp	r3, r2
 8101e10:	d101      	bne.n	8101e16 <HAL_DMA_IRQHandler+0xd6>
 8101e12:	2301      	movs	r3, #1
 8101e14:	e000      	b.n	8101e18 <HAL_DMA_IRQHandler+0xd8>
 8101e16:	2300      	movs	r3, #0
 8101e18:	2b00      	cmp	r3, #0
 8101e1a:	f000 842b 	beq.w	8102674 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8101e1e:	687b      	ldr	r3, [r7, #4]
 8101e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101e22:	f003 031f 	and.w	r3, r3, #31
 8101e26:	2208      	movs	r2, #8
 8101e28:	409a      	lsls	r2, r3
 8101e2a:	69bb      	ldr	r3, [r7, #24]
 8101e2c:	4013      	ands	r3, r2
 8101e2e:	2b00      	cmp	r3, #0
 8101e30:	f000 80a2 	beq.w	8101f78 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8101e34:	687b      	ldr	r3, [r7, #4]
 8101e36:	681b      	ldr	r3, [r3, #0]
 8101e38:	4a2e      	ldr	r2, [pc, #184]	; (8101ef4 <HAL_DMA_IRQHandler+0x1b4>)
 8101e3a:	4293      	cmp	r3, r2
 8101e3c:	d04a      	beq.n	8101ed4 <HAL_DMA_IRQHandler+0x194>
 8101e3e:	687b      	ldr	r3, [r7, #4]
 8101e40:	681b      	ldr	r3, [r3, #0]
 8101e42:	4a2d      	ldr	r2, [pc, #180]	; (8101ef8 <HAL_DMA_IRQHandler+0x1b8>)
 8101e44:	4293      	cmp	r3, r2
 8101e46:	d045      	beq.n	8101ed4 <HAL_DMA_IRQHandler+0x194>
 8101e48:	687b      	ldr	r3, [r7, #4]
 8101e4a:	681b      	ldr	r3, [r3, #0]
 8101e4c:	4a2b      	ldr	r2, [pc, #172]	; (8101efc <HAL_DMA_IRQHandler+0x1bc>)
 8101e4e:	4293      	cmp	r3, r2
 8101e50:	d040      	beq.n	8101ed4 <HAL_DMA_IRQHandler+0x194>
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	681b      	ldr	r3, [r3, #0]
 8101e56:	4a2a      	ldr	r2, [pc, #168]	; (8101f00 <HAL_DMA_IRQHandler+0x1c0>)
 8101e58:	4293      	cmp	r3, r2
 8101e5a:	d03b      	beq.n	8101ed4 <HAL_DMA_IRQHandler+0x194>
 8101e5c:	687b      	ldr	r3, [r7, #4]
 8101e5e:	681b      	ldr	r3, [r3, #0]
 8101e60:	4a28      	ldr	r2, [pc, #160]	; (8101f04 <HAL_DMA_IRQHandler+0x1c4>)
 8101e62:	4293      	cmp	r3, r2
 8101e64:	d036      	beq.n	8101ed4 <HAL_DMA_IRQHandler+0x194>
 8101e66:	687b      	ldr	r3, [r7, #4]
 8101e68:	681b      	ldr	r3, [r3, #0]
 8101e6a:	4a27      	ldr	r2, [pc, #156]	; (8101f08 <HAL_DMA_IRQHandler+0x1c8>)
 8101e6c:	4293      	cmp	r3, r2
 8101e6e:	d031      	beq.n	8101ed4 <HAL_DMA_IRQHandler+0x194>
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	681b      	ldr	r3, [r3, #0]
 8101e74:	4a25      	ldr	r2, [pc, #148]	; (8101f0c <HAL_DMA_IRQHandler+0x1cc>)
 8101e76:	4293      	cmp	r3, r2
 8101e78:	d02c      	beq.n	8101ed4 <HAL_DMA_IRQHandler+0x194>
 8101e7a:	687b      	ldr	r3, [r7, #4]
 8101e7c:	681b      	ldr	r3, [r3, #0]
 8101e7e:	4a24      	ldr	r2, [pc, #144]	; (8101f10 <HAL_DMA_IRQHandler+0x1d0>)
 8101e80:	4293      	cmp	r3, r2
 8101e82:	d027      	beq.n	8101ed4 <HAL_DMA_IRQHandler+0x194>
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	681b      	ldr	r3, [r3, #0]
 8101e88:	4a22      	ldr	r2, [pc, #136]	; (8101f14 <HAL_DMA_IRQHandler+0x1d4>)
 8101e8a:	4293      	cmp	r3, r2
 8101e8c:	d022      	beq.n	8101ed4 <HAL_DMA_IRQHandler+0x194>
 8101e8e:	687b      	ldr	r3, [r7, #4]
 8101e90:	681b      	ldr	r3, [r3, #0]
 8101e92:	4a21      	ldr	r2, [pc, #132]	; (8101f18 <HAL_DMA_IRQHandler+0x1d8>)
 8101e94:	4293      	cmp	r3, r2
 8101e96:	d01d      	beq.n	8101ed4 <HAL_DMA_IRQHandler+0x194>
 8101e98:	687b      	ldr	r3, [r7, #4]
 8101e9a:	681b      	ldr	r3, [r3, #0]
 8101e9c:	4a1f      	ldr	r2, [pc, #124]	; (8101f1c <HAL_DMA_IRQHandler+0x1dc>)
 8101e9e:	4293      	cmp	r3, r2
 8101ea0:	d018      	beq.n	8101ed4 <HAL_DMA_IRQHandler+0x194>
 8101ea2:	687b      	ldr	r3, [r7, #4]
 8101ea4:	681b      	ldr	r3, [r3, #0]
 8101ea6:	4a1e      	ldr	r2, [pc, #120]	; (8101f20 <HAL_DMA_IRQHandler+0x1e0>)
 8101ea8:	4293      	cmp	r3, r2
 8101eaa:	d013      	beq.n	8101ed4 <HAL_DMA_IRQHandler+0x194>
 8101eac:	687b      	ldr	r3, [r7, #4]
 8101eae:	681b      	ldr	r3, [r3, #0]
 8101eb0:	4a1c      	ldr	r2, [pc, #112]	; (8101f24 <HAL_DMA_IRQHandler+0x1e4>)
 8101eb2:	4293      	cmp	r3, r2
 8101eb4:	d00e      	beq.n	8101ed4 <HAL_DMA_IRQHandler+0x194>
 8101eb6:	687b      	ldr	r3, [r7, #4]
 8101eb8:	681b      	ldr	r3, [r3, #0]
 8101eba:	4a1b      	ldr	r2, [pc, #108]	; (8101f28 <HAL_DMA_IRQHandler+0x1e8>)
 8101ebc:	4293      	cmp	r3, r2
 8101ebe:	d009      	beq.n	8101ed4 <HAL_DMA_IRQHandler+0x194>
 8101ec0:	687b      	ldr	r3, [r7, #4]
 8101ec2:	681b      	ldr	r3, [r3, #0]
 8101ec4:	4a19      	ldr	r2, [pc, #100]	; (8101f2c <HAL_DMA_IRQHandler+0x1ec>)
 8101ec6:	4293      	cmp	r3, r2
 8101ec8:	d004      	beq.n	8101ed4 <HAL_DMA_IRQHandler+0x194>
 8101eca:	687b      	ldr	r3, [r7, #4]
 8101ecc:	681b      	ldr	r3, [r3, #0]
 8101ece:	4a18      	ldr	r2, [pc, #96]	; (8101f30 <HAL_DMA_IRQHandler+0x1f0>)
 8101ed0:	4293      	cmp	r3, r2
 8101ed2:	d12f      	bne.n	8101f34 <HAL_DMA_IRQHandler+0x1f4>
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	681b      	ldr	r3, [r3, #0]
 8101ed8:	681b      	ldr	r3, [r3, #0]
 8101eda:	f003 0304 	and.w	r3, r3, #4
 8101ede:	2b00      	cmp	r3, #0
 8101ee0:	bf14      	ite	ne
 8101ee2:	2301      	movne	r3, #1
 8101ee4:	2300      	moveq	r3, #0
 8101ee6:	b2db      	uxtb	r3, r3
 8101ee8:	e02e      	b.n	8101f48 <HAL_DMA_IRQHandler+0x208>
 8101eea:	bf00      	nop
 8101eec:	10000000 	.word	0x10000000
 8101ef0:	1b4e81b5 	.word	0x1b4e81b5
 8101ef4:	40020010 	.word	0x40020010
 8101ef8:	40020028 	.word	0x40020028
 8101efc:	40020040 	.word	0x40020040
 8101f00:	40020058 	.word	0x40020058
 8101f04:	40020070 	.word	0x40020070
 8101f08:	40020088 	.word	0x40020088
 8101f0c:	400200a0 	.word	0x400200a0
 8101f10:	400200b8 	.word	0x400200b8
 8101f14:	40020410 	.word	0x40020410
 8101f18:	40020428 	.word	0x40020428
 8101f1c:	40020440 	.word	0x40020440
 8101f20:	40020458 	.word	0x40020458
 8101f24:	40020470 	.word	0x40020470
 8101f28:	40020488 	.word	0x40020488
 8101f2c:	400204a0 	.word	0x400204a0
 8101f30:	400204b8 	.word	0x400204b8
 8101f34:	687b      	ldr	r3, [r7, #4]
 8101f36:	681b      	ldr	r3, [r3, #0]
 8101f38:	681b      	ldr	r3, [r3, #0]
 8101f3a:	f003 0308 	and.w	r3, r3, #8
 8101f3e:	2b00      	cmp	r3, #0
 8101f40:	bf14      	ite	ne
 8101f42:	2301      	movne	r3, #1
 8101f44:	2300      	moveq	r3, #0
 8101f46:	b2db      	uxtb	r3, r3
 8101f48:	2b00      	cmp	r3, #0
 8101f4a:	d015      	beq.n	8101f78 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8101f4c:	687b      	ldr	r3, [r7, #4]
 8101f4e:	681b      	ldr	r3, [r3, #0]
 8101f50:	681a      	ldr	r2, [r3, #0]
 8101f52:	687b      	ldr	r3, [r7, #4]
 8101f54:	681b      	ldr	r3, [r3, #0]
 8101f56:	f022 0204 	bic.w	r2, r2, #4
 8101f5a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8101f5c:	687b      	ldr	r3, [r7, #4]
 8101f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101f60:	f003 031f 	and.w	r3, r3, #31
 8101f64:	2208      	movs	r2, #8
 8101f66:	409a      	lsls	r2, r3
 8101f68:	6a3b      	ldr	r3, [r7, #32]
 8101f6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101f70:	f043 0201 	orr.w	r2, r3, #1
 8101f74:	687b      	ldr	r3, [r7, #4]
 8101f76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8101f78:	687b      	ldr	r3, [r7, #4]
 8101f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101f7c:	f003 031f 	and.w	r3, r3, #31
 8101f80:	69ba      	ldr	r2, [r7, #24]
 8101f82:	fa22 f303 	lsr.w	r3, r2, r3
 8101f86:	f003 0301 	and.w	r3, r3, #1
 8101f8a:	2b00      	cmp	r3, #0
 8101f8c:	d06e      	beq.n	810206c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8101f8e:	687b      	ldr	r3, [r7, #4]
 8101f90:	681b      	ldr	r3, [r3, #0]
 8101f92:	4a69      	ldr	r2, [pc, #420]	; (8102138 <HAL_DMA_IRQHandler+0x3f8>)
 8101f94:	4293      	cmp	r3, r2
 8101f96:	d04a      	beq.n	810202e <HAL_DMA_IRQHandler+0x2ee>
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	681b      	ldr	r3, [r3, #0]
 8101f9c:	4a67      	ldr	r2, [pc, #412]	; (810213c <HAL_DMA_IRQHandler+0x3fc>)
 8101f9e:	4293      	cmp	r3, r2
 8101fa0:	d045      	beq.n	810202e <HAL_DMA_IRQHandler+0x2ee>
 8101fa2:	687b      	ldr	r3, [r7, #4]
 8101fa4:	681b      	ldr	r3, [r3, #0]
 8101fa6:	4a66      	ldr	r2, [pc, #408]	; (8102140 <HAL_DMA_IRQHandler+0x400>)
 8101fa8:	4293      	cmp	r3, r2
 8101faa:	d040      	beq.n	810202e <HAL_DMA_IRQHandler+0x2ee>
 8101fac:	687b      	ldr	r3, [r7, #4]
 8101fae:	681b      	ldr	r3, [r3, #0]
 8101fb0:	4a64      	ldr	r2, [pc, #400]	; (8102144 <HAL_DMA_IRQHandler+0x404>)
 8101fb2:	4293      	cmp	r3, r2
 8101fb4:	d03b      	beq.n	810202e <HAL_DMA_IRQHandler+0x2ee>
 8101fb6:	687b      	ldr	r3, [r7, #4]
 8101fb8:	681b      	ldr	r3, [r3, #0]
 8101fba:	4a63      	ldr	r2, [pc, #396]	; (8102148 <HAL_DMA_IRQHandler+0x408>)
 8101fbc:	4293      	cmp	r3, r2
 8101fbe:	d036      	beq.n	810202e <HAL_DMA_IRQHandler+0x2ee>
 8101fc0:	687b      	ldr	r3, [r7, #4]
 8101fc2:	681b      	ldr	r3, [r3, #0]
 8101fc4:	4a61      	ldr	r2, [pc, #388]	; (810214c <HAL_DMA_IRQHandler+0x40c>)
 8101fc6:	4293      	cmp	r3, r2
 8101fc8:	d031      	beq.n	810202e <HAL_DMA_IRQHandler+0x2ee>
 8101fca:	687b      	ldr	r3, [r7, #4]
 8101fcc:	681b      	ldr	r3, [r3, #0]
 8101fce:	4a60      	ldr	r2, [pc, #384]	; (8102150 <HAL_DMA_IRQHandler+0x410>)
 8101fd0:	4293      	cmp	r3, r2
 8101fd2:	d02c      	beq.n	810202e <HAL_DMA_IRQHandler+0x2ee>
 8101fd4:	687b      	ldr	r3, [r7, #4]
 8101fd6:	681b      	ldr	r3, [r3, #0]
 8101fd8:	4a5e      	ldr	r2, [pc, #376]	; (8102154 <HAL_DMA_IRQHandler+0x414>)
 8101fda:	4293      	cmp	r3, r2
 8101fdc:	d027      	beq.n	810202e <HAL_DMA_IRQHandler+0x2ee>
 8101fde:	687b      	ldr	r3, [r7, #4]
 8101fe0:	681b      	ldr	r3, [r3, #0]
 8101fe2:	4a5d      	ldr	r2, [pc, #372]	; (8102158 <HAL_DMA_IRQHandler+0x418>)
 8101fe4:	4293      	cmp	r3, r2
 8101fe6:	d022      	beq.n	810202e <HAL_DMA_IRQHandler+0x2ee>
 8101fe8:	687b      	ldr	r3, [r7, #4]
 8101fea:	681b      	ldr	r3, [r3, #0]
 8101fec:	4a5b      	ldr	r2, [pc, #364]	; (810215c <HAL_DMA_IRQHandler+0x41c>)
 8101fee:	4293      	cmp	r3, r2
 8101ff0:	d01d      	beq.n	810202e <HAL_DMA_IRQHandler+0x2ee>
 8101ff2:	687b      	ldr	r3, [r7, #4]
 8101ff4:	681b      	ldr	r3, [r3, #0]
 8101ff6:	4a5a      	ldr	r2, [pc, #360]	; (8102160 <HAL_DMA_IRQHandler+0x420>)
 8101ff8:	4293      	cmp	r3, r2
 8101ffa:	d018      	beq.n	810202e <HAL_DMA_IRQHandler+0x2ee>
 8101ffc:	687b      	ldr	r3, [r7, #4]
 8101ffe:	681b      	ldr	r3, [r3, #0]
 8102000:	4a58      	ldr	r2, [pc, #352]	; (8102164 <HAL_DMA_IRQHandler+0x424>)
 8102002:	4293      	cmp	r3, r2
 8102004:	d013      	beq.n	810202e <HAL_DMA_IRQHandler+0x2ee>
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	681b      	ldr	r3, [r3, #0]
 810200a:	4a57      	ldr	r2, [pc, #348]	; (8102168 <HAL_DMA_IRQHandler+0x428>)
 810200c:	4293      	cmp	r3, r2
 810200e:	d00e      	beq.n	810202e <HAL_DMA_IRQHandler+0x2ee>
 8102010:	687b      	ldr	r3, [r7, #4]
 8102012:	681b      	ldr	r3, [r3, #0]
 8102014:	4a55      	ldr	r2, [pc, #340]	; (810216c <HAL_DMA_IRQHandler+0x42c>)
 8102016:	4293      	cmp	r3, r2
 8102018:	d009      	beq.n	810202e <HAL_DMA_IRQHandler+0x2ee>
 810201a:	687b      	ldr	r3, [r7, #4]
 810201c:	681b      	ldr	r3, [r3, #0]
 810201e:	4a54      	ldr	r2, [pc, #336]	; (8102170 <HAL_DMA_IRQHandler+0x430>)
 8102020:	4293      	cmp	r3, r2
 8102022:	d004      	beq.n	810202e <HAL_DMA_IRQHandler+0x2ee>
 8102024:	687b      	ldr	r3, [r7, #4]
 8102026:	681b      	ldr	r3, [r3, #0]
 8102028:	4a52      	ldr	r2, [pc, #328]	; (8102174 <HAL_DMA_IRQHandler+0x434>)
 810202a:	4293      	cmp	r3, r2
 810202c:	d10a      	bne.n	8102044 <HAL_DMA_IRQHandler+0x304>
 810202e:	687b      	ldr	r3, [r7, #4]
 8102030:	681b      	ldr	r3, [r3, #0]
 8102032:	695b      	ldr	r3, [r3, #20]
 8102034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102038:	2b00      	cmp	r3, #0
 810203a:	bf14      	ite	ne
 810203c:	2301      	movne	r3, #1
 810203e:	2300      	moveq	r3, #0
 8102040:	b2db      	uxtb	r3, r3
 8102042:	e003      	b.n	810204c <HAL_DMA_IRQHandler+0x30c>
 8102044:	687b      	ldr	r3, [r7, #4]
 8102046:	681b      	ldr	r3, [r3, #0]
 8102048:	681b      	ldr	r3, [r3, #0]
 810204a:	2300      	movs	r3, #0
 810204c:	2b00      	cmp	r3, #0
 810204e:	d00d      	beq.n	810206c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102050:	687b      	ldr	r3, [r7, #4]
 8102052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102054:	f003 031f 	and.w	r3, r3, #31
 8102058:	2201      	movs	r2, #1
 810205a:	409a      	lsls	r2, r3
 810205c:	6a3b      	ldr	r3, [r7, #32]
 810205e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102064:	f043 0202 	orr.w	r2, r3, #2
 8102068:	687b      	ldr	r3, [r7, #4]
 810206a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102070:	f003 031f 	and.w	r3, r3, #31
 8102074:	2204      	movs	r2, #4
 8102076:	409a      	lsls	r2, r3
 8102078:	69bb      	ldr	r3, [r7, #24]
 810207a:	4013      	ands	r3, r2
 810207c:	2b00      	cmp	r3, #0
 810207e:	f000 808f 	beq.w	81021a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8102082:	687b      	ldr	r3, [r7, #4]
 8102084:	681b      	ldr	r3, [r3, #0]
 8102086:	4a2c      	ldr	r2, [pc, #176]	; (8102138 <HAL_DMA_IRQHandler+0x3f8>)
 8102088:	4293      	cmp	r3, r2
 810208a:	d04a      	beq.n	8102122 <HAL_DMA_IRQHandler+0x3e2>
 810208c:	687b      	ldr	r3, [r7, #4]
 810208e:	681b      	ldr	r3, [r3, #0]
 8102090:	4a2a      	ldr	r2, [pc, #168]	; (810213c <HAL_DMA_IRQHandler+0x3fc>)
 8102092:	4293      	cmp	r3, r2
 8102094:	d045      	beq.n	8102122 <HAL_DMA_IRQHandler+0x3e2>
 8102096:	687b      	ldr	r3, [r7, #4]
 8102098:	681b      	ldr	r3, [r3, #0]
 810209a:	4a29      	ldr	r2, [pc, #164]	; (8102140 <HAL_DMA_IRQHandler+0x400>)
 810209c:	4293      	cmp	r3, r2
 810209e:	d040      	beq.n	8102122 <HAL_DMA_IRQHandler+0x3e2>
 81020a0:	687b      	ldr	r3, [r7, #4]
 81020a2:	681b      	ldr	r3, [r3, #0]
 81020a4:	4a27      	ldr	r2, [pc, #156]	; (8102144 <HAL_DMA_IRQHandler+0x404>)
 81020a6:	4293      	cmp	r3, r2
 81020a8:	d03b      	beq.n	8102122 <HAL_DMA_IRQHandler+0x3e2>
 81020aa:	687b      	ldr	r3, [r7, #4]
 81020ac:	681b      	ldr	r3, [r3, #0]
 81020ae:	4a26      	ldr	r2, [pc, #152]	; (8102148 <HAL_DMA_IRQHandler+0x408>)
 81020b0:	4293      	cmp	r3, r2
 81020b2:	d036      	beq.n	8102122 <HAL_DMA_IRQHandler+0x3e2>
 81020b4:	687b      	ldr	r3, [r7, #4]
 81020b6:	681b      	ldr	r3, [r3, #0]
 81020b8:	4a24      	ldr	r2, [pc, #144]	; (810214c <HAL_DMA_IRQHandler+0x40c>)
 81020ba:	4293      	cmp	r3, r2
 81020bc:	d031      	beq.n	8102122 <HAL_DMA_IRQHandler+0x3e2>
 81020be:	687b      	ldr	r3, [r7, #4]
 81020c0:	681b      	ldr	r3, [r3, #0]
 81020c2:	4a23      	ldr	r2, [pc, #140]	; (8102150 <HAL_DMA_IRQHandler+0x410>)
 81020c4:	4293      	cmp	r3, r2
 81020c6:	d02c      	beq.n	8102122 <HAL_DMA_IRQHandler+0x3e2>
 81020c8:	687b      	ldr	r3, [r7, #4]
 81020ca:	681b      	ldr	r3, [r3, #0]
 81020cc:	4a21      	ldr	r2, [pc, #132]	; (8102154 <HAL_DMA_IRQHandler+0x414>)
 81020ce:	4293      	cmp	r3, r2
 81020d0:	d027      	beq.n	8102122 <HAL_DMA_IRQHandler+0x3e2>
 81020d2:	687b      	ldr	r3, [r7, #4]
 81020d4:	681b      	ldr	r3, [r3, #0]
 81020d6:	4a20      	ldr	r2, [pc, #128]	; (8102158 <HAL_DMA_IRQHandler+0x418>)
 81020d8:	4293      	cmp	r3, r2
 81020da:	d022      	beq.n	8102122 <HAL_DMA_IRQHandler+0x3e2>
 81020dc:	687b      	ldr	r3, [r7, #4]
 81020de:	681b      	ldr	r3, [r3, #0]
 81020e0:	4a1e      	ldr	r2, [pc, #120]	; (810215c <HAL_DMA_IRQHandler+0x41c>)
 81020e2:	4293      	cmp	r3, r2
 81020e4:	d01d      	beq.n	8102122 <HAL_DMA_IRQHandler+0x3e2>
 81020e6:	687b      	ldr	r3, [r7, #4]
 81020e8:	681b      	ldr	r3, [r3, #0]
 81020ea:	4a1d      	ldr	r2, [pc, #116]	; (8102160 <HAL_DMA_IRQHandler+0x420>)
 81020ec:	4293      	cmp	r3, r2
 81020ee:	d018      	beq.n	8102122 <HAL_DMA_IRQHandler+0x3e2>
 81020f0:	687b      	ldr	r3, [r7, #4]
 81020f2:	681b      	ldr	r3, [r3, #0]
 81020f4:	4a1b      	ldr	r2, [pc, #108]	; (8102164 <HAL_DMA_IRQHandler+0x424>)
 81020f6:	4293      	cmp	r3, r2
 81020f8:	d013      	beq.n	8102122 <HAL_DMA_IRQHandler+0x3e2>
 81020fa:	687b      	ldr	r3, [r7, #4]
 81020fc:	681b      	ldr	r3, [r3, #0]
 81020fe:	4a1a      	ldr	r2, [pc, #104]	; (8102168 <HAL_DMA_IRQHandler+0x428>)
 8102100:	4293      	cmp	r3, r2
 8102102:	d00e      	beq.n	8102122 <HAL_DMA_IRQHandler+0x3e2>
 8102104:	687b      	ldr	r3, [r7, #4]
 8102106:	681b      	ldr	r3, [r3, #0]
 8102108:	4a18      	ldr	r2, [pc, #96]	; (810216c <HAL_DMA_IRQHandler+0x42c>)
 810210a:	4293      	cmp	r3, r2
 810210c:	d009      	beq.n	8102122 <HAL_DMA_IRQHandler+0x3e2>
 810210e:	687b      	ldr	r3, [r7, #4]
 8102110:	681b      	ldr	r3, [r3, #0]
 8102112:	4a17      	ldr	r2, [pc, #92]	; (8102170 <HAL_DMA_IRQHandler+0x430>)
 8102114:	4293      	cmp	r3, r2
 8102116:	d004      	beq.n	8102122 <HAL_DMA_IRQHandler+0x3e2>
 8102118:	687b      	ldr	r3, [r7, #4]
 810211a:	681b      	ldr	r3, [r3, #0]
 810211c:	4a15      	ldr	r2, [pc, #84]	; (8102174 <HAL_DMA_IRQHandler+0x434>)
 810211e:	4293      	cmp	r3, r2
 8102120:	d12a      	bne.n	8102178 <HAL_DMA_IRQHandler+0x438>
 8102122:	687b      	ldr	r3, [r7, #4]
 8102124:	681b      	ldr	r3, [r3, #0]
 8102126:	681b      	ldr	r3, [r3, #0]
 8102128:	f003 0302 	and.w	r3, r3, #2
 810212c:	2b00      	cmp	r3, #0
 810212e:	bf14      	ite	ne
 8102130:	2301      	movne	r3, #1
 8102132:	2300      	moveq	r3, #0
 8102134:	b2db      	uxtb	r3, r3
 8102136:	e023      	b.n	8102180 <HAL_DMA_IRQHandler+0x440>
 8102138:	40020010 	.word	0x40020010
 810213c:	40020028 	.word	0x40020028
 8102140:	40020040 	.word	0x40020040
 8102144:	40020058 	.word	0x40020058
 8102148:	40020070 	.word	0x40020070
 810214c:	40020088 	.word	0x40020088
 8102150:	400200a0 	.word	0x400200a0
 8102154:	400200b8 	.word	0x400200b8
 8102158:	40020410 	.word	0x40020410
 810215c:	40020428 	.word	0x40020428
 8102160:	40020440 	.word	0x40020440
 8102164:	40020458 	.word	0x40020458
 8102168:	40020470 	.word	0x40020470
 810216c:	40020488 	.word	0x40020488
 8102170:	400204a0 	.word	0x400204a0
 8102174:	400204b8 	.word	0x400204b8
 8102178:	687b      	ldr	r3, [r7, #4]
 810217a:	681b      	ldr	r3, [r3, #0]
 810217c:	681b      	ldr	r3, [r3, #0]
 810217e:	2300      	movs	r3, #0
 8102180:	2b00      	cmp	r3, #0
 8102182:	d00d      	beq.n	81021a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102184:	687b      	ldr	r3, [r7, #4]
 8102186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102188:	f003 031f 	and.w	r3, r3, #31
 810218c:	2204      	movs	r2, #4
 810218e:	409a      	lsls	r2, r3
 8102190:	6a3b      	ldr	r3, [r7, #32]
 8102192:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8102194:	687b      	ldr	r3, [r7, #4]
 8102196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102198:	f043 0204 	orr.w	r2, r3, #4
 810219c:	687b      	ldr	r3, [r7, #4]
 810219e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81021a0:	687b      	ldr	r3, [r7, #4]
 81021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81021a4:	f003 031f 	and.w	r3, r3, #31
 81021a8:	2210      	movs	r2, #16
 81021aa:	409a      	lsls	r2, r3
 81021ac:	69bb      	ldr	r3, [r7, #24]
 81021ae:	4013      	ands	r3, r2
 81021b0:	2b00      	cmp	r3, #0
 81021b2:	f000 80a6 	beq.w	8102302 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 81021b6:	687b      	ldr	r3, [r7, #4]
 81021b8:	681b      	ldr	r3, [r3, #0]
 81021ba:	4a85      	ldr	r2, [pc, #532]	; (81023d0 <HAL_DMA_IRQHandler+0x690>)
 81021bc:	4293      	cmp	r3, r2
 81021be:	d04a      	beq.n	8102256 <HAL_DMA_IRQHandler+0x516>
 81021c0:	687b      	ldr	r3, [r7, #4]
 81021c2:	681b      	ldr	r3, [r3, #0]
 81021c4:	4a83      	ldr	r2, [pc, #524]	; (81023d4 <HAL_DMA_IRQHandler+0x694>)
 81021c6:	4293      	cmp	r3, r2
 81021c8:	d045      	beq.n	8102256 <HAL_DMA_IRQHandler+0x516>
 81021ca:	687b      	ldr	r3, [r7, #4]
 81021cc:	681b      	ldr	r3, [r3, #0]
 81021ce:	4a82      	ldr	r2, [pc, #520]	; (81023d8 <HAL_DMA_IRQHandler+0x698>)
 81021d0:	4293      	cmp	r3, r2
 81021d2:	d040      	beq.n	8102256 <HAL_DMA_IRQHandler+0x516>
 81021d4:	687b      	ldr	r3, [r7, #4]
 81021d6:	681b      	ldr	r3, [r3, #0]
 81021d8:	4a80      	ldr	r2, [pc, #512]	; (81023dc <HAL_DMA_IRQHandler+0x69c>)
 81021da:	4293      	cmp	r3, r2
 81021dc:	d03b      	beq.n	8102256 <HAL_DMA_IRQHandler+0x516>
 81021de:	687b      	ldr	r3, [r7, #4]
 81021e0:	681b      	ldr	r3, [r3, #0]
 81021e2:	4a7f      	ldr	r2, [pc, #508]	; (81023e0 <HAL_DMA_IRQHandler+0x6a0>)
 81021e4:	4293      	cmp	r3, r2
 81021e6:	d036      	beq.n	8102256 <HAL_DMA_IRQHandler+0x516>
 81021e8:	687b      	ldr	r3, [r7, #4]
 81021ea:	681b      	ldr	r3, [r3, #0]
 81021ec:	4a7d      	ldr	r2, [pc, #500]	; (81023e4 <HAL_DMA_IRQHandler+0x6a4>)
 81021ee:	4293      	cmp	r3, r2
 81021f0:	d031      	beq.n	8102256 <HAL_DMA_IRQHandler+0x516>
 81021f2:	687b      	ldr	r3, [r7, #4]
 81021f4:	681b      	ldr	r3, [r3, #0]
 81021f6:	4a7c      	ldr	r2, [pc, #496]	; (81023e8 <HAL_DMA_IRQHandler+0x6a8>)
 81021f8:	4293      	cmp	r3, r2
 81021fa:	d02c      	beq.n	8102256 <HAL_DMA_IRQHandler+0x516>
 81021fc:	687b      	ldr	r3, [r7, #4]
 81021fe:	681b      	ldr	r3, [r3, #0]
 8102200:	4a7a      	ldr	r2, [pc, #488]	; (81023ec <HAL_DMA_IRQHandler+0x6ac>)
 8102202:	4293      	cmp	r3, r2
 8102204:	d027      	beq.n	8102256 <HAL_DMA_IRQHandler+0x516>
 8102206:	687b      	ldr	r3, [r7, #4]
 8102208:	681b      	ldr	r3, [r3, #0]
 810220a:	4a79      	ldr	r2, [pc, #484]	; (81023f0 <HAL_DMA_IRQHandler+0x6b0>)
 810220c:	4293      	cmp	r3, r2
 810220e:	d022      	beq.n	8102256 <HAL_DMA_IRQHandler+0x516>
 8102210:	687b      	ldr	r3, [r7, #4]
 8102212:	681b      	ldr	r3, [r3, #0]
 8102214:	4a77      	ldr	r2, [pc, #476]	; (81023f4 <HAL_DMA_IRQHandler+0x6b4>)
 8102216:	4293      	cmp	r3, r2
 8102218:	d01d      	beq.n	8102256 <HAL_DMA_IRQHandler+0x516>
 810221a:	687b      	ldr	r3, [r7, #4]
 810221c:	681b      	ldr	r3, [r3, #0]
 810221e:	4a76      	ldr	r2, [pc, #472]	; (81023f8 <HAL_DMA_IRQHandler+0x6b8>)
 8102220:	4293      	cmp	r3, r2
 8102222:	d018      	beq.n	8102256 <HAL_DMA_IRQHandler+0x516>
 8102224:	687b      	ldr	r3, [r7, #4]
 8102226:	681b      	ldr	r3, [r3, #0]
 8102228:	4a74      	ldr	r2, [pc, #464]	; (81023fc <HAL_DMA_IRQHandler+0x6bc>)
 810222a:	4293      	cmp	r3, r2
 810222c:	d013      	beq.n	8102256 <HAL_DMA_IRQHandler+0x516>
 810222e:	687b      	ldr	r3, [r7, #4]
 8102230:	681b      	ldr	r3, [r3, #0]
 8102232:	4a73      	ldr	r2, [pc, #460]	; (8102400 <HAL_DMA_IRQHandler+0x6c0>)
 8102234:	4293      	cmp	r3, r2
 8102236:	d00e      	beq.n	8102256 <HAL_DMA_IRQHandler+0x516>
 8102238:	687b      	ldr	r3, [r7, #4]
 810223a:	681b      	ldr	r3, [r3, #0]
 810223c:	4a71      	ldr	r2, [pc, #452]	; (8102404 <HAL_DMA_IRQHandler+0x6c4>)
 810223e:	4293      	cmp	r3, r2
 8102240:	d009      	beq.n	8102256 <HAL_DMA_IRQHandler+0x516>
 8102242:	687b      	ldr	r3, [r7, #4]
 8102244:	681b      	ldr	r3, [r3, #0]
 8102246:	4a70      	ldr	r2, [pc, #448]	; (8102408 <HAL_DMA_IRQHandler+0x6c8>)
 8102248:	4293      	cmp	r3, r2
 810224a:	d004      	beq.n	8102256 <HAL_DMA_IRQHandler+0x516>
 810224c:	687b      	ldr	r3, [r7, #4]
 810224e:	681b      	ldr	r3, [r3, #0]
 8102250:	4a6e      	ldr	r2, [pc, #440]	; (810240c <HAL_DMA_IRQHandler+0x6cc>)
 8102252:	4293      	cmp	r3, r2
 8102254:	d10a      	bne.n	810226c <HAL_DMA_IRQHandler+0x52c>
 8102256:	687b      	ldr	r3, [r7, #4]
 8102258:	681b      	ldr	r3, [r3, #0]
 810225a:	681b      	ldr	r3, [r3, #0]
 810225c:	f003 0308 	and.w	r3, r3, #8
 8102260:	2b00      	cmp	r3, #0
 8102262:	bf14      	ite	ne
 8102264:	2301      	movne	r3, #1
 8102266:	2300      	moveq	r3, #0
 8102268:	b2db      	uxtb	r3, r3
 810226a:	e009      	b.n	8102280 <HAL_DMA_IRQHandler+0x540>
 810226c:	687b      	ldr	r3, [r7, #4]
 810226e:	681b      	ldr	r3, [r3, #0]
 8102270:	681b      	ldr	r3, [r3, #0]
 8102272:	f003 0304 	and.w	r3, r3, #4
 8102276:	2b00      	cmp	r3, #0
 8102278:	bf14      	ite	ne
 810227a:	2301      	movne	r3, #1
 810227c:	2300      	moveq	r3, #0
 810227e:	b2db      	uxtb	r3, r3
 8102280:	2b00      	cmp	r3, #0
 8102282:	d03e      	beq.n	8102302 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102284:	687b      	ldr	r3, [r7, #4]
 8102286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102288:	f003 031f 	and.w	r3, r3, #31
 810228c:	2210      	movs	r2, #16
 810228e:	409a      	lsls	r2, r3
 8102290:	6a3b      	ldr	r3, [r7, #32]
 8102292:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8102294:	687b      	ldr	r3, [r7, #4]
 8102296:	681b      	ldr	r3, [r3, #0]
 8102298:	681b      	ldr	r3, [r3, #0]
 810229a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810229e:	2b00      	cmp	r3, #0
 81022a0:	d018      	beq.n	81022d4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81022a2:	687b      	ldr	r3, [r7, #4]
 81022a4:	681b      	ldr	r3, [r3, #0]
 81022a6:	681b      	ldr	r3, [r3, #0]
 81022a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81022ac:	2b00      	cmp	r3, #0
 81022ae:	d108      	bne.n	81022c2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 81022b0:	687b      	ldr	r3, [r7, #4]
 81022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81022b4:	2b00      	cmp	r3, #0
 81022b6:	d024      	beq.n	8102302 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 81022b8:	687b      	ldr	r3, [r7, #4]
 81022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81022bc:	6878      	ldr	r0, [r7, #4]
 81022be:	4798      	blx	r3
 81022c0:	e01f      	b.n	8102302 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 81022c2:	687b      	ldr	r3, [r7, #4]
 81022c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81022c6:	2b00      	cmp	r3, #0
 81022c8:	d01b      	beq.n	8102302 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 81022ca:	687b      	ldr	r3, [r7, #4]
 81022cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81022ce:	6878      	ldr	r0, [r7, #4]
 81022d0:	4798      	blx	r3
 81022d2:	e016      	b.n	8102302 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81022d4:	687b      	ldr	r3, [r7, #4]
 81022d6:	681b      	ldr	r3, [r3, #0]
 81022d8:	681b      	ldr	r3, [r3, #0]
 81022da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81022de:	2b00      	cmp	r3, #0
 81022e0:	d107      	bne.n	81022f2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81022e2:	687b      	ldr	r3, [r7, #4]
 81022e4:	681b      	ldr	r3, [r3, #0]
 81022e6:	681a      	ldr	r2, [r3, #0]
 81022e8:	687b      	ldr	r3, [r7, #4]
 81022ea:	681b      	ldr	r3, [r3, #0]
 81022ec:	f022 0208 	bic.w	r2, r2, #8
 81022f0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 81022f2:	687b      	ldr	r3, [r7, #4]
 81022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81022f6:	2b00      	cmp	r3, #0
 81022f8:	d003      	beq.n	8102302 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 81022fa:	687b      	ldr	r3, [r7, #4]
 81022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81022fe:	6878      	ldr	r0, [r7, #4]
 8102300:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102302:	687b      	ldr	r3, [r7, #4]
 8102304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102306:	f003 031f 	and.w	r3, r3, #31
 810230a:	2220      	movs	r2, #32
 810230c:	409a      	lsls	r2, r3
 810230e:	69bb      	ldr	r3, [r7, #24]
 8102310:	4013      	ands	r3, r2
 8102312:	2b00      	cmp	r3, #0
 8102314:	f000 8110 	beq.w	8102538 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8102318:	687b      	ldr	r3, [r7, #4]
 810231a:	681b      	ldr	r3, [r3, #0]
 810231c:	4a2c      	ldr	r2, [pc, #176]	; (81023d0 <HAL_DMA_IRQHandler+0x690>)
 810231e:	4293      	cmp	r3, r2
 8102320:	d04a      	beq.n	81023b8 <HAL_DMA_IRQHandler+0x678>
 8102322:	687b      	ldr	r3, [r7, #4]
 8102324:	681b      	ldr	r3, [r3, #0]
 8102326:	4a2b      	ldr	r2, [pc, #172]	; (81023d4 <HAL_DMA_IRQHandler+0x694>)
 8102328:	4293      	cmp	r3, r2
 810232a:	d045      	beq.n	81023b8 <HAL_DMA_IRQHandler+0x678>
 810232c:	687b      	ldr	r3, [r7, #4]
 810232e:	681b      	ldr	r3, [r3, #0]
 8102330:	4a29      	ldr	r2, [pc, #164]	; (81023d8 <HAL_DMA_IRQHandler+0x698>)
 8102332:	4293      	cmp	r3, r2
 8102334:	d040      	beq.n	81023b8 <HAL_DMA_IRQHandler+0x678>
 8102336:	687b      	ldr	r3, [r7, #4]
 8102338:	681b      	ldr	r3, [r3, #0]
 810233a:	4a28      	ldr	r2, [pc, #160]	; (81023dc <HAL_DMA_IRQHandler+0x69c>)
 810233c:	4293      	cmp	r3, r2
 810233e:	d03b      	beq.n	81023b8 <HAL_DMA_IRQHandler+0x678>
 8102340:	687b      	ldr	r3, [r7, #4]
 8102342:	681b      	ldr	r3, [r3, #0]
 8102344:	4a26      	ldr	r2, [pc, #152]	; (81023e0 <HAL_DMA_IRQHandler+0x6a0>)
 8102346:	4293      	cmp	r3, r2
 8102348:	d036      	beq.n	81023b8 <HAL_DMA_IRQHandler+0x678>
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	681b      	ldr	r3, [r3, #0]
 810234e:	4a25      	ldr	r2, [pc, #148]	; (81023e4 <HAL_DMA_IRQHandler+0x6a4>)
 8102350:	4293      	cmp	r3, r2
 8102352:	d031      	beq.n	81023b8 <HAL_DMA_IRQHandler+0x678>
 8102354:	687b      	ldr	r3, [r7, #4]
 8102356:	681b      	ldr	r3, [r3, #0]
 8102358:	4a23      	ldr	r2, [pc, #140]	; (81023e8 <HAL_DMA_IRQHandler+0x6a8>)
 810235a:	4293      	cmp	r3, r2
 810235c:	d02c      	beq.n	81023b8 <HAL_DMA_IRQHandler+0x678>
 810235e:	687b      	ldr	r3, [r7, #4]
 8102360:	681b      	ldr	r3, [r3, #0]
 8102362:	4a22      	ldr	r2, [pc, #136]	; (81023ec <HAL_DMA_IRQHandler+0x6ac>)
 8102364:	4293      	cmp	r3, r2
 8102366:	d027      	beq.n	81023b8 <HAL_DMA_IRQHandler+0x678>
 8102368:	687b      	ldr	r3, [r7, #4]
 810236a:	681b      	ldr	r3, [r3, #0]
 810236c:	4a20      	ldr	r2, [pc, #128]	; (81023f0 <HAL_DMA_IRQHandler+0x6b0>)
 810236e:	4293      	cmp	r3, r2
 8102370:	d022      	beq.n	81023b8 <HAL_DMA_IRQHandler+0x678>
 8102372:	687b      	ldr	r3, [r7, #4]
 8102374:	681b      	ldr	r3, [r3, #0]
 8102376:	4a1f      	ldr	r2, [pc, #124]	; (81023f4 <HAL_DMA_IRQHandler+0x6b4>)
 8102378:	4293      	cmp	r3, r2
 810237a:	d01d      	beq.n	81023b8 <HAL_DMA_IRQHandler+0x678>
 810237c:	687b      	ldr	r3, [r7, #4]
 810237e:	681b      	ldr	r3, [r3, #0]
 8102380:	4a1d      	ldr	r2, [pc, #116]	; (81023f8 <HAL_DMA_IRQHandler+0x6b8>)
 8102382:	4293      	cmp	r3, r2
 8102384:	d018      	beq.n	81023b8 <HAL_DMA_IRQHandler+0x678>
 8102386:	687b      	ldr	r3, [r7, #4]
 8102388:	681b      	ldr	r3, [r3, #0]
 810238a:	4a1c      	ldr	r2, [pc, #112]	; (81023fc <HAL_DMA_IRQHandler+0x6bc>)
 810238c:	4293      	cmp	r3, r2
 810238e:	d013      	beq.n	81023b8 <HAL_DMA_IRQHandler+0x678>
 8102390:	687b      	ldr	r3, [r7, #4]
 8102392:	681b      	ldr	r3, [r3, #0]
 8102394:	4a1a      	ldr	r2, [pc, #104]	; (8102400 <HAL_DMA_IRQHandler+0x6c0>)
 8102396:	4293      	cmp	r3, r2
 8102398:	d00e      	beq.n	81023b8 <HAL_DMA_IRQHandler+0x678>
 810239a:	687b      	ldr	r3, [r7, #4]
 810239c:	681b      	ldr	r3, [r3, #0]
 810239e:	4a19      	ldr	r2, [pc, #100]	; (8102404 <HAL_DMA_IRQHandler+0x6c4>)
 81023a0:	4293      	cmp	r3, r2
 81023a2:	d009      	beq.n	81023b8 <HAL_DMA_IRQHandler+0x678>
 81023a4:	687b      	ldr	r3, [r7, #4]
 81023a6:	681b      	ldr	r3, [r3, #0]
 81023a8:	4a17      	ldr	r2, [pc, #92]	; (8102408 <HAL_DMA_IRQHandler+0x6c8>)
 81023aa:	4293      	cmp	r3, r2
 81023ac:	d004      	beq.n	81023b8 <HAL_DMA_IRQHandler+0x678>
 81023ae:	687b      	ldr	r3, [r7, #4]
 81023b0:	681b      	ldr	r3, [r3, #0]
 81023b2:	4a16      	ldr	r2, [pc, #88]	; (810240c <HAL_DMA_IRQHandler+0x6cc>)
 81023b4:	4293      	cmp	r3, r2
 81023b6:	d12b      	bne.n	8102410 <HAL_DMA_IRQHandler+0x6d0>
 81023b8:	687b      	ldr	r3, [r7, #4]
 81023ba:	681b      	ldr	r3, [r3, #0]
 81023bc:	681b      	ldr	r3, [r3, #0]
 81023be:	f003 0310 	and.w	r3, r3, #16
 81023c2:	2b00      	cmp	r3, #0
 81023c4:	bf14      	ite	ne
 81023c6:	2301      	movne	r3, #1
 81023c8:	2300      	moveq	r3, #0
 81023ca:	b2db      	uxtb	r3, r3
 81023cc:	e02a      	b.n	8102424 <HAL_DMA_IRQHandler+0x6e4>
 81023ce:	bf00      	nop
 81023d0:	40020010 	.word	0x40020010
 81023d4:	40020028 	.word	0x40020028
 81023d8:	40020040 	.word	0x40020040
 81023dc:	40020058 	.word	0x40020058
 81023e0:	40020070 	.word	0x40020070
 81023e4:	40020088 	.word	0x40020088
 81023e8:	400200a0 	.word	0x400200a0
 81023ec:	400200b8 	.word	0x400200b8
 81023f0:	40020410 	.word	0x40020410
 81023f4:	40020428 	.word	0x40020428
 81023f8:	40020440 	.word	0x40020440
 81023fc:	40020458 	.word	0x40020458
 8102400:	40020470 	.word	0x40020470
 8102404:	40020488 	.word	0x40020488
 8102408:	400204a0 	.word	0x400204a0
 810240c:	400204b8 	.word	0x400204b8
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	681b      	ldr	r3, [r3, #0]
 8102414:	681b      	ldr	r3, [r3, #0]
 8102416:	f003 0302 	and.w	r3, r3, #2
 810241a:	2b00      	cmp	r3, #0
 810241c:	bf14      	ite	ne
 810241e:	2301      	movne	r3, #1
 8102420:	2300      	moveq	r3, #0
 8102422:	b2db      	uxtb	r3, r3
 8102424:	2b00      	cmp	r3, #0
 8102426:	f000 8087 	beq.w	8102538 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 810242a:	687b      	ldr	r3, [r7, #4]
 810242c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810242e:	f003 031f 	and.w	r3, r3, #31
 8102432:	2220      	movs	r2, #32
 8102434:	409a      	lsls	r2, r3
 8102436:	6a3b      	ldr	r3, [r7, #32]
 8102438:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102440:	b2db      	uxtb	r3, r3
 8102442:	2b04      	cmp	r3, #4
 8102444:	d139      	bne.n	81024ba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8102446:	687b      	ldr	r3, [r7, #4]
 8102448:	681b      	ldr	r3, [r3, #0]
 810244a:	681a      	ldr	r2, [r3, #0]
 810244c:	687b      	ldr	r3, [r7, #4]
 810244e:	681b      	ldr	r3, [r3, #0]
 8102450:	f022 0216 	bic.w	r2, r2, #22
 8102454:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102456:	687b      	ldr	r3, [r7, #4]
 8102458:	681b      	ldr	r3, [r3, #0]
 810245a:	695a      	ldr	r2, [r3, #20]
 810245c:	687b      	ldr	r3, [r7, #4]
 810245e:	681b      	ldr	r3, [r3, #0]
 8102460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8102464:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8102466:	687b      	ldr	r3, [r7, #4]
 8102468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810246a:	2b00      	cmp	r3, #0
 810246c:	d103      	bne.n	8102476 <HAL_DMA_IRQHandler+0x736>
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102472:	2b00      	cmp	r3, #0
 8102474:	d007      	beq.n	8102486 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8102476:	687b      	ldr	r3, [r7, #4]
 8102478:	681b      	ldr	r3, [r3, #0]
 810247a:	681a      	ldr	r2, [r3, #0]
 810247c:	687b      	ldr	r3, [r7, #4]
 810247e:	681b      	ldr	r3, [r3, #0]
 8102480:	f022 0208 	bic.w	r2, r2, #8
 8102484:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102486:	687b      	ldr	r3, [r7, #4]
 8102488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810248a:	f003 031f 	and.w	r3, r3, #31
 810248e:	223f      	movs	r2, #63	; 0x3f
 8102490:	409a      	lsls	r2, r3
 8102492:	6a3b      	ldr	r3, [r7, #32]
 8102494:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8102496:	687b      	ldr	r3, [r7, #4]
 8102498:	2200      	movs	r2, #0
 810249a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810249e:	687b      	ldr	r3, [r7, #4]
 81024a0:	2201      	movs	r2, #1
 81024a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81024aa:	2b00      	cmp	r3, #0
 81024ac:	f000 834a 	beq.w	8102b44 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 81024b0:	687b      	ldr	r3, [r7, #4]
 81024b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81024b4:	6878      	ldr	r0, [r7, #4]
 81024b6:	4798      	blx	r3
          }
          return;
 81024b8:	e344      	b.n	8102b44 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81024ba:	687b      	ldr	r3, [r7, #4]
 81024bc:	681b      	ldr	r3, [r3, #0]
 81024be:	681b      	ldr	r3, [r3, #0]
 81024c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81024c4:	2b00      	cmp	r3, #0
 81024c6:	d018      	beq.n	81024fa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	681b      	ldr	r3, [r3, #0]
 81024cc:	681b      	ldr	r3, [r3, #0]
 81024ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81024d2:	2b00      	cmp	r3, #0
 81024d4:	d108      	bne.n	81024e8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 81024d6:	687b      	ldr	r3, [r7, #4]
 81024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81024da:	2b00      	cmp	r3, #0
 81024dc:	d02c      	beq.n	8102538 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 81024de:	687b      	ldr	r3, [r7, #4]
 81024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81024e2:	6878      	ldr	r0, [r7, #4]
 81024e4:	4798      	blx	r3
 81024e6:	e027      	b.n	8102538 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 81024e8:	687b      	ldr	r3, [r7, #4]
 81024ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81024ec:	2b00      	cmp	r3, #0
 81024ee:	d023      	beq.n	8102538 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 81024f0:	687b      	ldr	r3, [r7, #4]
 81024f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81024f4:	6878      	ldr	r0, [r7, #4]
 81024f6:	4798      	blx	r3
 81024f8:	e01e      	b.n	8102538 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81024fa:	687b      	ldr	r3, [r7, #4]
 81024fc:	681b      	ldr	r3, [r3, #0]
 81024fe:	681b      	ldr	r3, [r3, #0]
 8102500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102504:	2b00      	cmp	r3, #0
 8102506:	d10f      	bne.n	8102528 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	681b      	ldr	r3, [r3, #0]
 810250c:	681a      	ldr	r2, [r3, #0]
 810250e:	687b      	ldr	r3, [r7, #4]
 8102510:	681b      	ldr	r3, [r3, #0]
 8102512:	f022 0210 	bic.w	r2, r2, #16
 8102516:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	2200      	movs	r2, #0
 810251c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	2201      	movs	r2, #1
 8102524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810252c:	2b00      	cmp	r3, #0
 810252e:	d003      	beq.n	8102538 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8102530:	687b      	ldr	r3, [r7, #4]
 8102532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102534:	6878      	ldr	r0, [r7, #4]
 8102536:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8102538:	687b      	ldr	r3, [r7, #4]
 810253a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810253c:	2b00      	cmp	r3, #0
 810253e:	f000 8306 	beq.w	8102b4e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102546:	f003 0301 	and.w	r3, r3, #1
 810254a:	2b00      	cmp	r3, #0
 810254c:	f000 8088 	beq.w	8102660 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8102550:	687b      	ldr	r3, [r7, #4]
 8102552:	2204      	movs	r2, #4
 8102554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8102558:	687b      	ldr	r3, [r7, #4]
 810255a:	681b      	ldr	r3, [r3, #0]
 810255c:	4a7a      	ldr	r2, [pc, #488]	; (8102748 <HAL_DMA_IRQHandler+0xa08>)
 810255e:	4293      	cmp	r3, r2
 8102560:	d04a      	beq.n	81025f8 <HAL_DMA_IRQHandler+0x8b8>
 8102562:	687b      	ldr	r3, [r7, #4]
 8102564:	681b      	ldr	r3, [r3, #0]
 8102566:	4a79      	ldr	r2, [pc, #484]	; (810274c <HAL_DMA_IRQHandler+0xa0c>)
 8102568:	4293      	cmp	r3, r2
 810256a:	d045      	beq.n	81025f8 <HAL_DMA_IRQHandler+0x8b8>
 810256c:	687b      	ldr	r3, [r7, #4]
 810256e:	681b      	ldr	r3, [r3, #0]
 8102570:	4a77      	ldr	r2, [pc, #476]	; (8102750 <HAL_DMA_IRQHandler+0xa10>)
 8102572:	4293      	cmp	r3, r2
 8102574:	d040      	beq.n	81025f8 <HAL_DMA_IRQHandler+0x8b8>
 8102576:	687b      	ldr	r3, [r7, #4]
 8102578:	681b      	ldr	r3, [r3, #0]
 810257a:	4a76      	ldr	r2, [pc, #472]	; (8102754 <HAL_DMA_IRQHandler+0xa14>)
 810257c:	4293      	cmp	r3, r2
 810257e:	d03b      	beq.n	81025f8 <HAL_DMA_IRQHandler+0x8b8>
 8102580:	687b      	ldr	r3, [r7, #4]
 8102582:	681b      	ldr	r3, [r3, #0]
 8102584:	4a74      	ldr	r2, [pc, #464]	; (8102758 <HAL_DMA_IRQHandler+0xa18>)
 8102586:	4293      	cmp	r3, r2
 8102588:	d036      	beq.n	81025f8 <HAL_DMA_IRQHandler+0x8b8>
 810258a:	687b      	ldr	r3, [r7, #4]
 810258c:	681b      	ldr	r3, [r3, #0]
 810258e:	4a73      	ldr	r2, [pc, #460]	; (810275c <HAL_DMA_IRQHandler+0xa1c>)
 8102590:	4293      	cmp	r3, r2
 8102592:	d031      	beq.n	81025f8 <HAL_DMA_IRQHandler+0x8b8>
 8102594:	687b      	ldr	r3, [r7, #4]
 8102596:	681b      	ldr	r3, [r3, #0]
 8102598:	4a71      	ldr	r2, [pc, #452]	; (8102760 <HAL_DMA_IRQHandler+0xa20>)
 810259a:	4293      	cmp	r3, r2
 810259c:	d02c      	beq.n	81025f8 <HAL_DMA_IRQHandler+0x8b8>
 810259e:	687b      	ldr	r3, [r7, #4]
 81025a0:	681b      	ldr	r3, [r3, #0]
 81025a2:	4a70      	ldr	r2, [pc, #448]	; (8102764 <HAL_DMA_IRQHandler+0xa24>)
 81025a4:	4293      	cmp	r3, r2
 81025a6:	d027      	beq.n	81025f8 <HAL_DMA_IRQHandler+0x8b8>
 81025a8:	687b      	ldr	r3, [r7, #4]
 81025aa:	681b      	ldr	r3, [r3, #0]
 81025ac:	4a6e      	ldr	r2, [pc, #440]	; (8102768 <HAL_DMA_IRQHandler+0xa28>)
 81025ae:	4293      	cmp	r3, r2
 81025b0:	d022      	beq.n	81025f8 <HAL_DMA_IRQHandler+0x8b8>
 81025b2:	687b      	ldr	r3, [r7, #4]
 81025b4:	681b      	ldr	r3, [r3, #0]
 81025b6:	4a6d      	ldr	r2, [pc, #436]	; (810276c <HAL_DMA_IRQHandler+0xa2c>)
 81025b8:	4293      	cmp	r3, r2
 81025ba:	d01d      	beq.n	81025f8 <HAL_DMA_IRQHandler+0x8b8>
 81025bc:	687b      	ldr	r3, [r7, #4]
 81025be:	681b      	ldr	r3, [r3, #0]
 81025c0:	4a6b      	ldr	r2, [pc, #428]	; (8102770 <HAL_DMA_IRQHandler+0xa30>)
 81025c2:	4293      	cmp	r3, r2
 81025c4:	d018      	beq.n	81025f8 <HAL_DMA_IRQHandler+0x8b8>
 81025c6:	687b      	ldr	r3, [r7, #4]
 81025c8:	681b      	ldr	r3, [r3, #0]
 81025ca:	4a6a      	ldr	r2, [pc, #424]	; (8102774 <HAL_DMA_IRQHandler+0xa34>)
 81025cc:	4293      	cmp	r3, r2
 81025ce:	d013      	beq.n	81025f8 <HAL_DMA_IRQHandler+0x8b8>
 81025d0:	687b      	ldr	r3, [r7, #4]
 81025d2:	681b      	ldr	r3, [r3, #0]
 81025d4:	4a68      	ldr	r2, [pc, #416]	; (8102778 <HAL_DMA_IRQHandler+0xa38>)
 81025d6:	4293      	cmp	r3, r2
 81025d8:	d00e      	beq.n	81025f8 <HAL_DMA_IRQHandler+0x8b8>
 81025da:	687b      	ldr	r3, [r7, #4]
 81025dc:	681b      	ldr	r3, [r3, #0]
 81025de:	4a67      	ldr	r2, [pc, #412]	; (810277c <HAL_DMA_IRQHandler+0xa3c>)
 81025e0:	4293      	cmp	r3, r2
 81025e2:	d009      	beq.n	81025f8 <HAL_DMA_IRQHandler+0x8b8>
 81025e4:	687b      	ldr	r3, [r7, #4]
 81025e6:	681b      	ldr	r3, [r3, #0]
 81025e8:	4a65      	ldr	r2, [pc, #404]	; (8102780 <HAL_DMA_IRQHandler+0xa40>)
 81025ea:	4293      	cmp	r3, r2
 81025ec:	d004      	beq.n	81025f8 <HAL_DMA_IRQHandler+0x8b8>
 81025ee:	687b      	ldr	r3, [r7, #4]
 81025f0:	681b      	ldr	r3, [r3, #0]
 81025f2:	4a64      	ldr	r2, [pc, #400]	; (8102784 <HAL_DMA_IRQHandler+0xa44>)
 81025f4:	4293      	cmp	r3, r2
 81025f6:	d108      	bne.n	810260a <HAL_DMA_IRQHandler+0x8ca>
 81025f8:	687b      	ldr	r3, [r7, #4]
 81025fa:	681b      	ldr	r3, [r3, #0]
 81025fc:	681a      	ldr	r2, [r3, #0]
 81025fe:	687b      	ldr	r3, [r7, #4]
 8102600:	681b      	ldr	r3, [r3, #0]
 8102602:	f022 0201 	bic.w	r2, r2, #1
 8102606:	601a      	str	r2, [r3, #0]
 8102608:	e007      	b.n	810261a <HAL_DMA_IRQHandler+0x8da>
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	681b      	ldr	r3, [r3, #0]
 810260e:	681a      	ldr	r2, [r3, #0]
 8102610:	687b      	ldr	r3, [r7, #4]
 8102612:	681b      	ldr	r3, [r3, #0]
 8102614:	f022 0201 	bic.w	r2, r2, #1
 8102618:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 810261a:	68fb      	ldr	r3, [r7, #12]
 810261c:	3301      	adds	r3, #1
 810261e:	60fb      	str	r3, [r7, #12]
 8102620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102622:	429a      	cmp	r2, r3
 8102624:	d307      	bcc.n	8102636 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8102626:	687b      	ldr	r3, [r7, #4]
 8102628:	681b      	ldr	r3, [r3, #0]
 810262a:	681b      	ldr	r3, [r3, #0]
 810262c:	f003 0301 	and.w	r3, r3, #1
 8102630:	2b00      	cmp	r3, #0
 8102632:	d1f2      	bne.n	810261a <HAL_DMA_IRQHandler+0x8da>
 8102634:	e000      	b.n	8102638 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8102636:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8102638:	687b      	ldr	r3, [r7, #4]
 810263a:	2200      	movs	r2, #0
 810263c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	681b      	ldr	r3, [r3, #0]
 8102644:	681b      	ldr	r3, [r3, #0]
 8102646:	f003 0301 	and.w	r3, r3, #1
 810264a:	2b00      	cmp	r3, #0
 810264c:	d004      	beq.n	8102658 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 810264e:	687b      	ldr	r3, [r7, #4]
 8102650:	2203      	movs	r2, #3
 8102652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8102656:	e003      	b.n	8102660 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8102658:	687b      	ldr	r3, [r7, #4]
 810265a:	2201      	movs	r2, #1
 810265c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8102660:	687b      	ldr	r3, [r7, #4]
 8102662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102664:	2b00      	cmp	r3, #0
 8102666:	f000 8272 	beq.w	8102b4e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810266a:	687b      	ldr	r3, [r7, #4]
 810266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810266e:	6878      	ldr	r0, [r7, #4]
 8102670:	4798      	blx	r3
 8102672:	e26c      	b.n	8102b4e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8102674:	687b      	ldr	r3, [r7, #4]
 8102676:	681b      	ldr	r3, [r3, #0]
 8102678:	4a43      	ldr	r2, [pc, #268]	; (8102788 <HAL_DMA_IRQHandler+0xa48>)
 810267a:	4293      	cmp	r3, r2
 810267c:	d022      	beq.n	81026c4 <HAL_DMA_IRQHandler+0x984>
 810267e:	687b      	ldr	r3, [r7, #4]
 8102680:	681b      	ldr	r3, [r3, #0]
 8102682:	4a42      	ldr	r2, [pc, #264]	; (810278c <HAL_DMA_IRQHandler+0xa4c>)
 8102684:	4293      	cmp	r3, r2
 8102686:	d01d      	beq.n	81026c4 <HAL_DMA_IRQHandler+0x984>
 8102688:	687b      	ldr	r3, [r7, #4]
 810268a:	681b      	ldr	r3, [r3, #0]
 810268c:	4a40      	ldr	r2, [pc, #256]	; (8102790 <HAL_DMA_IRQHandler+0xa50>)
 810268e:	4293      	cmp	r3, r2
 8102690:	d018      	beq.n	81026c4 <HAL_DMA_IRQHandler+0x984>
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	681b      	ldr	r3, [r3, #0]
 8102696:	4a3f      	ldr	r2, [pc, #252]	; (8102794 <HAL_DMA_IRQHandler+0xa54>)
 8102698:	4293      	cmp	r3, r2
 810269a:	d013      	beq.n	81026c4 <HAL_DMA_IRQHandler+0x984>
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	681b      	ldr	r3, [r3, #0]
 81026a0:	4a3d      	ldr	r2, [pc, #244]	; (8102798 <HAL_DMA_IRQHandler+0xa58>)
 81026a2:	4293      	cmp	r3, r2
 81026a4:	d00e      	beq.n	81026c4 <HAL_DMA_IRQHandler+0x984>
 81026a6:	687b      	ldr	r3, [r7, #4]
 81026a8:	681b      	ldr	r3, [r3, #0]
 81026aa:	4a3c      	ldr	r2, [pc, #240]	; (810279c <HAL_DMA_IRQHandler+0xa5c>)
 81026ac:	4293      	cmp	r3, r2
 81026ae:	d009      	beq.n	81026c4 <HAL_DMA_IRQHandler+0x984>
 81026b0:	687b      	ldr	r3, [r7, #4]
 81026b2:	681b      	ldr	r3, [r3, #0]
 81026b4:	4a3a      	ldr	r2, [pc, #232]	; (81027a0 <HAL_DMA_IRQHandler+0xa60>)
 81026b6:	4293      	cmp	r3, r2
 81026b8:	d004      	beq.n	81026c4 <HAL_DMA_IRQHandler+0x984>
 81026ba:	687b      	ldr	r3, [r7, #4]
 81026bc:	681b      	ldr	r3, [r3, #0]
 81026be:	4a39      	ldr	r2, [pc, #228]	; (81027a4 <HAL_DMA_IRQHandler+0xa64>)
 81026c0:	4293      	cmp	r3, r2
 81026c2:	d101      	bne.n	81026c8 <HAL_DMA_IRQHandler+0x988>
 81026c4:	2301      	movs	r3, #1
 81026c6:	e000      	b.n	81026ca <HAL_DMA_IRQHandler+0x98a>
 81026c8:	2300      	movs	r3, #0
 81026ca:	2b00      	cmp	r3, #0
 81026cc:	f000 823f 	beq.w	8102b4e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81026d0:	687b      	ldr	r3, [r7, #4]
 81026d2:	681b      	ldr	r3, [r3, #0]
 81026d4:	681b      	ldr	r3, [r3, #0]
 81026d6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81026d8:	687b      	ldr	r3, [r7, #4]
 81026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81026dc:	f003 031f 	and.w	r3, r3, #31
 81026e0:	2204      	movs	r2, #4
 81026e2:	409a      	lsls	r2, r3
 81026e4:	697b      	ldr	r3, [r7, #20]
 81026e6:	4013      	ands	r3, r2
 81026e8:	2b00      	cmp	r3, #0
 81026ea:	f000 80cd 	beq.w	8102888 <HAL_DMA_IRQHandler+0xb48>
 81026ee:	693b      	ldr	r3, [r7, #16]
 81026f0:	f003 0304 	and.w	r3, r3, #4
 81026f4:	2b00      	cmp	r3, #0
 81026f6:	f000 80c7 	beq.w	8102888 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 81026fa:	687b      	ldr	r3, [r7, #4]
 81026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81026fe:	f003 031f 	and.w	r3, r3, #31
 8102702:	2204      	movs	r2, #4
 8102704:	409a      	lsls	r2, r3
 8102706:	69fb      	ldr	r3, [r7, #28]
 8102708:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810270a:	693b      	ldr	r3, [r7, #16]
 810270c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102710:	2b00      	cmp	r3, #0
 8102712:	d049      	beq.n	81027a8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8102714:	693b      	ldr	r3, [r7, #16]
 8102716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810271a:	2b00      	cmp	r3, #0
 810271c:	d109      	bne.n	8102732 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 810271e:	687b      	ldr	r3, [r7, #4]
 8102720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102722:	2b00      	cmp	r3, #0
 8102724:	f000 8210 	beq.w	8102b48 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8102728:	687b      	ldr	r3, [r7, #4]
 810272a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810272c:	6878      	ldr	r0, [r7, #4]
 810272e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102730:	e20a      	b.n	8102b48 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8102732:	687b      	ldr	r3, [r7, #4]
 8102734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102736:	2b00      	cmp	r3, #0
 8102738:	f000 8206 	beq.w	8102b48 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102740:	6878      	ldr	r0, [r7, #4]
 8102742:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102744:	e200      	b.n	8102b48 <HAL_DMA_IRQHandler+0xe08>
 8102746:	bf00      	nop
 8102748:	40020010 	.word	0x40020010
 810274c:	40020028 	.word	0x40020028
 8102750:	40020040 	.word	0x40020040
 8102754:	40020058 	.word	0x40020058
 8102758:	40020070 	.word	0x40020070
 810275c:	40020088 	.word	0x40020088
 8102760:	400200a0 	.word	0x400200a0
 8102764:	400200b8 	.word	0x400200b8
 8102768:	40020410 	.word	0x40020410
 810276c:	40020428 	.word	0x40020428
 8102770:	40020440 	.word	0x40020440
 8102774:	40020458 	.word	0x40020458
 8102778:	40020470 	.word	0x40020470
 810277c:	40020488 	.word	0x40020488
 8102780:	400204a0 	.word	0x400204a0
 8102784:	400204b8 	.word	0x400204b8
 8102788:	58025408 	.word	0x58025408
 810278c:	5802541c 	.word	0x5802541c
 8102790:	58025430 	.word	0x58025430
 8102794:	58025444 	.word	0x58025444
 8102798:	58025458 	.word	0x58025458
 810279c:	5802546c 	.word	0x5802546c
 81027a0:	58025480 	.word	0x58025480
 81027a4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81027a8:	693b      	ldr	r3, [r7, #16]
 81027aa:	f003 0320 	and.w	r3, r3, #32
 81027ae:	2b00      	cmp	r3, #0
 81027b0:	d160      	bne.n	8102874 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 81027b2:	687b      	ldr	r3, [r7, #4]
 81027b4:	681b      	ldr	r3, [r3, #0]
 81027b6:	4a8c      	ldr	r2, [pc, #560]	; (81029e8 <HAL_DMA_IRQHandler+0xca8>)
 81027b8:	4293      	cmp	r3, r2
 81027ba:	d04a      	beq.n	8102852 <HAL_DMA_IRQHandler+0xb12>
 81027bc:	687b      	ldr	r3, [r7, #4]
 81027be:	681b      	ldr	r3, [r3, #0]
 81027c0:	4a8a      	ldr	r2, [pc, #552]	; (81029ec <HAL_DMA_IRQHandler+0xcac>)
 81027c2:	4293      	cmp	r3, r2
 81027c4:	d045      	beq.n	8102852 <HAL_DMA_IRQHandler+0xb12>
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	681b      	ldr	r3, [r3, #0]
 81027ca:	4a89      	ldr	r2, [pc, #548]	; (81029f0 <HAL_DMA_IRQHandler+0xcb0>)
 81027cc:	4293      	cmp	r3, r2
 81027ce:	d040      	beq.n	8102852 <HAL_DMA_IRQHandler+0xb12>
 81027d0:	687b      	ldr	r3, [r7, #4]
 81027d2:	681b      	ldr	r3, [r3, #0]
 81027d4:	4a87      	ldr	r2, [pc, #540]	; (81029f4 <HAL_DMA_IRQHandler+0xcb4>)
 81027d6:	4293      	cmp	r3, r2
 81027d8:	d03b      	beq.n	8102852 <HAL_DMA_IRQHandler+0xb12>
 81027da:	687b      	ldr	r3, [r7, #4]
 81027dc:	681b      	ldr	r3, [r3, #0]
 81027de:	4a86      	ldr	r2, [pc, #536]	; (81029f8 <HAL_DMA_IRQHandler+0xcb8>)
 81027e0:	4293      	cmp	r3, r2
 81027e2:	d036      	beq.n	8102852 <HAL_DMA_IRQHandler+0xb12>
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	681b      	ldr	r3, [r3, #0]
 81027e8:	4a84      	ldr	r2, [pc, #528]	; (81029fc <HAL_DMA_IRQHandler+0xcbc>)
 81027ea:	4293      	cmp	r3, r2
 81027ec:	d031      	beq.n	8102852 <HAL_DMA_IRQHandler+0xb12>
 81027ee:	687b      	ldr	r3, [r7, #4]
 81027f0:	681b      	ldr	r3, [r3, #0]
 81027f2:	4a83      	ldr	r2, [pc, #524]	; (8102a00 <HAL_DMA_IRQHandler+0xcc0>)
 81027f4:	4293      	cmp	r3, r2
 81027f6:	d02c      	beq.n	8102852 <HAL_DMA_IRQHandler+0xb12>
 81027f8:	687b      	ldr	r3, [r7, #4]
 81027fa:	681b      	ldr	r3, [r3, #0]
 81027fc:	4a81      	ldr	r2, [pc, #516]	; (8102a04 <HAL_DMA_IRQHandler+0xcc4>)
 81027fe:	4293      	cmp	r3, r2
 8102800:	d027      	beq.n	8102852 <HAL_DMA_IRQHandler+0xb12>
 8102802:	687b      	ldr	r3, [r7, #4]
 8102804:	681b      	ldr	r3, [r3, #0]
 8102806:	4a80      	ldr	r2, [pc, #512]	; (8102a08 <HAL_DMA_IRQHandler+0xcc8>)
 8102808:	4293      	cmp	r3, r2
 810280a:	d022      	beq.n	8102852 <HAL_DMA_IRQHandler+0xb12>
 810280c:	687b      	ldr	r3, [r7, #4]
 810280e:	681b      	ldr	r3, [r3, #0]
 8102810:	4a7e      	ldr	r2, [pc, #504]	; (8102a0c <HAL_DMA_IRQHandler+0xccc>)
 8102812:	4293      	cmp	r3, r2
 8102814:	d01d      	beq.n	8102852 <HAL_DMA_IRQHandler+0xb12>
 8102816:	687b      	ldr	r3, [r7, #4]
 8102818:	681b      	ldr	r3, [r3, #0]
 810281a:	4a7d      	ldr	r2, [pc, #500]	; (8102a10 <HAL_DMA_IRQHandler+0xcd0>)
 810281c:	4293      	cmp	r3, r2
 810281e:	d018      	beq.n	8102852 <HAL_DMA_IRQHandler+0xb12>
 8102820:	687b      	ldr	r3, [r7, #4]
 8102822:	681b      	ldr	r3, [r3, #0]
 8102824:	4a7b      	ldr	r2, [pc, #492]	; (8102a14 <HAL_DMA_IRQHandler+0xcd4>)
 8102826:	4293      	cmp	r3, r2
 8102828:	d013      	beq.n	8102852 <HAL_DMA_IRQHandler+0xb12>
 810282a:	687b      	ldr	r3, [r7, #4]
 810282c:	681b      	ldr	r3, [r3, #0]
 810282e:	4a7a      	ldr	r2, [pc, #488]	; (8102a18 <HAL_DMA_IRQHandler+0xcd8>)
 8102830:	4293      	cmp	r3, r2
 8102832:	d00e      	beq.n	8102852 <HAL_DMA_IRQHandler+0xb12>
 8102834:	687b      	ldr	r3, [r7, #4]
 8102836:	681b      	ldr	r3, [r3, #0]
 8102838:	4a78      	ldr	r2, [pc, #480]	; (8102a1c <HAL_DMA_IRQHandler+0xcdc>)
 810283a:	4293      	cmp	r3, r2
 810283c:	d009      	beq.n	8102852 <HAL_DMA_IRQHandler+0xb12>
 810283e:	687b      	ldr	r3, [r7, #4]
 8102840:	681b      	ldr	r3, [r3, #0]
 8102842:	4a77      	ldr	r2, [pc, #476]	; (8102a20 <HAL_DMA_IRQHandler+0xce0>)
 8102844:	4293      	cmp	r3, r2
 8102846:	d004      	beq.n	8102852 <HAL_DMA_IRQHandler+0xb12>
 8102848:	687b      	ldr	r3, [r7, #4]
 810284a:	681b      	ldr	r3, [r3, #0]
 810284c:	4a75      	ldr	r2, [pc, #468]	; (8102a24 <HAL_DMA_IRQHandler+0xce4>)
 810284e:	4293      	cmp	r3, r2
 8102850:	d108      	bne.n	8102864 <HAL_DMA_IRQHandler+0xb24>
 8102852:	687b      	ldr	r3, [r7, #4]
 8102854:	681b      	ldr	r3, [r3, #0]
 8102856:	681a      	ldr	r2, [r3, #0]
 8102858:	687b      	ldr	r3, [r7, #4]
 810285a:	681b      	ldr	r3, [r3, #0]
 810285c:	f022 0208 	bic.w	r2, r2, #8
 8102860:	601a      	str	r2, [r3, #0]
 8102862:	e007      	b.n	8102874 <HAL_DMA_IRQHandler+0xb34>
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	681b      	ldr	r3, [r3, #0]
 8102868:	681a      	ldr	r2, [r3, #0]
 810286a:	687b      	ldr	r3, [r7, #4]
 810286c:	681b      	ldr	r3, [r3, #0]
 810286e:	f022 0204 	bic.w	r2, r2, #4
 8102872:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8102874:	687b      	ldr	r3, [r7, #4]
 8102876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102878:	2b00      	cmp	r3, #0
 810287a:	f000 8165 	beq.w	8102b48 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810287e:	687b      	ldr	r3, [r7, #4]
 8102880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102882:	6878      	ldr	r0, [r7, #4]
 8102884:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102886:	e15f      	b.n	8102b48 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810288c:	f003 031f 	and.w	r3, r3, #31
 8102890:	2202      	movs	r2, #2
 8102892:	409a      	lsls	r2, r3
 8102894:	697b      	ldr	r3, [r7, #20]
 8102896:	4013      	ands	r3, r2
 8102898:	2b00      	cmp	r3, #0
 810289a:	f000 80c5 	beq.w	8102a28 <HAL_DMA_IRQHandler+0xce8>
 810289e:	693b      	ldr	r3, [r7, #16]
 81028a0:	f003 0302 	and.w	r3, r3, #2
 81028a4:	2b00      	cmp	r3, #0
 81028a6:	f000 80bf 	beq.w	8102a28 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 81028aa:	687b      	ldr	r3, [r7, #4]
 81028ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81028ae:	f003 031f 	and.w	r3, r3, #31
 81028b2:	2202      	movs	r2, #2
 81028b4:	409a      	lsls	r2, r3
 81028b6:	69fb      	ldr	r3, [r7, #28]
 81028b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81028ba:	693b      	ldr	r3, [r7, #16]
 81028bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81028c0:	2b00      	cmp	r3, #0
 81028c2:	d018      	beq.n	81028f6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81028c4:	693b      	ldr	r3, [r7, #16]
 81028c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81028ca:	2b00      	cmp	r3, #0
 81028cc:	d109      	bne.n	81028e2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81028ce:	687b      	ldr	r3, [r7, #4]
 81028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81028d2:	2b00      	cmp	r3, #0
 81028d4:	f000 813a 	beq.w	8102b4c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81028d8:	687b      	ldr	r3, [r7, #4]
 81028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81028dc:	6878      	ldr	r0, [r7, #4]
 81028de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81028e0:	e134      	b.n	8102b4c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81028e2:	687b      	ldr	r3, [r7, #4]
 81028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81028e6:	2b00      	cmp	r3, #0
 81028e8:	f000 8130 	beq.w	8102b4c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81028f0:	6878      	ldr	r0, [r7, #4]
 81028f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81028f4:	e12a      	b.n	8102b4c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81028f6:	693b      	ldr	r3, [r7, #16]
 81028f8:	f003 0320 	and.w	r3, r3, #32
 81028fc:	2b00      	cmp	r3, #0
 81028fe:	d168      	bne.n	81029d2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8102900:	687b      	ldr	r3, [r7, #4]
 8102902:	681b      	ldr	r3, [r3, #0]
 8102904:	4a38      	ldr	r2, [pc, #224]	; (81029e8 <HAL_DMA_IRQHandler+0xca8>)
 8102906:	4293      	cmp	r3, r2
 8102908:	d04a      	beq.n	81029a0 <HAL_DMA_IRQHandler+0xc60>
 810290a:	687b      	ldr	r3, [r7, #4]
 810290c:	681b      	ldr	r3, [r3, #0]
 810290e:	4a37      	ldr	r2, [pc, #220]	; (81029ec <HAL_DMA_IRQHandler+0xcac>)
 8102910:	4293      	cmp	r3, r2
 8102912:	d045      	beq.n	81029a0 <HAL_DMA_IRQHandler+0xc60>
 8102914:	687b      	ldr	r3, [r7, #4]
 8102916:	681b      	ldr	r3, [r3, #0]
 8102918:	4a35      	ldr	r2, [pc, #212]	; (81029f0 <HAL_DMA_IRQHandler+0xcb0>)
 810291a:	4293      	cmp	r3, r2
 810291c:	d040      	beq.n	81029a0 <HAL_DMA_IRQHandler+0xc60>
 810291e:	687b      	ldr	r3, [r7, #4]
 8102920:	681b      	ldr	r3, [r3, #0]
 8102922:	4a34      	ldr	r2, [pc, #208]	; (81029f4 <HAL_DMA_IRQHandler+0xcb4>)
 8102924:	4293      	cmp	r3, r2
 8102926:	d03b      	beq.n	81029a0 <HAL_DMA_IRQHandler+0xc60>
 8102928:	687b      	ldr	r3, [r7, #4]
 810292a:	681b      	ldr	r3, [r3, #0]
 810292c:	4a32      	ldr	r2, [pc, #200]	; (81029f8 <HAL_DMA_IRQHandler+0xcb8>)
 810292e:	4293      	cmp	r3, r2
 8102930:	d036      	beq.n	81029a0 <HAL_DMA_IRQHandler+0xc60>
 8102932:	687b      	ldr	r3, [r7, #4]
 8102934:	681b      	ldr	r3, [r3, #0]
 8102936:	4a31      	ldr	r2, [pc, #196]	; (81029fc <HAL_DMA_IRQHandler+0xcbc>)
 8102938:	4293      	cmp	r3, r2
 810293a:	d031      	beq.n	81029a0 <HAL_DMA_IRQHandler+0xc60>
 810293c:	687b      	ldr	r3, [r7, #4]
 810293e:	681b      	ldr	r3, [r3, #0]
 8102940:	4a2f      	ldr	r2, [pc, #188]	; (8102a00 <HAL_DMA_IRQHandler+0xcc0>)
 8102942:	4293      	cmp	r3, r2
 8102944:	d02c      	beq.n	81029a0 <HAL_DMA_IRQHandler+0xc60>
 8102946:	687b      	ldr	r3, [r7, #4]
 8102948:	681b      	ldr	r3, [r3, #0]
 810294a:	4a2e      	ldr	r2, [pc, #184]	; (8102a04 <HAL_DMA_IRQHandler+0xcc4>)
 810294c:	4293      	cmp	r3, r2
 810294e:	d027      	beq.n	81029a0 <HAL_DMA_IRQHandler+0xc60>
 8102950:	687b      	ldr	r3, [r7, #4]
 8102952:	681b      	ldr	r3, [r3, #0]
 8102954:	4a2c      	ldr	r2, [pc, #176]	; (8102a08 <HAL_DMA_IRQHandler+0xcc8>)
 8102956:	4293      	cmp	r3, r2
 8102958:	d022      	beq.n	81029a0 <HAL_DMA_IRQHandler+0xc60>
 810295a:	687b      	ldr	r3, [r7, #4]
 810295c:	681b      	ldr	r3, [r3, #0]
 810295e:	4a2b      	ldr	r2, [pc, #172]	; (8102a0c <HAL_DMA_IRQHandler+0xccc>)
 8102960:	4293      	cmp	r3, r2
 8102962:	d01d      	beq.n	81029a0 <HAL_DMA_IRQHandler+0xc60>
 8102964:	687b      	ldr	r3, [r7, #4]
 8102966:	681b      	ldr	r3, [r3, #0]
 8102968:	4a29      	ldr	r2, [pc, #164]	; (8102a10 <HAL_DMA_IRQHandler+0xcd0>)
 810296a:	4293      	cmp	r3, r2
 810296c:	d018      	beq.n	81029a0 <HAL_DMA_IRQHandler+0xc60>
 810296e:	687b      	ldr	r3, [r7, #4]
 8102970:	681b      	ldr	r3, [r3, #0]
 8102972:	4a28      	ldr	r2, [pc, #160]	; (8102a14 <HAL_DMA_IRQHandler+0xcd4>)
 8102974:	4293      	cmp	r3, r2
 8102976:	d013      	beq.n	81029a0 <HAL_DMA_IRQHandler+0xc60>
 8102978:	687b      	ldr	r3, [r7, #4]
 810297a:	681b      	ldr	r3, [r3, #0]
 810297c:	4a26      	ldr	r2, [pc, #152]	; (8102a18 <HAL_DMA_IRQHandler+0xcd8>)
 810297e:	4293      	cmp	r3, r2
 8102980:	d00e      	beq.n	81029a0 <HAL_DMA_IRQHandler+0xc60>
 8102982:	687b      	ldr	r3, [r7, #4]
 8102984:	681b      	ldr	r3, [r3, #0]
 8102986:	4a25      	ldr	r2, [pc, #148]	; (8102a1c <HAL_DMA_IRQHandler+0xcdc>)
 8102988:	4293      	cmp	r3, r2
 810298a:	d009      	beq.n	81029a0 <HAL_DMA_IRQHandler+0xc60>
 810298c:	687b      	ldr	r3, [r7, #4]
 810298e:	681b      	ldr	r3, [r3, #0]
 8102990:	4a23      	ldr	r2, [pc, #140]	; (8102a20 <HAL_DMA_IRQHandler+0xce0>)
 8102992:	4293      	cmp	r3, r2
 8102994:	d004      	beq.n	81029a0 <HAL_DMA_IRQHandler+0xc60>
 8102996:	687b      	ldr	r3, [r7, #4]
 8102998:	681b      	ldr	r3, [r3, #0]
 810299a:	4a22      	ldr	r2, [pc, #136]	; (8102a24 <HAL_DMA_IRQHandler+0xce4>)
 810299c:	4293      	cmp	r3, r2
 810299e:	d108      	bne.n	81029b2 <HAL_DMA_IRQHandler+0xc72>
 81029a0:	687b      	ldr	r3, [r7, #4]
 81029a2:	681b      	ldr	r3, [r3, #0]
 81029a4:	681a      	ldr	r2, [r3, #0]
 81029a6:	687b      	ldr	r3, [r7, #4]
 81029a8:	681b      	ldr	r3, [r3, #0]
 81029aa:	f022 0214 	bic.w	r2, r2, #20
 81029ae:	601a      	str	r2, [r3, #0]
 81029b0:	e007      	b.n	81029c2 <HAL_DMA_IRQHandler+0xc82>
 81029b2:	687b      	ldr	r3, [r7, #4]
 81029b4:	681b      	ldr	r3, [r3, #0]
 81029b6:	681a      	ldr	r2, [r3, #0]
 81029b8:	687b      	ldr	r3, [r7, #4]
 81029ba:	681b      	ldr	r3, [r3, #0]
 81029bc:	f022 020a 	bic.w	r2, r2, #10
 81029c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81029c2:	687b      	ldr	r3, [r7, #4]
 81029c4:	2200      	movs	r2, #0
 81029c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	2201      	movs	r2, #1
 81029ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 81029d2:	687b      	ldr	r3, [r7, #4]
 81029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81029d6:	2b00      	cmp	r3, #0
 81029d8:	f000 80b8 	beq.w	8102b4c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81029e0:	6878      	ldr	r0, [r7, #4]
 81029e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81029e4:	e0b2      	b.n	8102b4c <HAL_DMA_IRQHandler+0xe0c>
 81029e6:	bf00      	nop
 81029e8:	40020010 	.word	0x40020010
 81029ec:	40020028 	.word	0x40020028
 81029f0:	40020040 	.word	0x40020040
 81029f4:	40020058 	.word	0x40020058
 81029f8:	40020070 	.word	0x40020070
 81029fc:	40020088 	.word	0x40020088
 8102a00:	400200a0 	.word	0x400200a0
 8102a04:	400200b8 	.word	0x400200b8
 8102a08:	40020410 	.word	0x40020410
 8102a0c:	40020428 	.word	0x40020428
 8102a10:	40020440 	.word	0x40020440
 8102a14:	40020458 	.word	0x40020458
 8102a18:	40020470 	.word	0x40020470
 8102a1c:	40020488 	.word	0x40020488
 8102a20:	400204a0 	.word	0x400204a0
 8102a24:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8102a28:	687b      	ldr	r3, [r7, #4]
 8102a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102a2c:	f003 031f 	and.w	r3, r3, #31
 8102a30:	2208      	movs	r2, #8
 8102a32:	409a      	lsls	r2, r3
 8102a34:	697b      	ldr	r3, [r7, #20]
 8102a36:	4013      	ands	r3, r2
 8102a38:	2b00      	cmp	r3, #0
 8102a3a:	f000 8088 	beq.w	8102b4e <HAL_DMA_IRQHandler+0xe0e>
 8102a3e:	693b      	ldr	r3, [r7, #16]
 8102a40:	f003 0308 	and.w	r3, r3, #8
 8102a44:	2b00      	cmp	r3, #0
 8102a46:	f000 8082 	beq.w	8102b4e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	681b      	ldr	r3, [r3, #0]
 8102a4e:	4a41      	ldr	r2, [pc, #260]	; (8102b54 <HAL_DMA_IRQHandler+0xe14>)
 8102a50:	4293      	cmp	r3, r2
 8102a52:	d04a      	beq.n	8102aea <HAL_DMA_IRQHandler+0xdaa>
 8102a54:	687b      	ldr	r3, [r7, #4]
 8102a56:	681b      	ldr	r3, [r3, #0]
 8102a58:	4a3f      	ldr	r2, [pc, #252]	; (8102b58 <HAL_DMA_IRQHandler+0xe18>)
 8102a5a:	4293      	cmp	r3, r2
 8102a5c:	d045      	beq.n	8102aea <HAL_DMA_IRQHandler+0xdaa>
 8102a5e:	687b      	ldr	r3, [r7, #4]
 8102a60:	681b      	ldr	r3, [r3, #0]
 8102a62:	4a3e      	ldr	r2, [pc, #248]	; (8102b5c <HAL_DMA_IRQHandler+0xe1c>)
 8102a64:	4293      	cmp	r3, r2
 8102a66:	d040      	beq.n	8102aea <HAL_DMA_IRQHandler+0xdaa>
 8102a68:	687b      	ldr	r3, [r7, #4]
 8102a6a:	681b      	ldr	r3, [r3, #0]
 8102a6c:	4a3c      	ldr	r2, [pc, #240]	; (8102b60 <HAL_DMA_IRQHandler+0xe20>)
 8102a6e:	4293      	cmp	r3, r2
 8102a70:	d03b      	beq.n	8102aea <HAL_DMA_IRQHandler+0xdaa>
 8102a72:	687b      	ldr	r3, [r7, #4]
 8102a74:	681b      	ldr	r3, [r3, #0]
 8102a76:	4a3b      	ldr	r2, [pc, #236]	; (8102b64 <HAL_DMA_IRQHandler+0xe24>)
 8102a78:	4293      	cmp	r3, r2
 8102a7a:	d036      	beq.n	8102aea <HAL_DMA_IRQHandler+0xdaa>
 8102a7c:	687b      	ldr	r3, [r7, #4]
 8102a7e:	681b      	ldr	r3, [r3, #0]
 8102a80:	4a39      	ldr	r2, [pc, #228]	; (8102b68 <HAL_DMA_IRQHandler+0xe28>)
 8102a82:	4293      	cmp	r3, r2
 8102a84:	d031      	beq.n	8102aea <HAL_DMA_IRQHandler+0xdaa>
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	681b      	ldr	r3, [r3, #0]
 8102a8a:	4a38      	ldr	r2, [pc, #224]	; (8102b6c <HAL_DMA_IRQHandler+0xe2c>)
 8102a8c:	4293      	cmp	r3, r2
 8102a8e:	d02c      	beq.n	8102aea <HAL_DMA_IRQHandler+0xdaa>
 8102a90:	687b      	ldr	r3, [r7, #4]
 8102a92:	681b      	ldr	r3, [r3, #0]
 8102a94:	4a36      	ldr	r2, [pc, #216]	; (8102b70 <HAL_DMA_IRQHandler+0xe30>)
 8102a96:	4293      	cmp	r3, r2
 8102a98:	d027      	beq.n	8102aea <HAL_DMA_IRQHandler+0xdaa>
 8102a9a:	687b      	ldr	r3, [r7, #4]
 8102a9c:	681b      	ldr	r3, [r3, #0]
 8102a9e:	4a35      	ldr	r2, [pc, #212]	; (8102b74 <HAL_DMA_IRQHandler+0xe34>)
 8102aa0:	4293      	cmp	r3, r2
 8102aa2:	d022      	beq.n	8102aea <HAL_DMA_IRQHandler+0xdaa>
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	4a33      	ldr	r2, [pc, #204]	; (8102b78 <HAL_DMA_IRQHandler+0xe38>)
 8102aaa:	4293      	cmp	r3, r2
 8102aac:	d01d      	beq.n	8102aea <HAL_DMA_IRQHandler+0xdaa>
 8102aae:	687b      	ldr	r3, [r7, #4]
 8102ab0:	681b      	ldr	r3, [r3, #0]
 8102ab2:	4a32      	ldr	r2, [pc, #200]	; (8102b7c <HAL_DMA_IRQHandler+0xe3c>)
 8102ab4:	4293      	cmp	r3, r2
 8102ab6:	d018      	beq.n	8102aea <HAL_DMA_IRQHandler+0xdaa>
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	681b      	ldr	r3, [r3, #0]
 8102abc:	4a30      	ldr	r2, [pc, #192]	; (8102b80 <HAL_DMA_IRQHandler+0xe40>)
 8102abe:	4293      	cmp	r3, r2
 8102ac0:	d013      	beq.n	8102aea <HAL_DMA_IRQHandler+0xdaa>
 8102ac2:	687b      	ldr	r3, [r7, #4]
 8102ac4:	681b      	ldr	r3, [r3, #0]
 8102ac6:	4a2f      	ldr	r2, [pc, #188]	; (8102b84 <HAL_DMA_IRQHandler+0xe44>)
 8102ac8:	4293      	cmp	r3, r2
 8102aca:	d00e      	beq.n	8102aea <HAL_DMA_IRQHandler+0xdaa>
 8102acc:	687b      	ldr	r3, [r7, #4]
 8102ace:	681b      	ldr	r3, [r3, #0]
 8102ad0:	4a2d      	ldr	r2, [pc, #180]	; (8102b88 <HAL_DMA_IRQHandler+0xe48>)
 8102ad2:	4293      	cmp	r3, r2
 8102ad4:	d009      	beq.n	8102aea <HAL_DMA_IRQHandler+0xdaa>
 8102ad6:	687b      	ldr	r3, [r7, #4]
 8102ad8:	681b      	ldr	r3, [r3, #0]
 8102ada:	4a2c      	ldr	r2, [pc, #176]	; (8102b8c <HAL_DMA_IRQHandler+0xe4c>)
 8102adc:	4293      	cmp	r3, r2
 8102ade:	d004      	beq.n	8102aea <HAL_DMA_IRQHandler+0xdaa>
 8102ae0:	687b      	ldr	r3, [r7, #4]
 8102ae2:	681b      	ldr	r3, [r3, #0]
 8102ae4:	4a2a      	ldr	r2, [pc, #168]	; (8102b90 <HAL_DMA_IRQHandler+0xe50>)
 8102ae6:	4293      	cmp	r3, r2
 8102ae8:	d108      	bne.n	8102afc <HAL_DMA_IRQHandler+0xdbc>
 8102aea:	687b      	ldr	r3, [r7, #4]
 8102aec:	681b      	ldr	r3, [r3, #0]
 8102aee:	681a      	ldr	r2, [r3, #0]
 8102af0:	687b      	ldr	r3, [r7, #4]
 8102af2:	681b      	ldr	r3, [r3, #0]
 8102af4:	f022 021c 	bic.w	r2, r2, #28
 8102af8:	601a      	str	r2, [r3, #0]
 8102afa:	e007      	b.n	8102b0c <HAL_DMA_IRQHandler+0xdcc>
 8102afc:	687b      	ldr	r3, [r7, #4]
 8102afe:	681b      	ldr	r3, [r3, #0]
 8102b00:	681a      	ldr	r2, [r3, #0]
 8102b02:	687b      	ldr	r3, [r7, #4]
 8102b04:	681b      	ldr	r3, [r3, #0]
 8102b06:	f022 020e 	bic.w	r2, r2, #14
 8102b0a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8102b0c:	687b      	ldr	r3, [r7, #4]
 8102b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102b10:	f003 031f 	and.w	r3, r3, #31
 8102b14:	2201      	movs	r2, #1
 8102b16:	409a      	lsls	r2, r3
 8102b18:	69fb      	ldr	r3, [r7, #28]
 8102b1a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8102b1c:	687b      	ldr	r3, [r7, #4]
 8102b1e:	2201      	movs	r2, #1
 8102b20:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8102b22:	687b      	ldr	r3, [r7, #4]
 8102b24:	2200      	movs	r2, #0
 8102b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8102b2a:	687b      	ldr	r3, [r7, #4]
 8102b2c:	2201      	movs	r2, #1
 8102b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8102b32:	687b      	ldr	r3, [r7, #4]
 8102b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102b36:	2b00      	cmp	r3, #0
 8102b38:	d009      	beq.n	8102b4e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8102b3a:	687b      	ldr	r3, [r7, #4]
 8102b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102b3e:	6878      	ldr	r0, [r7, #4]
 8102b40:	4798      	blx	r3
 8102b42:	e004      	b.n	8102b4e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8102b44:	bf00      	nop
 8102b46:	e002      	b.n	8102b4e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102b48:	bf00      	nop
 8102b4a:	e000      	b.n	8102b4e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102b4c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8102b4e:	3728      	adds	r7, #40	; 0x28
 8102b50:	46bd      	mov	sp, r7
 8102b52:	bd80      	pop	{r7, pc}
 8102b54:	40020010 	.word	0x40020010
 8102b58:	40020028 	.word	0x40020028
 8102b5c:	40020040 	.word	0x40020040
 8102b60:	40020058 	.word	0x40020058
 8102b64:	40020070 	.word	0x40020070
 8102b68:	40020088 	.word	0x40020088
 8102b6c:	400200a0 	.word	0x400200a0
 8102b70:	400200b8 	.word	0x400200b8
 8102b74:	40020410 	.word	0x40020410
 8102b78:	40020428 	.word	0x40020428
 8102b7c:	40020440 	.word	0x40020440
 8102b80:	40020458 	.word	0x40020458
 8102b84:	40020470 	.word	0x40020470
 8102b88:	40020488 	.word	0x40020488
 8102b8c:	400204a0 	.word	0x400204a0
 8102b90:	400204b8 	.word	0x400204b8

08102b94 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8102b94:	b480      	push	{r7}
 8102b96:	b087      	sub	sp, #28
 8102b98:	af00      	add	r7, sp, #0
 8102b9a:	60f8      	str	r0, [r7, #12]
 8102b9c:	60b9      	str	r1, [r7, #8]
 8102b9e:	607a      	str	r2, [r7, #4]
 8102ba0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102ba2:	68fb      	ldr	r3, [r7, #12]
 8102ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ba6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102ba8:	68fb      	ldr	r3, [r7, #12]
 8102baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102bac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102bae:	68fb      	ldr	r3, [r7, #12]
 8102bb0:	681b      	ldr	r3, [r3, #0]
 8102bb2:	4a84      	ldr	r2, [pc, #528]	; (8102dc4 <DMA_SetConfig+0x230>)
 8102bb4:	4293      	cmp	r3, r2
 8102bb6:	d072      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102bb8:	68fb      	ldr	r3, [r7, #12]
 8102bba:	681b      	ldr	r3, [r3, #0]
 8102bbc:	4a82      	ldr	r2, [pc, #520]	; (8102dc8 <DMA_SetConfig+0x234>)
 8102bbe:	4293      	cmp	r3, r2
 8102bc0:	d06d      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102bc2:	68fb      	ldr	r3, [r7, #12]
 8102bc4:	681b      	ldr	r3, [r3, #0]
 8102bc6:	4a81      	ldr	r2, [pc, #516]	; (8102dcc <DMA_SetConfig+0x238>)
 8102bc8:	4293      	cmp	r3, r2
 8102bca:	d068      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102bcc:	68fb      	ldr	r3, [r7, #12]
 8102bce:	681b      	ldr	r3, [r3, #0]
 8102bd0:	4a7f      	ldr	r2, [pc, #508]	; (8102dd0 <DMA_SetConfig+0x23c>)
 8102bd2:	4293      	cmp	r3, r2
 8102bd4:	d063      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102bd6:	68fb      	ldr	r3, [r7, #12]
 8102bd8:	681b      	ldr	r3, [r3, #0]
 8102bda:	4a7e      	ldr	r2, [pc, #504]	; (8102dd4 <DMA_SetConfig+0x240>)
 8102bdc:	4293      	cmp	r3, r2
 8102bde:	d05e      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102be0:	68fb      	ldr	r3, [r7, #12]
 8102be2:	681b      	ldr	r3, [r3, #0]
 8102be4:	4a7c      	ldr	r2, [pc, #496]	; (8102dd8 <DMA_SetConfig+0x244>)
 8102be6:	4293      	cmp	r3, r2
 8102be8:	d059      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102bea:	68fb      	ldr	r3, [r7, #12]
 8102bec:	681b      	ldr	r3, [r3, #0]
 8102bee:	4a7b      	ldr	r2, [pc, #492]	; (8102ddc <DMA_SetConfig+0x248>)
 8102bf0:	4293      	cmp	r3, r2
 8102bf2:	d054      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102bf4:	68fb      	ldr	r3, [r7, #12]
 8102bf6:	681b      	ldr	r3, [r3, #0]
 8102bf8:	4a79      	ldr	r2, [pc, #484]	; (8102de0 <DMA_SetConfig+0x24c>)
 8102bfa:	4293      	cmp	r3, r2
 8102bfc:	d04f      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102bfe:	68fb      	ldr	r3, [r7, #12]
 8102c00:	681b      	ldr	r3, [r3, #0]
 8102c02:	4a78      	ldr	r2, [pc, #480]	; (8102de4 <DMA_SetConfig+0x250>)
 8102c04:	4293      	cmp	r3, r2
 8102c06:	d04a      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102c08:	68fb      	ldr	r3, [r7, #12]
 8102c0a:	681b      	ldr	r3, [r3, #0]
 8102c0c:	4a76      	ldr	r2, [pc, #472]	; (8102de8 <DMA_SetConfig+0x254>)
 8102c0e:	4293      	cmp	r3, r2
 8102c10:	d045      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102c12:	68fb      	ldr	r3, [r7, #12]
 8102c14:	681b      	ldr	r3, [r3, #0]
 8102c16:	4a75      	ldr	r2, [pc, #468]	; (8102dec <DMA_SetConfig+0x258>)
 8102c18:	4293      	cmp	r3, r2
 8102c1a:	d040      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102c1c:	68fb      	ldr	r3, [r7, #12]
 8102c1e:	681b      	ldr	r3, [r3, #0]
 8102c20:	4a73      	ldr	r2, [pc, #460]	; (8102df0 <DMA_SetConfig+0x25c>)
 8102c22:	4293      	cmp	r3, r2
 8102c24:	d03b      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102c26:	68fb      	ldr	r3, [r7, #12]
 8102c28:	681b      	ldr	r3, [r3, #0]
 8102c2a:	4a72      	ldr	r2, [pc, #456]	; (8102df4 <DMA_SetConfig+0x260>)
 8102c2c:	4293      	cmp	r3, r2
 8102c2e:	d036      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102c30:	68fb      	ldr	r3, [r7, #12]
 8102c32:	681b      	ldr	r3, [r3, #0]
 8102c34:	4a70      	ldr	r2, [pc, #448]	; (8102df8 <DMA_SetConfig+0x264>)
 8102c36:	4293      	cmp	r3, r2
 8102c38:	d031      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102c3a:	68fb      	ldr	r3, [r7, #12]
 8102c3c:	681b      	ldr	r3, [r3, #0]
 8102c3e:	4a6f      	ldr	r2, [pc, #444]	; (8102dfc <DMA_SetConfig+0x268>)
 8102c40:	4293      	cmp	r3, r2
 8102c42:	d02c      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102c44:	68fb      	ldr	r3, [r7, #12]
 8102c46:	681b      	ldr	r3, [r3, #0]
 8102c48:	4a6d      	ldr	r2, [pc, #436]	; (8102e00 <DMA_SetConfig+0x26c>)
 8102c4a:	4293      	cmp	r3, r2
 8102c4c:	d027      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102c4e:	68fb      	ldr	r3, [r7, #12]
 8102c50:	681b      	ldr	r3, [r3, #0]
 8102c52:	4a6c      	ldr	r2, [pc, #432]	; (8102e04 <DMA_SetConfig+0x270>)
 8102c54:	4293      	cmp	r3, r2
 8102c56:	d022      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102c58:	68fb      	ldr	r3, [r7, #12]
 8102c5a:	681b      	ldr	r3, [r3, #0]
 8102c5c:	4a6a      	ldr	r2, [pc, #424]	; (8102e08 <DMA_SetConfig+0x274>)
 8102c5e:	4293      	cmp	r3, r2
 8102c60:	d01d      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102c62:	68fb      	ldr	r3, [r7, #12]
 8102c64:	681b      	ldr	r3, [r3, #0]
 8102c66:	4a69      	ldr	r2, [pc, #420]	; (8102e0c <DMA_SetConfig+0x278>)
 8102c68:	4293      	cmp	r3, r2
 8102c6a:	d018      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102c6c:	68fb      	ldr	r3, [r7, #12]
 8102c6e:	681b      	ldr	r3, [r3, #0]
 8102c70:	4a67      	ldr	r2, [pc, #412]	; (8102e10 <DMA_SetConfig+0x27c>)
 8102c72:	4293      	cmp	r3, r2
 8102c74:	d013      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102c76:	68fb      	ldr	r3, [r7, #12]
 8102c78:	681b      	ldr	r3, [r3, #0]
 8102c7a:	4a66      	ldr	r2, [pc, #408]	; (8102e14 <DMA_SetConfig+0x280>)
 8102c7c:	4293      	cmp	r3, r2
 8102c7e:	d00e      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102c80:	68fb      	ldr	r3, [r7, #12]
 8102c82:	681b      	ldr	r3, [r3, #0]
 8102c84:	4a64      	ldr	r2, [pc, #400]	; (8102e18 <DMA_SetConfig+0x284>)
 8102c86:	4293      	cmp	r3, r2
 8102c88:	d009      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102c8a:	68fb      	ldr	r3, [r7, #12]
 8102c8c:	681b      	ldr	r3, [r3, #0]
 8102c8e:	4a63      	ldr	r2, [pc, #396]	; (8102e1c <DMA_SetConfig+0x288>)
 8102c90:	4293      	cmp	r3, r2
 8102c92:	d004      	beq.n	8102c9e <DMA_SetConfig+0x10a>
 8102c94:	68fb      	ldr	r3, [r7, #12]
 8102c96:	681b      	ldr	r3, [r3, #0]
 8102c98:	4a61      	ldr	r2, [pc, #388]	; (8102e20 <DMA_SetConfig+0x28c>)
 8102c9a:	4293      	cmp	r3, r2
 8102c9c:	d101      	bne.n	8102ca2 <DMA_SetConfig+0x10e>
 8102c9e:	2301      	movs	r3, #1
 8102ca0:	e000      	b.n	8102ca4 <DMA_SetConfig+0x110>
 8102ca2:	2300      	movs	r3, #0
 8102ca4:	2b00      	cmp	r3, #0
 8102ca6:	d00d      	beq.n	8102cc4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102ca8:	68fb      	ldr	r3, [r7, #12]
 8102caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102cac:	68fa      	ldr	r2, [r7, #12]
 8102cae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102cb0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8102cb2:	68fb      	ldr	r3, [r7, #12]
 8102cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102cb6:	2b00      	cmp	r3, #0
 8102cb8:	d004      	beq.n	8102cc4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102cba:	68fb      	ldr	r3, [r7, #12]
 8102cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102cbe:	68fa      	ldr	r2, [r7, #12]
 8102cc0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102cc2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102cc4:	68fb      	ldr	r3, [r7, #12]
 8102cc6:	681b      	ldr	r3, [r3, #0]
 8102cc8:	4a3e      	ldr	r2, [pc, #248]	; (8102dc4 <DMA_SetConfig+0x230>)
 8102cca:	4293      	cmp	r3, r2
 8102ccc:	d04a      	beq.n	8102d64 <DMA_SetConfig+0x1d0>
 8102cce:	68fb      	ldr	r3, [r7, #12]
 8102cd0:	681b      	ldr	r3, [r3, #0]
 8102cd2:	4a3d      	ldr	r2, [pc, #244]	; (8102dc8 <DMA_SetConfig+0x234>)
 8102cd4:	4293      	cmp	r3, r2
 8102cd6:	d045      	beq.n	8102d64 <DMA_SetConfig+0x1d0>
 8102cd8:	68fb      	ldr	r3, [r7, #12]
 8102cda:	681b      	ldr	r3, [r3, #0]
 8102cdc:	4a3b      	ldr	r2, [pc, #236]	; (8102dcc <DMA_SetConfig+0x238>)
 8102cde:	4293      	cmp	r3, r2
 8102ce0:	d040      	beq.n	8102d64 <DMA_SetConfig+0x1d0>
 8102ce2:	68fb      	ldr	r3, [r7, #12]
 8102ce4:	681b      	ldr	r3, [r3, #0]
 8102ce6:	4a3a      	ldr	r2, [pc, #232]	; (8102dd0 <DMA_SetConfig+0x23c>)
 8102ce8:	4293      	cmp	r3, r2
 8102cea:	d03b      	beq.n	8102d64 <DMA_SetConfig+0x1d0>
 8102cec:	68fb      	ldr	r3, [r7, #12]
 8102cee:	681b      	ldr	r3, [r3, #0]
 8102cf0:	4a38      	ldr	r2, [pc, #224]	; (8102dd4 <DMA_SetConfig+0x240>)
 8102cf2:	4293      	cmp	r3, r2
 8102cf4:	d036      	beq.n	8102d64 <DMA_SetConfig+0x1d0>
 8102cf6:	68fb      	ldr	r3, [r7, #12]
 8102cf8:	681b      	ldr	r3, [r3, #0]
 8102cfa:	4a37      	ldr	r2, [pc, #220]	; (8102dd8 <DMA_SetConfig+0x244>)
 8102cfc:	4293      	cmp	r3, r2
 8102cfe:	d031      	beq.n	8102d64 <DMA_SetConfig+0x1d0>
 8102d00:	68fb      	ldr	r3, [r7, #12]
 8102d02:	681b      	ldr	r3, [r3, #0]
 8102d04:	4a35      	ldr	r2, [pc, #212]	; (8102ddc <DMA_SetConfig+0x248>)
 8102d06:	4293      	cmp	r3, r2
 8102d08:	d02c      	beq.n	8102d64 <DMA_SetConfig+0x1d0>
 8102d0a:	68fb      	ldr	r3, [r7, #12]
 8102d0c:	681b      	ldr	r3, [r3, #0]
 8102d0e:	4a34      	ldr	r2, [pc, #208]	; (8102de0 <DMA_SetConfig+0x24c>)
 8102d10:	4293      	cmp	r3, r2
 8102d12:	d027      	beq.n	8102d64 <DMA_SetConfig+0x1d0>
 8102d14:	68fb      	ldr	r3, [r7, #12]
 8102d16:	681b      	ldr	r3, [r3, #0]
 8102d18:	4a32      	ldr	r2, [pc, #200]	; (8102de4 <DMA_SetConfig+0x250>)
 8102d1a:	4293      	cmp	r3, r2
 8102d1c:	d022      	beq.n	8102d64 <DMA_SetConfig+0x1d0>
 8102d1e:	68fb      	ldr	r3, [r7, #12]
 8102d20:	681b      	ldr	r3, [r3, #0]
 8102d22:	4a31      	ldr	r2, [pc, #196]	; (8102de8 <DMA_SetConfig+0x254>)
 8102d24:	4293      	cmp	r3, r2
 8102d26:	d01d      	beq.n	8102d64 <DMA_SetConfig+0x1d0>
 8102d28:	68fb      	ldr	r3, [r7, #12]
 8102d2a:	681b      	ldr	r3, [r3, #0]
 8102d2c:	4a2f      	ldr	r2, [pc, #188]	; (8102dec <DMA_SetConfig+0x258>)
 8102d2e:	4293      	cmp	r3, r2
 8102d30:	d018      	beq.n	8102d64 <DMA_SetConfig+0x1d0>
 8102d32:	68fb      	ldr	r3, [r7, #12]
 8102d34:	681b      	ldr	r3, [r3, #0]
 8102d36:	4a2e      	ldr	r2, [pc, #184]	; (8102df0 <DMA_SetConfig+0x25c>)
 8102d38:	4293      	cmp	r3, r2
 8102d3a:	d013      	beq.n	8102d64 <DMA_SetConfig+0x1d0>
 8102d3c:	68fb      	ldr	r3, [r7, #12]
 8102d3e:	681b      	ldr	r3, [r3, #0]
 8102d40:	4a2c      	ldr	r2, [pc, #176]	; (8102df4 <DMA_SetConfig+0x260>)
 8102d42:	4293      	cmp	r3, r2
 8102d44:	d00e      	beq.n	8102d64 <DMA_SetConfig+0x1d0>
 8102d46:	68fb      	ldr	r3, [r7, #12]
 8102d48:	681b      	ldr	r3, [r3, #0]
 8102d4a:	4a2b      	ldr	r2, [pc, #172]	; (8102df8 <DMA_SetConfig+0x264>)
 8102d4c:	4293      	cmp	r3, r2
 8102d4e:	d009      	beq.n	8102d64 <DMA_SetConfig+0x1d0>
 8102d50:	68fb      	ldr	r3, [r7, #12]
 8102d52:	681b      	ldr	r3, [r3, #0]
 8102d54:	4a29      	ldr	r2, [pc, #164]	; (8102dfc <DMA_SetConfig+0x268>)
 8102d56:	4293      	cmp	r3, r2
 8102d58:	d004      	beq.n	8102d64 <DMA_SetConfig+0x1d0>
 8102d5a:	68fb      	ldr	r3, [r7, #12]
 8102d5c:	681b      	ldr	r3, [r3, #0]
 8102d5e:	4a28      	ldr	r2, [pc, #160]	; (8102e00 <DMA_SetConfig+0x26c>)
 8102d60:	4293      	cmp	r3, r2
 8102d62:	d101      	bne.n	8102d68 <DMA_SetConfig+0x1d4>
 8102d64:	2301      	movs	r3, #1
 8102d66:	e000      	b.n	8102d6a <DMA_SetConfig+0x1d6>
 8102d68:	2300      	movs	r3, #0
 8102d6a:	2b00      	cmp	r3, #0
 8102d6c:	d05a      	beq.n	8102e24 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102d6e:	68fb      	ldr	r3, [r7, #12]
 8102d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102d72:	f003 031f 	and.w	r3, r3, #31
 8102d76:	223f      	movs	r2, #63	; 0x3f
 8102d78:	409a      	lsls	r2, r3
 8102d7a:	697b      	ldr	r3, [r7, #20]
 8102d7c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8102d7e:	68fb      	ldr	r3, [r7, #12]
 8102d80:	681b      	ldr	r3, [r3, #0]
 8102d82:	681a      	ldr	r2, [r3, #0]
 8102d84:	68fb      	ldr	r3, [r7, #12]
 8102d86:	681b      	ldr	r3, [r3, #0]
 8102d88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8102d8c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8102d8e:	68fb      	ldr	r3, [r7, #12]
 8102d90:	681b      	ldr	r3, [r3, #0]
 8102d92:	683a      	ldr	r2, [r7, #0]
 8102d94:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8102d96:	68fb      	ldr	r3, [r7, #12]
 8102d98:	689b      	ldr	r3, [r3, #8]
 8102d9a:	2b40      	cmp	r3, #64	; 0x40
 8102d9c:	d108      	bne.n	8102db0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8102d9e:	68fb      	ldr	r3, [r7, #12]
 8102da0:	681b      	ldr	r3, [r3, #0]
 8102da2:	687a      	ldr	r2, [r7, #4]
 8102da4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8102da6:	68fb      	ldr	r3, [r7, #12]
 8102da8:	681b      	ldr	r3, [r3, #0]
 8102daa:	68ba      	ldr	r2, [r7, #8]
 8102dac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8102dae:	e087      	b.n	8102ec0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8102db0:	68fb      	ldr	r3, [r7, #12]
 8102db2:	681b      	ldr	r3, [r3, #0]
 8102db4:	68ba      	ldr	r2, [r7, #8]
 8102db6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8102db8:	68fb      	ldr	r3, [r7, #12]
 8102dba:	681b      	ldr	r3, [r3, #0]
 8102dbc:	687a      	ldr	r2, [r7, #4]
 8102dbe:	60da      	str	r2, [r3, #12]
}
 8102dc0:	e07e      	b.n	8102ec0 <DMA_SetConfig+0x32c>
 8102dc2:	bf00      	nop
 8102dc4:	40020010 	.word	0x40020010
 8102dc8:	40020028 	.word	0x40020028
 8102dcc:	40020040 	.word	0x40020040
 8102dd0:	40020058 	.word	0x40020058
 8102dd4:	40020070 	.word	0x40020070
 8102dd8:	40020088 	.word	0x40020088
 8102ddc:	400200a0 	.word	0x400200a0
 8102de0:	400200b8 	.word	0x400200b8
 8102de4:	40020410 	.word	0x40020410
 8102de8:	40020428 	.word	0x40020428
 8102dec:	40020440 	.word	0x40020440
 8102df0:	40020458 	.word	0x40020458
 8102df4:	40020470 	.word	0x40020470
 8102df8:	40020488 	.word	0x40020488
 8102dfc:	400204a0 	.word	0x400204a0
 8102e00:	400204b8 	.word	0x400204b8
 8102e04:	58025408 	.word	0x58025408
 8102e08:	5802541c 	.word	0x5802541c
 8102e0c:	58025430 	.word	0x58025430
 8102e10:	58025444 	.word	0x58025444
 8102e14:	58025458 	.word	0x58025458
 8102e18:	5802546c 	.word	0x5802546c
 8102e1c:	58025480 	.word	0x58025480
 8102e20:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102e24:	68fb      	ldr	r3, [r7, #12]
 8102e26:	681b      	ldr	r3, [r3, #0]
 8102e28:	4a28      	ldr	r2, [pc, #160]	; (8102ecc <DMA_SetConfig+0x338>)
 8102e2a:	4293      	cmp	r3, r2
 8102e2c:	d022      	beq.n	8102e74 <DMA_SetConfig+0x2e0>
 8102e2e:	68fb      	ldr	r3, [r7, #12]
 8102e30:	681b      	ldr	r3, [r3, #0]
 8102e32:	4a27      	ldr	r2, [pc, #156]	; (8102ed0 <DMA_SetConfig+0x33c>)
 8102e34:	4293      	cmp	r3, r2
 8102e36:	d01d      	beq.n	8102e74 <DMA_SetConfig+0x2e0>
 8102e38:	68fb      	ldr	r3, [r7, #12]
 8102e3a:	681b      	ldr	r3, [r3, #0]
 8102e3c:	4a25      	ldr	r2, [pc, #148]	; (8102ed4 <DMA_SetConfig+0x340>)
 8102e3e:	4293      	cmp	r3, r2
 8102e40:	d018      	beq.n	8102e74 <DMA_SetConfig+0x2e0>
 8102e42:	68fb      	ldr	r3, [r7, #12]
 8102e44:	681b      	ldr	r3, [r3, #0]
 8102e46:	4a24      	ldr	r2, [pc, #144]	; (8102ed8 <DMA_SetConfig+0x344>)
 8102e48:	4293      	cmp	r3, r2
 8102e4a:	d013      	beq.n	8102e74 <DMA_SetConfig+0x2e0>
 8102e4c:	68fb      	ldr	r3, [r7, #12]
 8102e4e:	681b      	ldr	r3, [r3, #0]
 8102e50:	4a22      	ldr	r2, [pc, #136]	; (8102edc <DMA_SetConfig+0x348>)
 8102e52:	4293      	cmp	r3, r2
 8102e54:	d00e      	beq.n	8102e74 <DMA_SetConfig+0x2e0>
 8102e56:	68fb      	ldr	r3, [r7, #12]
 8102e58:	681b      	ldr	r3, [r3, #0]
 8102e5a:	4a21      	ldr	r2, [pc, #132]	; (8102ee0 <DMA_SetConfig+0x34c>)
 8102e5c:	4293      	cmp	r3, r2
 8102e5e:	d009      	beq.n	8102e74 <DMA_SetConfig+0x2e0>
 8102e60:	68fb      	ldr	r3, [r7, #12]
 8102e62:	681b      	ldr	r3, [r3, #0]
 8102e64:	4a1f      	ldr	r2, [pc, #124]	; (8102ee4 <DMA_SetConfig+0x350>)
 8102e66:	4293      	cmp	r3, r2
 8102e68:	d004      	beq.n	8102e74 <DMA_SetConfig+0x2e0>
 8102e6a:	68fb      	ldr	r3, [r7, #12]
 8102e6c:	681b      	ldr	r3, [r3, #0]
 8102e6e:	4a1e      	ldr	r2, [pc, #120]	; (8102ee8 <DMA_SetConfig+0x354>)
 8102e70:	4293      	cmp	r3, r2
 8102e72:	d101      	bne.n	8102e78 <DMA_SetConfig+0x2e4>
 8102e74:	2301      	movs	r3, #1
 8102e76:	e000      	b.n	8102e7a <DMA_SetConfig+0x2e6>
 8102e78:	2300      	movs	r3, #0
 8102e7a:	2b00      	cmp	r3, #0
 8102e7c:	d020      	beq.n	8102ec0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8102e7e:	68fb      	ldr	r3, [r7, #12]
 8102e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102e82:	f003 031f 	and.w	r3, r3, #31
 8102e86:	2201      	movs	r2, #1
 8102e88:	409a      	lsls	r2, r3
 8102e8a:	693b      	ldr	r3, [r7, #16]
 8102e8c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8102e8e:	68fb      	ldr	r3, [r7, #12]
 8102e90:	681b      	ldr	r3, [r3, #0]
 8102e92:	683a      	ldr	r2, [r7, #0]
 8102e94:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8102e96:	68fb      	ldr	r3, [r7, #12]
 8102e98:	689b      	ldr	r3, [r3, #8]
 8102e9a:	2b40      	cmp	r3, #64	; 0x40
 8102e9c:	d108      	bne.n	8102eb0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8102e9e:	68fb      	ldr	r3, [r7, #12]
 8102ea0:	681b      	ldr	r3, [r3, #0]
 8102ea2:	687a      	ldr	r2, [r7, #4]
 8102ea4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8102ea6:	68fb      	ldr	r3, [r7, #12]
 8102ea8:	681b      	ldr	r3, [r3, #0]
 8102eaa:	68ba      	ldr	r2, [r7, #8]
 8102eac:	60da      	str	r2, [r3, #12]
}
 8102eae:	e007      	b.n	8102ec0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8102eb0:	68fb      	ldr	r3, [r7, #12]
 8102eb2:	681b      	ldr	r3, [r3, #0]
 8102eb4:	68ba      	ldr	r2, [r7, #8]
 8102eb6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8102eb8:	68fb      	ldr	r3, [r7, #12]
 8102eba:	681b      	ldr	r3, [r3, #0]
 8102ebc:	687a      	ldr	r2, [r7, #4]
 8102ebe:	60da      	str	r2, [r3, #12]
}
 8102ec0:	bf00      	nop
 8102ec2:	371c      	adds	r7, #28
 8102ec4:	46bd      	mov	sp, r7
 8102ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eca:	4770      	bx	lr
 8102ecc:	58025408 	.word	0x58025408
 8102ed0:	5802541c 	.word	0x5802541c
 8102ed4:	58025430 	.word	0x58025430
 8102ed8:	58025444 	.word	0x58025444
 8102edc:	58025458 	.word	0x58025458
 8102ee0:	5802546c 	.word	0x5802546c
 8102ee4:	58025480 	.word	0x58025480
 8102ee8:	58025494 	.word	0x58025494

08102eec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8102eec:	b480      	push	{r7}
 8102eee:	b085      	sub	sp, #20
 8102ef0:	af00      	add	r7, sp, #0
 8102ef2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102ef4:	687b      	ldr	r3, [r7, #4]
 8102ef6:	681b      	ldr	r3, [r3, #0]
 8102ef8:	4a43      	ldr	r2, [pc, #268]	; (8103008 <DMA_CalcBaseAndBitshift+0x11c>)
 8102efa:	4293      	cmp	r3, r2
 8102efc:	d04a      	beq.n	8102f94 <DMA_CalcBaseAndBitshift+0xa8>
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	681b      	ldr	r3, [r3, #0]
 8102f02:	4a42      	ldr	r2, [pc, #264]	; (810300c <DMA_CalcBaseAndBitshift+0x120>)
 8102f04:	4293      	cmp	r3, r2
 8102f06:	d045      	beq.n	8102f94 <DMA_CalcBaseAndBitshift+0xa8>
 8102f08:	687b      	ldr	r3, [r7, #4]
 8102f0a:	681b      	ldr	r3, [r3, #0]
 8102f0c:	4a40      	ldr	r2, [pc, #256]	; (8103010 <DMA_CalcBaseAndBitshift+0x124>)
 8102f0e:	4293      	cmp	r3, r2
 8102f10:	d040      	beq.n	8102f94 <DMA_CalcBaseAndBitshift+0xa8>
 8102f12:	687b      	ldr	r3, [r7, #4]
 8102f14:	681b      	ldr	r3, [r3, #0]
 8102f16:	4a3f      	ldr	r2, [pc, #252]	; (8103014 <DMA_CalcBaseAndBitshift+0x128>)
 8102f18:	4293      	cmp	r3, r2
 8102f1a:	d03b      	beq.n	8102f94 <DMA_CalcBaseAndBitshift+0xa8>
 8102f1c:	687b      	ldr	r3, [r7, #4]
 8102f1e:	681b      	ldr	r3, [r3, #0]
 8102f20:	4a3d      	ldr	r2, [pc, #244]	; (8103018 <DMA_CalcBaseAndBitshift+0x12c>)
 8102f22:	4293      	cmp	r3, r2
 8102f24:	d036      	beq.n	8102f94 <DMA_CalcBaseAndBitshift+0xa8>
 8102f26:	687b      	ldr	r3, [r7, #4]
 8102f28:	681b      	ldr	r3, [r3, #0]
 8102f2a:	4a3c      	ldr	r2, [pc, #240]	; (810301c <DMA_CalcBaseAndBitshift+0x130>)
 8102f2c:	4293      	cmp	r3, r2
 8102f2e:	d031      	beq.n	8102f94 <DMA_CalcBaseAndBitshift+0xa8>
 8102f30:	687b      	ldr	r3, [r7, #4]
 8102f32:	681b      	ldr	r3, [r3, #0]
 8102f34:	4a3a      	ldr	r2, [pc, #232]	; (8103020 <DMA_CalcBaseAndBitshift+0x134>)
 8102f36:	4293      	cmp	r3, r2
 8102f38:	d02c      	beq.n	8102f94 <DMA_CalcBaseAndBitshift+0xa8>
 8102f3a:	687b      	ldr	r3, [r7, #4]
 8102f3c:	681b      	ldr	r3, [r3, #0]
 8102f3e:	4a39      	ldr	r2, [pc, #228]	; (8103024 <DMA_CalcBaseAndBitshift+0x138>)
 8102f40:	4293      	cmp	r3, r2
 8102f42:	d027      	beq.n	8102f94 <DMA_CalcBaseAndBitshift+0xa8>
 8102f44:	687b      	ldr	r3, [r7, #4]
 8102f46:	681b      	ldr	r3, [r3, #0]
 8102f48:	4a37      	ldr	r2, [pc, #220]	; (8103028 <DMA_CalcBaseAndBitshift+0x13c>)
 8102f4a:	4293      	cmp	r3, r2
 8102f4c:	d022      	beq.n	8102f94 <DMA_CalcBaseAndBitshift+0xa8>
 8102f4e:	687b      	ldr	r3, [r7, #4]
 8102f50:	681b      	ldr	r3, [r3, #0]
 8102f52:	4a36      	ldr	r2, [pc, #216]	; (810302c <DMA_CalcBaseAndBitshift+0x140>)
 8102f54:	4293      	cmp	r3, r2
 8102f56:	d01d      	beq.n	8102f94 <DMA_CalcBaseAndBitshift+0xa8>
 8102f58:	687b      	ldr	r3, [r7, #4]
 8102f5a:	681b      	ldr	r3, [r3, #0]
 8102f5c:	4a34      	ldr	r2, [pc, #208]	; (8103030 <DMA_CalcBaseAndBitshift+0x144>)
 8102f5e:	4293      	cmp	r3, r2
 8102f60:	d018      	beq.n	8102f94 <DMA_CalcBaseAndBitshift+0xa8>
 8102f62:	687b      	ldr	r3, [r7, #4]
 8102f64:	681b      	ldr	r3, [r3, #0]
 8102f66:	4a33      	ldr	r2, [pc, #204]	; (8103034 <DMA_CalcBaseAndBitshift+0x148>)
 8102f68:	4293      	cmp	r3, r2
 8102f6a:	d013      	beq.n	8102f94 <DMA_CalcBaseAndBitshift+0xa8>
 8102f6c:	687b      	ldr	r3, [r7, #4]
 8102f6e:	681b      	ldr	r3, [r3, #0]
 8102f70:	4a31      	ldr	r2, [pc, #196]	; (8103038 <DMA_CalcBaseAndBitshift+0x14c>)
 8102f72:	4293      	cmp	r3, r2
 8102f74:	d00e      	beq.n	8102f94 <DMA_CalcBaseAndBitshift+0xa8>
 8102f76:	687b      	ldr	r3, [r7, #4]
 8102f78:	681b      	ldr	r3, [r3, #0]
 8102f7a:	4a30      	ldr	r2, [pc, #192]	; (810303c <DMA_CalcBaseAndBitshift+0x150>)
 8102f7c:	4293      	cmp	r3, r2
 8102f7e:	d009      	beq.n	8102f94 <DMA_CalcBaseAndBitshift+0xa8>
 8102f80:	687b      	ldr	r3, [r7, #4]
 8102f82:	681b      	ldr	r3, [r3, #0]
 8102f84:	4a2e      	ldr	r2, [pc, #184]	; (8103040 <DMA_CalcBaseAndBitshift+0x154>)
 8102f86:	4293      	cmp	r3, r2
 8102f88:	d004      	beq.n	8102f94 <DMA_CalcBaseAndBitshift+0xa8>
 8102f8a:	687b      	ldr	r3, [r7, #4]
 8102f8c:	681b      	ldr	r3, [r3, #0]
 8102f8e:	4a2d      	ldr	r2, [pc, #180]	; (8103044 <DMA_CalcBaseAndBitshift+0x158>)
 8102f90:	4293      	cmp	r3, r2
 8102f92:	d101      	bne.n	8102f98 <DMA_CalcBaseAndBitshift+0xac>
 8102f94:	2301      	movs	r3, #1
 8102f96:	e000      	b.n	8102f9a <DMA_CalcBaseAndBitshift+0xae>
 8102f98:	2300      	movs	r3, #0
 8102f9a:	2b00      	cmp	r3, #0
 8102f9c:	d026      	beq.n	8102fec <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8102f9e:	687b      	ldr	r3, [r7, #4]
 8102fa0:	681b      	ldr	r3, [r3, #0]
 8102fa2:	b2db      	uxtb	r3, r3
 8102fa4:	3b10      	subs	r3, #16
 8102fa6:	4a28      	ldr	r2, [pc, #160]	; (8103048 <DMA_CalcBaseAndBitshift+0x15c>)
 8102fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8102fac:	091b      	lsrs	r3, r3, #4
 8102fae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8102fb0:	68fb      	ldr	r3, [r7, #12]
 8102fb2:	f003 0307 	and.w	r3, r3, #7
 8102fb6:	4a25      	ldr	r2, [pc, #148]	; (810304c <DMA_CalcBaseAndBitshift+0x160>)
 8102fb8:	5cd3      	ldrb	r3, [r2, r3]
 8102fba:	461a      	mov	r2, r3
 8102fbc:	687b      	ldr	r3, [r7, #4]
 8102fbe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8102fc0:	68fb      	ldr	r3, [r7, #12]
 8102fc2:	2b03      	cmp	r3, #3
 8102fc4:	d909      	bls.n	8102fda <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8102fc6:	687b      	ldr	r3, [r7, #4]
 8102fc8:	681b      	ldr	r3, [r3, #0]
 8102fca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8102fce:	f023 0303 	bic.w	r3, r3, #3
 8102fd2:	1d1a      	adds	r2, r3, #4
 8102fd4:	687b      	ldr	r3, [r7, #4]
 8102fd6:	659a      	str	r2, [r3, #88]	; 0x58
 8102fd8:	e00e      	b.n	8102ff8 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8102fda:	687b      	ldr	r3, [r7, #4]
 8102fdc:	681b      	ldr	r3, [r3, #0]
 8102fde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8102fe2:	f023 0303 	bic.w	r3, r3, #3
 8102fe6:	687a      	ldr	r2, [r7, #4]
 8102fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8102fea:	e005      	b.n	8102ff8 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	681b      	ldr	r3, [r3, #0]
 8102ff0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8102ff4:	687b      	ldr	r3, [r7, #4]
 8102ff6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8102ffc:	4618      	mov	r0, r3
 8102ffe:	3714      	adds	r7, #20
 8103000:	46bd      	mov	sp, r7
 8103002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103006:	4770      	bx	lr
 8103008:	40020010 	.word	0x40020010
 810300c:	40020028 	.word	0x40020028
 8103010:	40020040 	.word	0x40020040
 8103014:	40020058 	.word	0x40020058
 8103018:	40020070 	.word	0x40020070
 810301c:	40020088 	.word	0x40020088
 8103020:	400200a0 	.word	0x400200a0
 8103024:	400200b8 	.word	0x400200b8
 8103028:	40020410 	.word	0x40020410
 810302c:	40020428 	.word	0x40020428
 8103030:	40020440 	.word	0x40020440
 8103034:	40020458 	.word	0x40020458
 8103038:	40020470 	.word	0x40020470
 810303c:	40020488 	.word	0x40020488
 8103040:	400204a0 	.word	0x400204a0
 8103044:	400204b8 	.word	0x400204b8
 8103048:	aaaaaaab 	.word	0xaaaaaaab
 810304c:	0810538c 	.word	0x0810538c

08103050 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8103050:	b480      	push	{r7}
 8103052:	b085      	sub	sp, #20
 8103054:	af00      	add	r7, sp, #0
 8103056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103058:	2300      	movs	r3, #0
 810305a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	699b      	ldr	r3, [r3, #24]
 8103060:	2b00      	cmp	r3, #0
 8103062:	d120      	bne.n	81030a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8103064:	687b      	ldr	r3, [r7, #4]
 8103066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103068:	2b03      	cmp	r3, #3
 810306a:	d858      	bhi.n	810311e <DMA_CheckFifoParam+0xce>
 810306c:	a201      	add	r2, pc, #4	; (adr r2, 8103074 <DMA_CheckFifoParam+0x24>)
 810306e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103072:	bf00      	nop
 8103074:	08103085 	.word	0x08103085
 8103078:	08103097 	.word	0x08103097
 810307c:	08103085 	.word	0x08103085
 8103080:	0810311f 	.word	0x0810311f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103084:	687b      	ldr	r3, [r7, #4]
 8103086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810308c:	2b00      	cmp	r3, #0
 810308e:	d048      	beq.n	8103122 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8103090:	2301      	movs	r3, #1
 8103092:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103094:	e045      	b.n	8103122 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103096:	687b      	ldr	r3, [r7, #4]
 8103098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810309a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810309e:	d142      	bne.n	8103126 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 81030a0:	2301      	movs	r3, #1
 81030a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81030a4:	e03f      	b.n	8103126 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 81030a6:	687b      	ldr	r3, [r7, #4]
 81030a8:	699b      	ldr	r3, [r3, #24]
 81030aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81030ae:	d123      	bne.n	81030f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 81030b0:	687b      	ldr	r3, [r7, #4]
 81030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81030b4:	2b03      	cmp	r3, #3
 81030b6:	d838      	bhi.n	810312a <DMA_CheckFifoParam+0xda>
 81030b8:	a201      	add	r2, pc, #4	; (adr r2, 81030c0 <DMA_CheckFifoParam+0x70>)
 81030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81030be:	bf00      	nop
 81030c0:	081030d1 	.word	0x081030d1
 81030c4:	081030d7 	.word	0x081030d7
 81030c8:	081030d1 	.word	0x081030d1
 81030cc:	081030e9 	.word	0x081030e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 81030d0:	2301      	movs	r3, #1
 81030d2:	73fb      	strb	r3, [r7, #15]
        break;
 81030d4:	e030      	b.n	8103138 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81030da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81030de:	2b00      	cmp	r3, #0
 81030e0:	d025      	beq.n	810312e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 81030e2:	2301      	movs	r3, #1
 81030e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81030e6:	e022      	b.n	810312e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81030ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81030f0:	d11f      	bne.n	8103132 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 81030f2:	2301      	movs	r3, #1
 81030f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81030f6:	e01c      	b.n	8103132 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81030fc:	2b02      	cmp	r3, #2
 81030fe:	d902      	bls.n	8103106 <DMA_CheckFifoParam+0xb6>
 8103100:	2b03      	cmp	r3, #3
 8103102:	d003      	beq.n	810310c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8103104:	e018      	b.n	8103138 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8103106:	2301      	movs	r3, #1
 8103108:	73fb      	strb	r3, [r7, #15]
        break;
 810310a:	e015      	b.n	8103138 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 810310c:	687b      	ldr	r3, [r7, #4]
 810310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103114:	2b00      	cmp	r3, #0
 8103116:	d00e      	beq.n	8103136 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8103118:	2301      	movs	r3, #1
 810311a:	73fb      	strb	r3, [r7, #15]
    break;
 810311c:	e00b      	b.n	8103136 <DMA_CheckFifoParam+0xe6>
        break;
 810311e:	bf00      	nop
 8103120:	e00a      	b.n	8103138 <DMA_CheckFifoParam+0xe8>
        break;
 8103122:	bf00      	nop
 8103124:	e008      	b.n	8103138 <DMA_CheckFifoParam+0xe8>
        break;
 8103126:	bf00      	nop
 8103128:	e006      	b.n	8103138 <DMA_CheckFifoParam+0xe8>
        break;
 810312a:	bf00      	nop
 810312c:	e004      	b.n	8103138 <DMA_CheckFifoParam+0xe8>
        break;
 810312e:	bf00      	nop
 8103130:	e002      	b.n	8103138 <DMA_CheckFifoParam+0xe8>
        break;
 8103132:	bf00      	nop
 8103134:	e000      	b.n	8103138 <DMA_CheckFifoParam+0xe8>
    break;
 8103136:	bf00      	nop
    }
  }

  return status;
 8103138:	7bfb      	ldrb	r3, [r7, #15]
}
 810313a:	4618      	mov	r0, r3
 810313c:	3714      	adds	r7, #20
 810313e:	46bd      	mov	sp, r7
 8103140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103144:	4770      	bx	lr
 8103146:	bf00      	nop

08103148 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8103148:	b480      	push	{r7}
 810314a:	b085      	sub	sp, #20
 810314c:	af00      	add	r7, sp, #0
 810314e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8103150:	687b      	ldr	r3, [r7, #4]
 8103152:	681b      	ldr	r3, [r3, #0]
 8103154:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103156:	687b      	ldr	r3, [r7, #4]
 8103158:	681b      	ldr	r3, [r3, #0]
 810315a:	4a3a      	ldr	r2, [pc, #232]	; (8103244 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 810315c:	4293      	cmp	r3, r2
 810315e:	d022      	beq.n	81031a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	4a38      	ldr	r2, [pc, #224]	; (8103248 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8103166:	4293      	cmp	r3, r2
 8103168:	d01d      	beq.n	81031a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	681b      	ldr	r3, [r3, #0]
 810316e:	4a37      	ldr	r2, [pc, #220]	; (810324c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8103170:	4293      	cmp	r3, r2
 8103172:	d018      	beq.n	81031a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	681b      	ldr	r3, [r3, #0]
 8103178:	4a35      	ldr	r2, [pc, #212]	; (8103250 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 810317a:	4293      	cmp	r3, r2
 810317c:	d013      	beq.n	81031a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810317e:	687b      	ldr	r3, [r7, #4]
 8103180:	681b      	ldr	r3, [r3, #0]
 8103182:	4a34      	ldr	r2, [pc, #208]	; (8103254 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8103184:	4293      	cmp	r3, r2
 8103186:	d00e      	beq.n	81031a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103188:	687b      	ldr	r3, [r7, #4]
 810318a:	681b      	ldr	r3, [r3, #0]
 810318c:	4a32      	ldr	r2, [pc, #200]	; (8103258 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810318e:	4293      	cmp	r3, r2
 8103190:	d009      	beq.n	81031a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103192:	687b      	ldr	r3, [r7, #4]
 8103194:	681b      	ldr	r3, [r3, #0]
 8103196:	4a31      	ldr	r2, [pc, #196]	; (810325c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8103198:	4293      	cmp	r3, r2
 810319a:	d004      	beq.n	81031a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810319c:	687b      	ldr	r3, [r7, #4]
 810319e:	681b      	ldr	r3, [r3, #0]
 81031a0:	4a2f      	ldr	r2, [pc, #188]	; (8103260 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 81031a2:	4293      	cmp	r3, r2
 81031a4:	d101      	bne.n	81031aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 81031a6:	2301      	movs	r3, #1
 81031a8:	e000      	b.n	81031ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 81031aa:	2300      	movs	r3, #0
 81031ac:	2b00      	cmp	r3, #0
 81031ae:	d01c      	beq.n	81031ea <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	681b      	ldr	r3, [r3, #0]
 81031b4:	b2db      	uxtb	r3, r3
 81031b6:	3b08      	subs	r3, #8
 81031b8:	4a2a      	ldr	r2, [pc, #168]	; (8103264 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 81031ba:	fba2 2303 	umull	r2, r3, r2, r3
 81031be:	091b      	lsrs	r3, r3, #4
 81031c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81031c2:	68fb      	ldr	r3, [r7, #12]
 81031c4:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 81031c8:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 81031cc:	009b      	lsls	r3, r3, #2
 81031ce:	461a      	mov	r2, r3
 81031d0:	687b      	ldr	r3, [r7, #4]
 81031d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 81031d4:	687b      	ldr	r3, [r7, #4]
 81031d6:	4a24      	ldr	r2, [pc, #144]	; (8103268 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 81031d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81031da:	68fb      	ldr	r3, [r7, #12]
 81031dc:	f003 031f 	and.w	r3, r3, #31
 81031e0:	2201      	movs	r2, #1
 81031e2:	409a      	lsls	r2, r3
 81031e4:	687b      	ldr	r3, [r7, #4]
 81031e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 81031e8:	e026      	b.n	8103238 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81031ea:	687b      	ldr	r3, [r7, #4]
 81031ec:	681b      	ldr	r3, [r3, #0]
 81031ee:	b2db      	uxtb	r3, r3
 81031f0:	3b10      	subs	r3, #16
 81031f2:	4a1e      	ldr	r2, [pc, #120]	; (810326c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 81031f4:	fba2 2303 	umull	r2, r3, r2, r3
 81031f8:	091b      	lsrs	r3, r3, #4
 81031fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 81031fc:	68bb      	ldr	r3, [r7, #8]
 81031fe:	4a1c      	ldr	r2, [pc, #112]	; (8103270 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8103200:	4293      	cmp	r3, r2
 8103202:	d806      	bhi.n	8103212 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8103204:	68bb      	ldr	r3, [r7, #8]
 8103206:	4a1b      	ldr	r2, [pc, #108]	; (8103274 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8103208:	4293      	cmp	r3, r2
 810320a:	d902      	bls.n	8103212 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 810320c:	68fb      	ldr	r3, [r7, #12]
 810320e:	3308      	adds	r3, #8
 8103210:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8103212:	68fb      	ldr	r3, [r7, #12]
 8103214:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8103218:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 810321c:	009b      	lsls	r3, r3, #2
 810321e:	461a      	mov	r2, r3
 8103220:	687b      	ldr	r3, [r7, #4]
 8103222:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8103224:	687b      	ldr	r3, [r7, #4]
 8103226:	4a14      	ldr	r2, [pc, #80]	; (8103278 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8103228:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810322a:	68fb      	ldr	r3, [r7, #12]
 810322c:	f003 031f 	and.w	r3, r3, #31
 8103230:	2201      	movs	r2, #1
 8103232:	409a      	lsls	r2, r3
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	669a      	str	r2, [r3, #104]	; 0x68
}
 8103238:	bf00      	nop
 810323a:	3714      	adds	r7, #20
 810323c:	46bd      	mov	sp, r7
 810323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103242:	4770      	bx	lr
 8103244:	58025408 	.word	0x58025408
 8103248:	5802541c 	.word	0x5802541c
 810324c:	58025430 	.word	0x58025430
 8103250:	58025444 	.word	0x58025444
 8103254:	58025458 	.word	0x58025458
 8103258:	5802546c 	.word	0x5802546c
 810325c:	58025480 	.word	0x58025480
 8103260:	58025494 	.word	0x58025494
 8103264:	cccccccd 	.word	0xcccccccd
 8103268:	58025880 	.word	0x58025880
 810326c:	aaaaaaab 	.word	0xaaaaaaab
 8103270:	400204b8 	.word	0x400204b8
 8103274:	4002040f 	.word	0x4002040f
 8103278:	40020880 	.word	0x40020880

0810327c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 810327c:	b480      	push	{r7}
 810327e:	b085      	sub	sp, #20
 8103280:	af00      	add	r7, sp, #0
 8103282:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	685b      	ldr	r3, [r3, #4]
 8103288:	b2db      	uxtb	r3, r3
 810328a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 810328c:	68fb      	ldr	r3, [r7, #12]
 810328e:	2b00      	cmp	r3, #0
 8103290:	d04a      	beq.n	8103328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8103292:	68fb      	ldr	r3, [r7, #12]
 8103294:	2b08      	cmp	r3, #8
 8103296:	d847      	bhi.n	8103328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103298:	687b      	ldr	r3, [r7, #4]
 810329a:	681b      	ldr	r3, [r3, #0]
 810329c:	4a25      	ldr	r2, [pc, #148]	; (8103334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 810329e:	4293      	cmp	r3, r2
 81032a0:	d022      	beq.n	81032e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	681b      	ldr	r3, [r3, #0]
 81032a6:	4a24      	ldr	r2, [pc, #144]	; (8103338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 81032a8:	4293      	cmp	r3, r2
 81032aa:	d01d      	beq.n	81032e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81032ac:	687b      	ldr	r3, [r7, #4]
 81032ae:	681b      	ldr	r3, [r3, #0]
 81032b0:	4a22      	ldr	r2, [pc, #136]	; (810333c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 81032b2:	4293      	cmp	r3, r2
 81032b4:	d018      	beq.n	81032e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81032b6:	687b      	ldr	r3, [r7, #4]
 81032b8:	681b      	ldr	r3, [r3, #0]
 81032ba:	4a21      	ldr	r2, [pc, #132]	; (8103340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 81032bc:	4293      	cmp	r3, r2
 81032be:	d013      	beq.n	81032e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81032c0:	687b      	ldr	r3, [r7, #4]
 81032c2:	681b      	ldr	r3, [r3, #0]
 81032c4:	4a1f      	ldr	r2, [pc, #124]	; (8103344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 81032c6:	4293      	cmp	r3, r2
 81032c8:	d00e      	beq.n	81032e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81032ca:	687b      	ldr	r3, [r7, #4]
 81032cc:	681b      	ldr	r3, [r3, #0]
 81032ce:	4a1e      	ldr	r2, [pc, #120]	; (8103348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 81032d0:	4293      	cmp	r3, r2
 81032d2:	d009      	beq.n	81032e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81032d4:	687b      	ldr	r3, [r7, #4]
 81032d6:	681b      	ldr	r3, [r3, #0]
 81032d8:	4a1c      	ldr	r2, [pc, #112]	; (810334c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 81032da:	4293      	cmp	r3, r2
 81032dc:	d004      	beq.n	81032e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81032de:	687b      	ldr	r3, [r7, #4]
 81032e0:	681b      	ldr	r3, [r3, #0]
 81032e2:	4a1b      	ldr	r2, [pc, #108]	; (8103350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 81032e4:	4293      	cmp	r3, r2
 81032e6:	d101      	bne.n	81032ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 81032e8:	2301      	movs	r3, #1
 81032ea:	e000      	b.n	81032ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 81032ec:	2300      	movs	r3, #0
 81032ee:	2b00      	cmp	r3, #0
 81032f0:	d00a      	beq.n	8103308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 81032f2:	68fa      	ldr	r2, [r7, #12]
 81032f4:	4b17      	ldr	r3, [pc, #92]	; (8103354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 81032f6:	4413      	add	r3, r2
 81032f8:	009b      	lsls	r3, r3, #2
 81032fa:	461a      	mov	r2, r3
 81032fc:	687b      	ldr	r3, [r7, #4]
 81032fe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8103300:	687b      	ldr	r3, [r7, #4]
 8103302:	4a15      	ldr	r2, [pc, #84]	; (8103358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8103304:	671a      	str	r2, [r3, #112]	; 0x70
 8103306:	e009      	b.n	810331c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8103308:	68fa      	ldr	r2, [r7, #12]
 810330a:	4b14      	ldr	r3, [pc, #80]	; (810335c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 810330c:	4413      	add	r3, r2
 810330e:	009b      	lsls	r3, r3, #2
 8103310:	461a      	mov	r2, r3
 8103312:	687b      	ldr	r3, [r7, #4]
 8103314:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	4a11      	ldr	r2, [pc, #68]	; (8103360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 810331a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 810331c:	68fb      	ldr	r3, [r7, #12]
 810331e:	3b01      	subs	r3, #1
 8103320:	2201      	movs	r2, #1
 8103322:	409a      	lsls	r2, r3
 8103324:	687b      	ldr	r3, [r7, #4]
 8103326:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8103328:	bf00      	nop
 810332a:	3714      	adds	r7, #20
 810332c:	46bd      	mov	sp, r7
 810332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103332:	4770      	bx	lr
 8103334:	58025408 	.word	0x58025408
 8103338:	5802541c 	.word	0x5802541c
 810333c:	58025430 	.word	0x58025430
 8103340:	58025444 	.word	0x58025444
 8103344:	58025458 	.word	0x58025458
 8103348:	5802546c 	.word	0x5802546c
 810334c:	58025480 	.word	0x58025480
 8103350:	58025494 	.word	0x58025494
 8103354:	1600963f 	.word	0x1600963f
 8103358:	58025940 	.word	0x58025940
 810335c:	1000823f 	.word	0x1000823f
 8103360:	40020940 	.word	0x40020940

08103364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103364:	b480      	push	{r7}
 8103366:	b089      	sub	sp, #36	; 0x24
 8103368:	af00      	add	r7, sp, #0
 810336a:	6078      	str	r0, [r7, #4]
 810336c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810336e:	2300      	movs	r3, #0
 8103370:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8103372:	4b89      	ldr	r3, [pc, #548]	; (8103598 <HAL_GPIO_Init+0x234>)
 8103374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103376:	e194      	b.n	81036a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103378:	683b      	ldr	r3, [r7, #0]
 810337a:	681a      	ldr	r2, [r3, #0]
 810337c:	2101      	movs	r1, #1
 810337e:	69fb      	ldr	r3, [r7, #28]
 8103380:	fa01 f303 	lsl.w	r3, r1, r3
 8103384:	4013      	ands	r3, r2
 8103386:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103388:	693b      	ldr	r3, [r7, #16]
 810338a:	2b00      	cmp	r3, #0
 810338c:	f000 8186 	beq.w	810369c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8103390:	683b      	ldr	r3, [r7, #0]
 8103392:	685b      	ldr	r3, [r3, #4]
 8103394:	2b01      	cmp	r3, #1
 8103396:	d00b      	beq.n	81033b0 <HAL_GPIO_Init+0x4c>
 8103398:	683b      	ldr	r3, [r7, #0]
 810339a:	685b      	ldr	r3, [r3, #4]
 810339c:	2b02      	cmp	r3, #2
 810339e:	d007      	beq.n	81033b0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81033a0:	683b      	ldr	r3, [r7, #0]
 81033a2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81033a4:	2b11      	cmp	r3, #17
 81033a6:	d003      	beq.n	81033b0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81033a8:	683b      	ldr	r3, [r7, #0]
 81033aa:	685b      	ldr	r3, [r3, #4]
 81033ac:	2b12      	cmp	r3, #18
 81033ae:	d130      	bne.n	8103412 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81033b0:	687b      	ldr	r3, [r7, #4]
 81033b2:	689b      	ldr	r3, [r3, #8]
 81033b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81033b6:	69fb      	ldr	r3, [r7, #28]
 81033b8:	005b      	lsls	r3, r3, #1
 81033ba:	2203      	movs	r2, #3
 81033bc:	fa02 f303 	lsl.w	r3, r2, r3
 81033c0:	43db      	mvns	r3, r3
 81033c2:	69ba      	ldr	r2, [r7, #24]
 81033c4:	4013      	ands	r3, r2
 81033c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81033c8:	683b      	ldr	r3, [r7, #0]
 81033ca:	68da      	ldr	r2, [r3, #12]
 81033cc:	69fb      	ldr	r3, [r7, #28]
 81033ce:	005b      	lsls	r3, r3, #1
 81033d0:	fa02 f303 	lsl.w	r3, r2, r3
 81033d4:	69ba      	ldr	r2, [r7, #24]
 81033d6:	4313      	orrs	r3, r2
 81033d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81033da:	687b      	ldr	r3, [r7, #4]
 81033dc:	69ba      	ldr	r2, [r7, #24]
 81033de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81033e0:	687b      	ldr	r3, [r7, #4]
 81033e2:	685b      	ldr	r3, [r3, #4]
 81033e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81033e6:	2201      	movs	r2, #1
 81033e8:	69fb      	ldr	r3, [r7, #28]
 81033ea:	fa02 f303 	lsl.w	r3, r2, r3
 81033ee:	43db      	mvns	r3, r3
 81033f0:	69ba      	ldr	r2, [r7, #24]
 81033f2:	4013      	ands	r3, r2
 81033f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 81033f6:	683b      	ldr	r3, [r7, #0]
 81033f8:	685b      	ldr	r3, [r3, #4]
 81033fa:	091b      	lsrs	r3, r3, #4
 81033fc:	f003 0201 	and.w	r2, r3, #1
 8103400:	69fb      	ldr	r3, [r7, #28]
 8103402:	fa02 f303 	lsl.w	r3, r2, r3
 8103406:	69ba      	ldr	r2, [r7, #24]
 8103408:	4313      	orrs	r3, r2
 810340a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	69ba      	ldr	r2, [r7, #24]
 8103410:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8103412:	687b      	ldr	r3, [r7, #4]
 8103414:	68db      	ldr	r3, [r3, #12]
 8103416:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103418:	69fb      	ldr	r3, [r7, #28]
 810341a:	005b      	lsls	r3, r3, #1
 810341c:	2203      	movs	r2, #3
 810341e:	fa02 f303 	lsl.w	r3, r2, r3
 8103422:	43db      	mvns	r3, r3
 8103424:	69ba      	ldr	r2, [r7, #24]
 8103426:	4013      	ands	r3, r2
 8103428:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810342a:	683b      	ldr	r3, [r7, #0]
 810342c:	689a      	ldr	r2, [r3, #8]
 810342e:	69fb      	ldr	r3, [r7, #28]
 8103430:	005b      	lsls	r3, r3, #1
 8103432:	fa02 f303 	lsl.w	r3, r2, r3
 8103436:	69ba      	ldr	r2, [r7, #24]
 8103438:	4313      	orrs	r3, r2
 810343a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810343c:	687b      	ldr	r3, [r7, #4]
 810343e:	69ba      	ldr	r2, [r7, #24]
 8103440:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8103442:	683b      	ldr	r3, [r7, #0]
 8103444:	685b      	ldr	r3, [r3, #4]
 8103446:	2b02      	cmp	r3, #2
 8103448:	d003      	beq.n	8103452 <HAL_GPIO_Init+0xee>
 810344a:	683b      	ldr	r3, [r7, #0]
 810344c:	685b      	ldr	r3, [r3, #4]
 810344e:	2b12      	cmp	r3, #18
 8103450:	d123      	bne.n	810349a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8103452:	69fb      	ldr	r3, [r7, #28]
 8103454:	08da      	lsrs	r2, r3, #3
 8103456:	687b      	ldr	r3, [r7, #4]
 8103458:	3208      	adds	r2, #8
 810345a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103460:	69fb      	ldr	r3, [r7, #28]
 8103462:	f003 0307 	and.w	r3, r3, #7
 8103466:	009b      	lsls	r3, r3, #2
 8103468:	220f      	movs	r2, #15
 810346a:	fa02 f303 	lsl.w	r3, r2, r3
 810346e:	43db      	mvns	r3, r3
 8103470:	69ba      	ldr	r2, [r7, #24]
 8103472:	4013      	ands	r3, r2
 8103474:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103476:	683b      	ldr	r3, [r7, #0]
 8103478:	691a      	ldr	r2, [r3, #16]
 810347a:	69fb      	ldr	r3, [r7, #28]
 810347c:	f003 0307 	and.w	r3, r3, #7
 8103480:	009b      	lsls	r3, r3, #2
 8103482:	fa02 f303 	lsl.w	r3, r2, r3
 8103486:	69ba      	ldr	r2, [r7, #24]
 8103488:	4313      	orrs	r3, r2
 810348a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810348c:	69fb      	ldr	r3, [r7, #28]
 810348e:	08da      	lsrs	r2, r3, #3
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	3208      	adds	r2, #8
 8103494:	69b9      	ldr	r1, [r7, #24]
 8103496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810349a:	687b      	ldr	r3, [r7, #4]
 810349c:	681b      	ldr	r3, [r3, #0]
 810349e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81034a0:	69fb      	ldr	r3, [r7, #28]
 81034a2:	005b      	lsls	r3, r3, #1
 81034a4:	2203      	movs	r2, #3
 81034a6:	fa02 f303 	lsl.w	r3, r2, r3
 81034aa:	43db      	mvns	r3, r3
 81034ac:	69ba      	ldr	r2, [r7, #24]
 81034ae:	4013      	ands	r3, r2
 81034b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81034b2:	683b      	ldr	r3, [r7, #0]
 81034b4:	685b      	ldr	r3, [r3, #4]
 81034b6:	f003 0203 	and.w	r2, r3, #3
 81034ba:	69fb      	ldr	r3, [r7, #28]
 81034bc:	005b      	lsls	r3, r3, #1
 81034be:	fa02 f303 	lsl.w	r3, r2, r3
 81034c2:	69ba      	ldr	r2, [r7, #24]
 81034c4:	4313      	orrs	r3, r2
 81034c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	69ba      	ldr	r2, [r7, #24]
 81034cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 81034ce:	683b      	ldr	r3, [r7, #0]
 81034d0:	685b      	ldr	r3, [r3, #4]
 81034d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81034d6:	2b00      	cmp	r3, #0
 81034d8:	f000 80e0 	beq.w	810369c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81034dc:	4b2f      	ldr	r3, [pc, #188]	; (810359c <HAL_GPIO_Init+0x238>)
 81034de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81034e2:	4a2e      	ldr	r2, [pc, #184]	; (810359c <HAL_GPIO_Init+0x238>)
 81034e4:	f043 0302 	orr.w	r3, r3, #2
 81034e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81034ec:	4b2b      	ldr	r3, [pc, #172]	; (810359c <HAL_GPIO_Init+0x238>)
 81034ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81034f2:	f003 0302 	and.w	r3, r3, #2
 81034f6:	60fb      	str	r3, [r7, #12]
 81034f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81034fa:	4a29      	ldr	r2, [pc, #164]	; (81035a0 <HAL_GPIO_Init+0x23c>)
 81034fc:	69fb      	ldr	r3, [r7, #28]
 81034fe:	089b      	lsrs	r3, r3, #2
 8103500:	3302      	adds	r3, #2
 8103502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103508:	69fb      	ldr	r3, [r7, #28]
 810350a:	f003 0303 	and.w	r3, r3, #3
 810350e:	009b      	lsls	r3, r3, #2
 8103510:	220f      	movs	r2, #15
 8103512:	fa02 f303 	lsl.w	r3, r2, r3
 8103516:	43db      	mvns	r3, r3
 8103518:	69ba      	ldr	r2, [r7, #24]
 810351a:	4013      	ands	r3, r2
 810351c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810351e:	687b      	ldr	r3, [r7, #4]
 8103520:	4a20      	ldr	r2, [pc, #128]	; (81035a4 <HAL_GPIO_Init+0x240>)
 8103522:	4293      	cmp	r3, r2
 8103524:	d052      	beq.n	81035cc <HAL_GPIO_Init+0x268>
 8103526:	687b      	ldr	r3, [r7, #4]
 8103528:	4a1f      	ldr	r2, [pc, #124]	; (81035a8 <HAL_GPIO_Init+0x244>)
 810352a:	4293      	cmp	r3, r2
 810352c:	d031      	beq.n	8103592 <HAL_GPIO_Init+0x22e>
 810352e:	687b      	ldr	r3, [r7, #4]
 8103530:	4a1e      	ldr	r2, [pc, #120]	; (81035ac <HAL_GPIO_Init+0x248>)
 8103532:	4293      	cmp	r3, r2
 8103534:	d02b      	beq.n	810358e <HAL_GPIO_Init+0x22a>
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	4a1d      	ldr	r2, [pc, #116]	; (81035b0 <HAL_GPIO_Init+0x24c>)
 810353a:	4293      	cmp	r3, r2
 810353c:	d025      	beq.n	810358a <HAL_GPIO_Init+0x226>
 810353e:	687b      	ldr	r3, [r7, #4]
 8103540:	4a1c      	ldr	r2, [pc, #112]	; (81035b4 <HAL_GPIO_Init+0x250>)
 8103542:	4293      	cmp	r3, r2
 8103544:	d01f      	beq.n	8103586 <HAL_GPIO_Init+0x222>
 8103546:	687b      	ldr	r3, [r7, #4]
 8103548:	4a1b      	ldr	r2, [pc, #108]	; (81035b8 <HAL_GPIO_Init+0x254>)
 810354a:	4293      	cmp	r3, r2
 810354c:	d019      	beq.n	8103582 <HAL_GPIO_Init+0x21e>
 810354e:	687b      	ldr	r3, [r7, #4]
 8103550:	4a1a      	ldr	r2, [pc, #104]	; (81035bc <HAL_GPIO_Init+0x258>)
 8103552:	4293      	cmp	r3, r2
 8103554:	d013      	beq.n	810357e <HAL_GPIO_Init+0x21a>
 8103556:	687b      	ldr	r3, [r7, #4]
 8103558:	4a19      	ldr	r2, [pc, #100]	; (81035c0 <HAL_GPIO_Init+0x25c>)
 810355a:	4293      	cmp	r3, r2
 810355c:	d00d      	beq.n	810357a <HAL_GPIO_Init+0x216>
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	4a18      	ldr	r2, [pc, #96]	; (81035c4 <HAL_GPIO_Init+0x260>)
 8103562:	4293      	cmp	r3, r2
 8103564:	d007      	beq.n	8103576 <HAL_GPIO_Init+0x212>
 8103566:	687b      	ldr	r3, [r7, #4]
 8103568:	4a17      	ldr	r2, [pc, #92]	; (81035c8 <HAL_GPIO_Init+0x264>)
 810356a:	4293      	cmp	r3, r2
 810356c:	d101      	bne.n	8103572 <HAL_GPIO_Init+0x20e>
 810356e:	2309      	movs	r3, #9
 8103570:	e02d      	b.n	81035ce <HAL_GPIO_Init+0x26a>
 8103572:	230a      	movs	r3, #10
 8103574:	e02b      	b.n	81035ce <HAL_GPIO_Init+0x26a>
 8103576:	2308      	movs	r3, #8
 8103578:	e029      	b.n	81035ce <HAL_GPIO_Init+0x26a>
 810357a:	2307      	movs	r3, #7
 810357c:	e027      	b.n	81035ce <HAL_GPIO_Init+0x26a>
 810357e:	2306      	movs	r3, #6
 8103580:	e025      	b.n	81035ce <HAL_GPIO_Init+0x26a>
 8103582:	2305      	movs	r3, #5
 8103584:	e023      	b.n	81035ce <HAL_GPIO_Init+0x26a>
 8103586:	2304      	movs	r3, #4
 8103588:	e021      	b.n	81035ce <HAL_GPIO_Init+0x26a>
 810358a:	2303      	movs	r3, #3
 810358c:	e01f      	b.n	81035ce <HAL_GPIO_Init+0x26a>
 810358e:	2302      	movs	r3, #2
 8103590:	e01d      	b.n	81035ce <HAL_GPIO_Init+0x26a>
 8103592:	2301      	movs	r3, #1
 8103594:	e01b      	b.n	81035ce <HAL_GPIO_Init+0x26a>
 8103596:	bf00      	nop
 8103598:	580000c0 	.word	0x580000c0
 810359c:	58024400 	.word	0x58024400
 81035a0:	58000400 	.word	0x58000400
 81035a4:	58020000 	.word	0x58020000
 81035a8:	58020400 	.word	0x58020400
 81035ac:	58020800 	.word	0x58020800
 81035b0:	58020c00 	.word	0x58020c00
 81035b4:	58021000 	.word	0x58021000
 81035b8:	58021400 	.word	0x58021400
 81035bc:	58021800 	.word	0x58021800
 81035c0:	58021c00 	.word	0x58021c00
 81035c4:	58022000 	.word	0x58022000
 81035c8:	58022400 	.word	0x58022400
 81035cc:	2300      	movs	r3, #0
 81035ce:	69fa      	ldr	r2, [r7, #28]
 81035d0:	f002 0203 	and.w	r2, r2, #3
 81035d4:	0092      	lsls	r2, r2, #2
 81035d6:	4093      	lsls	r3, r2
 81035d8:	69ba      	ldr	r2, [r7, #24]
 81035da:	4313      	orrs	r3, r2
 81035dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81035de:	4938      	ldr	r1, [pc, #224]	; (81036c0 <HAL_GPIO_Init+0x35c>)
 81035e0:	69fb      	ldr	r3, [r7, #28]
 81035e2:	089b      	lsrs	r3, r3, #2
 81035e4:	3302      	adds	r3, #2
 81035e6:	69ba      	ldr	r2, [r7, #24]
 81035e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81035ec:	697b      	ldr	r3, [r7, #20]
 81035ee:	681b      	ldr	r3, [r3, #0]
 81035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81035f2:	693b      	ldr	r3, [r7, #16]
 81035f4:	43db      	mvns	r3, r3
 81035f6:	69ba      	ldr	r2, [r7, #24]
 81035f8:	4013      	ands	r3, r2
 81035fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 81035fc:	683b      	ldr	r3, [r7, #0]
 81035fe:	685b      	ldr	r3, [r3, #4]
 8103600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103604:	2b00      	cmp	r3, #0
 8103606:	d003      	beq.n	8103610 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8103608:	69ba      	ldr	r2, [r7, #24]
 810360a:	693b      	ldr	r3, [r7, #16]
 810360c:	4313      	orrs	r3, r2
 810360e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103610:	697b      	ldr	r3, [r7, #20]
 8103612:	69ba      	ldr	r2, [r7, #24]
 8103614:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8103616:	697b      	ldr	r3, [r7, #20]
 8103618:	685b      	ldr	r3, [r3, #4]
 810361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810361c:	693b      	ldr	r3, [r7, #16]
 810361e:	43db      	mvns	r3, r3
 8103620:	69ba      	ldr	r2, [r7, #24]
 8103622:	4013      	ands	r3, r2
 8103624:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8103626:	683b      	ldr	r3, [r7, #0]
 8103628:	685b      	ldr	r3, [r3, #4]
 810362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810362e:	2b00      	cmp	r3, #0
 8103630:	d003      	beq.n	810363a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8103632:	69ba      	ldr	r2, [r7, #24]
 8103634:	693b      	ldr	r3, [r7, #16]
 8103636:	4313      	orrs	r3, r2
 8103638:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810363a:	697b      	ldr	r3, [r7, #20]
 810363c:	69ba      	ldr	r2, [r7, #24]
 810363e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103644:	681b      	ldr	r3, [r3, #0]
 8103646:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103648:	693b      	ldr	r3, [r7, #16]
 810364a:	43db      	mvns	r3, r3
 810364c:	69ba      	ldr	r2, [r7, #24]
 810364e:	4013      	ands	r3, r2
 8103650:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8103652:	683b      	ldr	r3, [r7, #0]
 8103654:	685b      	ldr	r3, [r3, #4]
 8103656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810365a:	2b00      	cmp	r3, #0
 810365c:	d003      	beq.n	8103666 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 810365e:	69ba      	ldr	r2, [r7, #24]
 8103660:	693b      	ldr	r3, [r7, #16]
 8103662:	4313      	orrs	r3, r2
 8103664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810366a:	69bb      	ldr	r3, [r7, #24]
 810366c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810366e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103672:	685b      	ldr	r3, [r3, #4]
 8103674:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103676:	693b      	ldr	r3, [r7, #16]
 8103678:	43db      	mvns	r3, r3
 810367a:	69ba      	ldr	r2, [r7, #24]
 810367c:	4013      	ands	r3, r2
 810367e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8103680:	683b      	ldr	r3, [r7, #0]
 8103682:	685b      	ldr	r3, [r3, #4]
 8103684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103688:	2b00      	cmp	r3, #0
 810368a:	d003      	beq.n	8103694 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 810368c:	69ba      	ldr	r2, [r7, #24]
 810368e:	693b      	ldr	r3, [r7, #16]
 8103690:	4313      	orrs	r3, r2
 8103692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103698:	69bb      	ldr	r3, [r7, #24]
 810369a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 810369c:	69fb      	ldr	r3, [r7, #28]
 810369e:	3301      	adds	r3, #1
 81036a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81036a2:	683b      	ldr	r3, [r7, #0]
 81036a4:	681a      	ldr	r2, [r3, #0]
 81036a6:	69fb      	ldr	r3, [r7, #28]
 81036a8:	fa22 f303 	lsr.w	r3, r2, r3
 81036ac:	2b00      	cmp	r3, #0
 81036ae:	f47f ae63 	bne.w	8103378 <HAL_GPIO_Init+0x14>
  }
}
 81036b2:	bf00      	nop
 81036b4:	bf00      	nop
 81036b6:	3724      	adds	r7, #36	; 0x24
 81036b8:	46bd      	mov	sp, r7
 81036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036be:	4770      	bx	lr
 81036c0:	58000400 	.word	0x58000400

081036c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81036c4:	b480      	push	{r7}
 81036c6:	b083      	sub	sp, #12
 81036c8:	af00      	add	r7, sp, #0
 81036ca:	6078      	str	r0, [r7, #4]
 81036cc:	460b      	mov	r3, r1
 81036ce:	807b      	strh	r3, [r7, #2]
 81036d0:	4613      	mov	r3, r2
 81036d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81036d4:	787b      	ldrb	r3, [r7, #1]
 81036d6:	2b00      	cmp	r3, #0
 81036d8:	d003      	beq.n	81036e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81036da:	887a      	ldrh	r2, [r7, #2]
 81036dc:	687b      	ldr	r3, [r7, #4]
 81036de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81036e0:	e003      	b.n	81036ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81036e2:	887b      	ldrh	r3, [r7, #2]
 81036e4:	041a      	lsls	r2, r3, #16
 81036e6:	687b      	ldr	r3, [r7, #4]
 81036e8:	619a      	str	r2, [r3, #24]
}
 81036ea:	bf00      	nop
 81036ec:	370c      	adds	r7, #12
 81036ee:	46bd      	mov	sp, r7
 81036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036f4:	4770      	bx	lr

081036f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81036f6:	b480      	push	{r7}
 81036f8:	b085      	sub	sp, #20
 81036fa:	af00      	add	r7, sp, #0
 81036fc:	6078      	str	r0, [r7, #4]
 81036fe:	460b      	mov	r3, r1
 8103700:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8103702:	687b      	ldr	r3, [r7, #4]
 8103704:	695b      	ldr	r3, [r3, #20]
 8103706:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8103708:	887a      	ldrh	r2, [r7, #2]
 810370a:	68fb      	ldr	r3, [r7, #12]
 810370c:	4013      	ands	r3, r2
 810370e:	041a      	lsls	r2, r3, #16
 8103710:	68fb      	ldr	r3, [r7, #12]
 8103712:	43d9      	mvns	r1, r3
 8103714:	887b      	ldrh	r3, [r7, #2]
 8103716:	400b      	ands	r3, r1
 8103718:	431a      	orrs	r2, r3
 810371a:	687b      	ldr	r3, [r7, #4]
 810371c:	619a      	str	r2, [r3, #24]
}
 810371e:	bf00      	nop
 8103720:	3714      	adds	r7, #20
 8103722:	46bd      	mov	sp, r7
 8103724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103728:	4770      	bx	lr
	...

0810372c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810372c:	b480      	push	{r7}
 810372e:	b083      	sub	sp, #12
 8103730:	af00      	add	r7, sp, #0
 8103732:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103734:	4b05      	ldr	r3, [pc, #20]	; (810374c <HAL_HSEM_ActivateNotification+0x20>)
 8103736:	681a      	ldr	r2, [r3, #0]
 8103738:	4904      	ldr	r1, [pc, #16]	; (810374c <HAL_HSEM_ActivateNotification+0x20>)
 810373a:	687b      	ldr	r3, [r7, #4]
 810373c:	4313      	orrs	r3, r2
 810373e:	600b      	str	r3, [r1, #0]
#endif
}
 8103740:	bf00      	nop
 8103742:	370c      	adds	r7, #12
 8103744:	46bd      	mov	sp, r7
 8103746:	f85d 7b04 	ldr.w	r7, [sp], #4
 810374a:	4770      	bx	lr
 810374c:	58026510 	.word	0x58026510

08103750 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103750:	b580      	push	{r7, lr}
 8103752:	b084      	sub	sp, #16
 8103754:	af00      	add	r7, sp, #0
 8103756:	60f8      	str	r0, [r7, #12]
 8103758:	460b      	mov	r3, r1
 810375a:	607a      	str	r2, [r7, #4]
 810375c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810375e:	4b37      	ldr	r3, [pc, #220]	; (810383c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103760:	681b      	ldr	r3, [r3, #0]
 8103762:	f023 0201 	bic.w	r2, r3, #1
 8103766:	4935      	ldr	r1, [pc, #212]	; (810383c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103768:	68fb      	ldr	r3, [r7, #12]
 810376a:	4313      	orrs	r3, r2
 810376c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	2b00      	cmp	r3, #0
 8103772:	d123      	bne.n	81037bc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103774:	f7fd fac8 	bl	8100d08 <HAL_GetCurrentCPUID>
 8103778:	4603      	mov	r3, r0
 810377a:	2b03      	cmp	r3, #3
 810377c:	d158      	bne.n	8103830 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810377e:	4b2f      	ldr	r3, [pc, #188]	; (810383c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103780:	691b      	ldr	r3, [r3, #16]
 8103782:	4a2e      	ldr	r2, [pc, #184]	; (810383c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103784:	f023 0301 	bic.w	r3, r3, #1
 8103788:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810378a:	4b2d      	ldr	r3, [pc, #180]	; (8103840 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810378c:	691b      	ldr	r3, [r3, #16]
 810378e:	4a2c      	ldr	r2, [pc, #176]	; (8103840 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103790:	f043 0304 	orr.w	r3, r3, #4
 8103794:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8103796:	f3bf 8f4f 	dsb	sy
}
 810379a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810379c:	f3bf 8f6f 	isb	sy
}
 81037a0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81037a2:	7afb      	ldrb	r3, [r7, #11]
 81037a4:	2b01      	cmp	r3, #1
 81037a6:	d101      	bne.n	81037ac <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81037a8:	bf30      	wfi
 81037aa:	e000      	b.n	81037ae <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81037ac:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81037ae:	4b24      	ldr	r3, [pc, #144]	; (8103840 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81037b0:	691b      	ldr	r3, [r3, #16]
 81037b2:	4a23      	ldr	r2, [pc, #140]	; (8103840 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81037b4:	f023 0304 	bic.w	r3, r3, #4
 81037b8:	6113      	str	r3, [r2, #16]
 81037ba:	e03c      	b.n	8103836 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	2b01      	cmp	r3, #1
 81037c0:	d123      	bne.n	810380a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81037c2:	f7fd faa1 	bl	8100d08 <HAL_GetCurrentCPUID>
 81037c6:	4603      	mov	r3, r0
 81037c8:	2b01      	cmp	r3, #1
 81037ca:	d133      	bne.n	8103834 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81037cc:	4b1b      	ldr	r3, [pc, #108]	; (810383c <HAL_PWREx_EnterSTOPMode+0xec>)
 81037ce:	695b      	ldr	r3, [r3, #20]
 81037d0:	4a1a      	ldr	r2, [pc, #104]	; (810383c <HAL_PWREx_EnterSTOPMode+0xec>)
 81037d2:	f023 0302 	bic.w	r3, r3, #2
 81037d6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81037d8:	4b19      	ldr	r3, [pc, #100]	; (8103840 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81037da:	691b      	ldr	r3, [r3, #16]
 81037dc:	4a18      	ldr	r2, [pc, #96]	; (8103840 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81037de:	f043 0304 	orr.w	r3, r3, #4
 81037e2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81037e4:	f3bf 8f4f 	dsb	sy
}
 81037e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81037ea:	f3bf 8f6f 	isb	sy
}
 81037ee:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81037f0:	7afb      	ldrb	r3, [r7, #11]
 81037f2:	2b01      	cmp	r3, #1
 81037f4:	d101      	bne.n	81037fa <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81037f6:	bf30      	wfi
 81037f8:	e000      	b.n	81037fc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81037fa:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81037fc:	4b10      	ldr	r3, [pc, #64]	; (8103840 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81037fe:	691b      	ldr	r3, [r3, #16]
 8103800:	4a0f      	ldr	r2, [pc, #60]	; (8103840 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103802:	f023 0304 	bic.w	r3, r3, #4
 8103806:	6113      	str	r3, [r2, #16]
 8103808:	e015      	b.n	8103836 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810380a:	f7fd fa7d 	bl	8100d08 <HAL_GetCurrentCPUID>
 810380e:	4603      	mov	r3, r0
 8103810:	2b03      	cmp	r3, #3
 8103812:	d106      	bne.n	8103822 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103814:	4b09      	ldr	r3, [pc, #36]	; (810383c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103816:	691b      	ldr	r3, [r3, #16]
 8103818:	4a08      	ldr	r2, [pc, #32]	; (810383c <HAL_PWREx_EnterSTOPMode+0xec>)
 810381a:	f023 0304 	bic.w	r3, r3, #4
 810381e:	6113      	str	r3, [r2, #16]
 8103820:	e009      	b.n	8103836 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103822:	4b06      	ldr	r3, [pc, #24]	; (810383c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103824:	695b      	ldr	r3, [r3, #20]
 8103826:	4a05      	ldr	r2, [pc, #20]	; (810383c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103828:	f023 0304 	bic.w	r3, r3, #4
 810382c:	6153      	str	r3, [r2, #20]
 810382e:	e002      	b.n	8103836 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103830:	bf00      	nop
 8103832:	e000      	b.n	8103836 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103834:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103836:	3710      	adds	r7, #16
 8103838:	46bd      	mov	sp, r7
 810383a:	bd80      	pop	{r7, pc}
 810383c:	58024800 	.word	0x58024800
 8103840:	e000ed00 	.word	0xe000ed00

08103844 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103844:	b580      	push	{r7, lr}
 8103846:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103848:	f7fd fa5e 	bl	8100d08 <HAL_GetCurrentCPUID>
 810384c:	4603      	mov	r3, r0
 810384e:	2b03      	cmp	r3, #3
 8103850:	d101      	bne.n	8103856 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103852:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103854:	e001      	b.n	810385a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103856:	bf40      	sev
    __WFE ();
 8103858:	bf20      	wfe
}
 810385a:	bf00      	nop
 810385c:	bd80      	pop	{r7, pc}
	...

08103860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103860:	b480      	push	{r7}
 8103862:	b089      	sub	sp, #36	; 0x24
 8103864:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103866:	4bb3      	ldr	r3, [pc, #716]	; (8103b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103868:	691b      	ldr	r3, [r3, #16]
 810386a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810386e:	2b18      	cmp	r3, #24
 8103870:	f200 8155 	bhi.w	8103b1e <HAL_RCC_GetSysClockFreq+0x2be>
 8103874:	a201      	add	r2, pc, #4	; (adr r2, 810387c <HAL_RCC_GetSysClockFreq+0x1c>)
 8103876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810387a:	bf00      	nop
 810387c:	081038e1 	.word	0x081038e1
 8103880:	08103b1f 	.word	0x08103b1f
 8103884:	08103b1f 	.word	0x08103b1f
 8103888:	08103b1f 	.word	0x08103b1f
 810388c:	08103b1f 	.word	0x08103b1f
 8103890:	08103b1f 	.word	0x08103b1f
 8103894:	08103b1f 	.word	0x08103b1f
 8103898:	08103b1f 	.word	0x08103b1f
 810389c:	08103907 	.word	0x08103907
 81038a0:	08103b1f 	.word	0x08103b1f
 81038a4:	08103b1f 	.word	0x08103b1f
 81038a8:	08103b1f 	.word	0x08103b1f
 81038ac:	08103b1f 	.word	0x08103b1f
 81038b0:	08103b1f 	.word	0x08103b1f
 81038b4:	08103b1f 	.word	0x08103b1f
 81038b8:	08103b1f 	.word	0x08103b1f
 81038bc:	0810390d 	.word	0x0810390d
 81038c0:	08103b1f 	.word	0x08103b1f
 81038c4:	08103b1f 	.word	0x08103b1f
 81038c8:	08103b1f 	.word	0x08103b1f
 81038cc:	08103b1f 	.word	0x08103b1f
 81038d0:	08103b1f 	.word	0x08103b1f
 81038d4:	08103b1f 	.word	0x08103b1f
 81038d8:	08103b1f 	.word	0x08103b1f
 81038dc:	08103913 	.word	0x08103913
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81038e0:	4b94      	ldr	r3, [pc, #592]	; (8103b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038e2:	681b      	ldr	r3, [r3, #0]
 81038e4:	f003 0320 	and.w	r3, r3, #32
 81038e8:	2b00      	cmp	r3, #0
 81038ea:	d009      	beq.n	8103900 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81038ec:	4b91      	ldr	r3, [pc, #580]	; (8103b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038ee:	681b      	ldr	r3, [r3, #0]
 81038f0:	08db      	lsrs	r3, r3, #3
 81038f2:	f003 0303 	and.w	r3, r3, #3
 81038f6:	4a90      	ldr	r2, [pc, #576]	; (8103b38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81038f8:	fa22 f303 	lsr.w	r3, r2, r3
 81038fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81038fe:	e111      	b.n	8103b24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103900:	4b8d      	ldr	r3, [pc, #564]	; (8103b38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103902:	61bb      	str	r3, [r7, #24]
    break;
 8103904:	e10e      	b.n	8103b24 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8103906:	4b8d      	ldr	r3, [pc, #564]	; (8103b3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103908:	61bb      	str	r3, [r7, #24]
    break;
 810390a:	e10b      	b.n	8103b24 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810390c:	4b8c      	ldr	r3, [pc, #560]	; (8103b40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810390e:	61bb      	str	r3, [r7, #24]
    break;
 8103910:	e108      	b.n	8103b24 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103912:	4b88      	ldr	r3, [pc, #544]	; (8103b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103916:	f003 0303 	and.w	r3, r3, #3
 810391a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810391c:	4b85      	ldr	r3, [pc, #532]	; (8103b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103920:	091b      	lsrs	r3, r3, #4
 8103922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103926:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103928:	4b82      	ldr	r3, [pc, #520]	; (8103b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810392c:	f003 0301 	and.w	r3, r3, #1
 8103930:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8103932:	4b80      	ldr	r3, [pc, #512]	; (8103b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103936:	08db      	lsrs	r3, r3, #3
 8103938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810393c:	68fa      	ldr	r2, [r7, #12]
 810393e:	fb02 f303 	mul.w	r3, r2, r3
 8103942:	ee07 3a90 	vmov	s15, r3
 8103946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810394a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810394e:	693b      	ldr	r3, [r7, #16]
 8103950:	2b00      	cmp	r3, #0
 8103952:	f000 80e1 	beq.w	8103b18 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103956:	697b      	ldr	r3, [r7, #20]
 8103958:	2b02      	cmp	r3, #2
 810395a:	f000 8083 	beq.w	8103a64 <HAL_RCC_GetSysClockFreq+0x204>
 810395e:	697b      	ldr	r3, [r7, #20]
 8103960:	2b02      	cmp	r3, #2
 8103962:	f200 80a1 	bhi.w	8103aa8 <HAL_RCC_GetSysClockFreq+0x248>
 8103966:	697b      	ldr	r3, [r7, #20]
 8103968:	2b00      	cmp	r3, #0
 810396a:	d003      	beq.n	8103974 <HAL_RCC_GetSysClockFreq+0x114>
 810396c:	697b      	ldr	r3, [r7, #20]
 810396e:	2b01      	cmp	r3, #1
 8103970:	d056      	beq.n	8103a20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103972:	e099      	b.n	8103aa8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103974:	4b6f      	ldr	r3, [pc, #444]	; (8103b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103976:	681b      	ldr	r3, [r3, #0]
 8103978:	f003 0320 	and.w	r3, r3, #32
 810397c:	2b00      	cmp	r3, #0
 810397e:	d02d      	beq.n	81039dc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103980:	4b6c      	ldr	r3, [pc, #432]	; (8103b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103982:	681b      	ldr	r3, [r3, #0]
 8103984:	08db      	lsrs	r3, r3, #3
 8103986:	f003 0303 	and.w	r3, r3, #3
 810398a:	4a6b      	ldr	r2, [pc, #428]	; (8103b38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810398c:	fa22 f303 	lsr.w	r3, r2, r3
 8103990:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103992:	687b      	ldr	r3, [r7, #4]
 8103994:	ee07 3a90 	vmov	s15, r3
 8103998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810399c:	693b      	ldr	r3, [r7, #16]
 810399e:	ee07 3a90 	vmov	s15, r3
 81039a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81039a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81039aa:	4b62      	ldr	r3, [pc, #392]	; (8103b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81039ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81039b2:	ee07 3a90 	vmov	s15, r3
 81039b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81039ba:	ed97 6a02 	vldr	s12, [r7, #8]
 81039be:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103b44 <HAL_RCC_GetSysClockFreq+0x2e4>
 81039c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81039c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81039ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81039ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81039d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81039d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81039da:	e087      	b.n	8103aec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81039dc:	693b      	ldr	r3, [r7, #16]
 81039de:	ee07 3a90 	vmov	s15, r3
 81039e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81039e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103b48 <HAL_RCC_GetSysClockFreq+0x2e8>
 81039ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81039ee:	4b51      	ldr	r3, [pc, #324]	; (8103b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81039f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81039f6:	ee07 3a90 	vmov	s15, r3
 81039fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81039fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8103a02:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103b44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103a1e:	e065      	b.n	8103aec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103a20:	693b      	ldr	r3, [r7, #16]
 8103a22:	ee07 3a90 	vmov	s15, r3
 8103a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103a2a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103b4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8103a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103a32:	4b40      	ldr	r3, [pc, #256]	; (8103b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103a3a:	ee07 3a90 	vmov	s15, r3
 8103a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8103a46:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103b44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103a62:	e043      	b.n	8103aec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103a64:	693b      	ldr	r3, [r7, #16]
 8103a66:	ee07 3a90 	vmov	s15, r3
 8103a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103a6e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103b50 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103a76:	4b2f      	ldr	r3, [pc, #188]	; (8103b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103a7e:	ee07 3a90 	vmov	s15, r3
 8103a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8103a8a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103b44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103aa6:	e021      	b.n	8103aec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103aa8:	693b      	ldr	r3, [r7, #16]
 8103aaa:	ee07 3a90 	vmov	s15, r3
 8103aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103ab2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103b4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8103ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103aba:	4b1e      	ldr	r3, [pc, #120]	; (8103b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103ac2:	ee07 3a90 	vmov	s15, r3
 8103ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8103ace:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103b44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103aea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8103aec:	4b11      	ldr	r3, [pc, #68]	; (8103b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103af0:	0a5b      	lsrs	r3, r3, #9
 8103af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103af6:	3301      	adds	r3, #1
 8103af8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8103afa:	683b      	ldr	r3, [r7, #0]
 8103afc:	ee07 3a90 	vmov	s15, r3
 8103b00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103b04:	edd7 6a07 	vldr	s13, [r7, #28]
 8103b08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103b10:	ee17 3a90 	vmov	r3, s15
 8103b14:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8103b16:	e005      	b.n	8103b24 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8103b18:	2300      	movs	r3, #0
 8103b1a:	61bb      	str	r3, [r7, #24]
    break;
 8103b1c:	e002      	b.n	8103b24 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103b1e:	4b07      	ldr	r3, [pc, #28]	; (8103b3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103b20:	61bb      	str	r3, [r7, #24]
    break;
 8103b22:	bf00      	nop
  }

  return sysclockfreq;
 8103b24:	69bb      	ldr	r3, [r7, #24]
}
 8103b26:	4618      	mov	r0, r3
 8103b28:	3724      	adds	r7, #36	; 0x24
 8103b2a:	46bd      	mov	sp, r7
 8103b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b30:	4770      	bx	lr
 8103b32:	bf00      	nop
 8103b34:	58024400 	.word	0x58024400
 8103b38:	03d09000 	.word	0x03d09000
 8103b3c:	003d0900 	.word	0x003d0900
 8103b40:	007a1200 	.word	0x007a1200
 8103b44:	46000000 	.word	0x46000000
 8103b48:	4c742400 	.word	0x4c742400
 8103b4c:	4a742400 	.word	0x4a742400
 8103b50:	4af42400 	.word	0x4af42400

08103b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8103b54:	b580      	push	{r7, lr}
 8103b56:	b082      	sub	sp, #8
 8103b58:	af00      	add	r7, sp, #0
 8103b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103b5c:	687b      	ldr	r3, [r7, #4]
 8103b5e:	2b00      	cmp	r3, #0
 8103b60:	d101      	bne.n	8103b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8103b62:	2301      	movs	r3, #1
 8103b64:	e049      	b.n	8103bfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103b66:	687b      	ldr	r3, [r7, #4]
 8103b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103b6c:	b2db      	uxtb	r3, r3
 8103b6e:	2b00      	cmp	r3, #0
 8103b70:	d106      	bne.n	8103b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103b72:	687b      	ldr	r3, [r7, #4]
 8103b74:	2200      	movs	r2, #0
 8103b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8103b7a:	6878      	ldr	r0, [r7, #4]
 8103b7c:	f7fc fdee 	bl	810075c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103b80:	687b      	ldr	r3, [r7, #4]
 8103b82:	2202      	movs	r2, #2
 8103b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	681a      	ldr	r2, [r3, #0]
 8103b8c:	687b      	ldr	r3, [r7, #4]
 8103b8e:	3304      	adds	r3, #4
 8103b90:	4619      	mov	r1, r3
 8103b92:	4610      	mov	r0, r2
 8103b94:	f000 fe8a 	bl	81048ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	2201      	movs	r2, #1
 8103b9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103ba0:	687b      	ldr	r3, [r7, #4]
 8103ba2:	2201      	movs	r2, #1
 8103ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	2201      	movs	r2, #1
 8103bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	2201      	movs	r2, #1
 8103bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103bb8:	687b      	ldr	r3, [r7, #4]
 8103bba:	2201      	movs	r2, #1
 8103bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103bc0:	687b      	ldr	r3, [r7, #4]
 8103bc2:	2201      	movs	r2, #1
 8103bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	2201      	movs	r2, #1
 8103bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103bd0:	687b      	ldr	r3, [r7, #4]
 8103bd2:	2201      	movs	r2, #1
 8103bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103bd8:	687b      	ldr	r3, [r7, #4]
 8103bda:	2201      	movs	r2, #1
 8103bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	2201      	movs	r2, #1
 8103be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	2201      	movs	r2, #1
 8103bec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	2201      	movs	r2, #1
 8103bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103bf8:	2300      	movs	r3, #0
}
 8103bfa:	4618      	mov	r0, r3
 8103bfc:	3708      	adds	r7, #8
 8103bfe:	46bd      	mov	sp, r7
 8103c00:	bd80      	pop	{r7, pc}

08103c02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8103c02:	b580      	push	{r7, lr}
 8103c04:	b082      	sub	sp, #8
 8103c06:	af00      	add	r7, sp, #0
 8103c08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	2b00      	cmp	r3, #0
 8103c0e:	d101      	bne.n	8103c14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8103c10:	2301      	movs	r3, #1
 8103c12:	e049      	b.n	8103ca8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103c14:	687b      	ldr	r3, [r7, #4]
 8103c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103c1a:	b2db      	uxtb	r3, r3
 8103c1c:	2b00      	cmp	r3, #0
 8103c1e:	d106      	bne.n	8103c2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103c20:	687b      	ldr	r3, [r7, #4]
 8103c22:	2200      	movs	r2, #0
 8103c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8103c28:	6878      	ldr	r0, [r7, #4]
 8103c2a:	f000 f841 	bl	8103cb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103c2e:	687b      	ldr	r3, [r7, #4]
 8103c30:	2202      	movs	r2, #2
 8103c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	681a      	ldr	r2, [r3, #0]
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	3304      	adds	r3, #4
 8103c3e:	4619      	mov	r1, r3
 8103c40:	4610      	mov	r0, r2
 8103c42:	f000 fe33 	bl	81048ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103c46:	687b      	ldr	r3, [r7, #4]
 8103c48:	2201      	movs	r2, #1
 8103c4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103c4e:	687b      	ldr	r3, [r7, #4]
 8103c50:	2201      	movs	r2, #1
 8103c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	2201      	movs	r2, #1
 8103c5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103c5e:	687b      	ldr	r3, [r7, #4]
 8103c60:	2201      	movs	r2, #1
 8103c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103c66:	687b      	ldr	r3, [r7, #4]
 8103c68:	2201      	movs	r2, #1
 8103c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103c6e:	687b      	ldr	r3, [r7, #4]
 8103c70:	2201      	movs	r2, #1
 8103c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103c76:	687b      	ldr	r3, [r7, #4]
 8103c78:	2201      	movs	r2, #1
 8103c7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103c7e:	687b      	ldr	r3, [r7, #4]
 8103c80:	2201      	movs	r2, #1
 8103c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	2201      	movs	r2, #1
 8103c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103c8e:	687b      	ldr	r3, [r7, #4]
 8103c90:	2201      	movs	r2, #1
 8103c92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103c96:	687b      	ldr	r3, [r7, #4]
 8103c98:	2201      	movs	r2, #1
 8103c9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103c9e:	687b      	ldr	r3, [r7, #4]
 8103ca0:	2201      	movs	r2, #1
 8103ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103ca6:	2300      	movs	r3, #0
}
 8103ca8:	4618      	mov	r0, r3
 8103caa:	3708      	adds	r7, #8
 8103cac:	46bd      	mov	sp, r7
 8103cae:	bd80      	pop	{r7, pc}

08103cb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8103cb0:	b480      	push	{r7}
 8103cb2:	b083      	sub	sp, #12
 8103cb4:	af00      	add	r7, sp, #0
 8103cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8103cb8:	bf00      	nop
 8103cba:	370c      	adds	r7, #12
 8103cbc:	46bd      	mov	sp, r7
 8103cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cc2:	4770      	bx	lr

08103cc4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8103cc4:	b580      	push	{r7, lr}
 8103cc6:	b086      	sub	sp, #24
 8103cc8:	af00      	add	r7, sp, #0
 8103cca:	60f8      	str	r0, [r7, #12]
 8103ccc:	60b9      	str	r1, [r7, #8]
 8103cce:	607a      	str	r2, [r7, #4]
 8103cd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8103cd2:	68bb      	ldr	r3, [r7, #8]
 8103cd4:	2b00      	cmp	r3, #0
 8103cd6:	d109      	bne.n	8103cec <HAL_TIM_PWM_Start_DMA+0x28>
 8103cd8:	68fb      	ldr	r3, [r7, #12]
 8103cda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8103cde:	b2db      	uxtb	r3, r3
 8103ce0:	2b02      	cmp	r3, #2
 8103ce2:	bf0c      	ite	eq
 8103ce4:	2301      	moveq	r3, #1
 8103ce6:	2300      	movne	r3, #0
 8103ce8:	b2db      	uxtb	r3, r3
 8103cea:	e03c      	b.n	8103d66 <HAL_TIM_PWM_Start_DMA+0xa2>
 8103cec:	68bb      	ldr	r3, [r7, #8]
 8103cee:	2b04      	cmp	r3, #4
 8103cf0:	d109      	bne.n	8103d06 <HAL_TIM_PWM_Start_DMA+0x42>
 8103cf2:	68fb      	ldr	r3, [r7, #12]
 8103cf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8103cf8:	b2db      	uxtb	r3, r3
 8103cfa:	2b02      	cmp	r3, #2
 8103cfc:	bf0c      	ite	eq
 8103cfe:	2301      	moveq	r3, #1
 8103d00:	2300      	movne	r3, #0
 8103d02:	b2db      	uxtb	r3, r3
 8103d04:	e02f      	b.n	8103d66 <HAL_TIM_PWM_Start_DMA+0xa2>
 8103d06:	68bb      	ldr	r3, [r7, #8]
 8103d08:	2b08      	cmp	r3, #8
 8103d0a:	d109      	bne.n	8103d20 <HAL_TIM_PWM_Start_DMA+0x5c>
 8103d0c:	68fb      	ldr	r3, [r7, #12]
 8103d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103d12:	b2db      	uxtb	r3, r3
 8103d14:	2b02      	cmp	r3, #2
 8103d16:	bf0c      	ite	eq
 8103d18:	2301      	moveq	r3, #1
 8103d1a:	2300      	movne	r3, #0
 8103d1c:	b2db      	uxtb	r3, r3
 8103d1e:	e022      	b.n	8103d66 <HAL_TIM_PWM_Start_DMA+0xa2>
 8103d20:	68bb      	ldr	r3, [r7, #8]
 8103d22:	2b0c      	cmp	r3, #12
 8103d24:	d109      	bne.n	8103d3a <HAL_TIM_PWM_Start_DMA+0x76>
 8103d26:	68fb      	ldr	r3, [r7, #12]
 8103d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103d2c:	b2db      	uxtb	r3, r3
 8103d2e:	2b02      	cmp	r3, #2
 8103d30:	bf0c      	ite	eq
 8103d32:	2301      	moveq	r3, #1
 8103d34:	2300      	movne	r3, #0
 8103d36:	b2db      	uxtb	r3, r3
 8103d38:	e015      	b.n	8103d66 <HAL_TIM_PWM_Start_DMA+0xa2>
 8103d3a:	68bb      	ldr	r3, [r7, #8]
 8103d3c:	2b10      	cmp	r3, #16
 8103d3e:	d109      	bne.n	8103d54 <HAL_TIM_PWM_Start_DMA+0x90>
 8103d40:	68fb      	ldr	r3, [r7, #12]
 8103d42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8103d46:	b2db      	uxtb	r3, r3
 8103d48:	2b02      	cmp	r3, #2
 8103d4a:	bf0c      	ite	eq
 8103d4c:	2301      	moveq	r3, #1
 8103d4e:	2300      	movne	r3, #0
 8103d50:	b2db      	uxtb	r3, r3
 8103d52:	e008      	b.n	8103d66 <HAL_TIM_PWM_Start_DMA+0xa2>
 8103d54:	68fb      	ldr	r3, [r7, #12]
 8103d56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8103d5a:	b2db      	uxtb	r3, r3
 8103d5c:	2b02      	cmp	r3, #2
 8103d5e:	bf0c      	ite	eq
 8103d60:	2301      	moveq	r3, #1
 8103d62:	2300      	movne	r3, #0
 8103d64:	b2db      	uxtb	r3, r3
 8103d66:	2b00      	cmp	r3, #0
 8103d68:	d001      	beq.n	8103d6e <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8103d6a:	2302      	movs	r3, #2
 8103d6c:	e1a6      	b.n	81040bc <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8103d6e:	68bb      	ldr	r3, [r7, #8]
 8103d70:	2b00      	cmp	r3, #0
 8103d72:	d109      	bne.n	8103d88 <HAL_TIM_PWM_Start_DMA+0xc4>
 8103d74:	68fb      	ldr	r3, [r7, #12]
 8103d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8103d7a:	b2db      	uxtb	r3, r3
 8103d7c:	2b01      	cmp	r3, #1
 8103d7e:	bf0c      	ite	eq
 8103d80:	2301      	moveq	r3, #1
 8103d82:	2300      	movne	r3, #0
 8103d84:	b2db      	uxtb	r3, r3
 8103d86:	e03c      	b.n	8103e02 <HAL_TIM_PWM_Start_DMA+0x13e>
 8103d88:	68bb      	ldr	r3, [r7, #8]
 8103d8a:	2b04      	cmp	r3, #4
 8103d8c:	d109      	bne.n	8103da2 <HAL_TIM_PWM_Start_DMA+0xde>
 8103d8e:	68fb      	ldr	r3, [r7, #12]
 8103d90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8103d94:	b2db      	uxtb	r3, r3
 8103d96:	2b01      	cmp	r3, #1
 8103d98:	bf0c      	ite	eq
 8103d9a:	2301      	moveq	r3, #1
 8103d9c:	2300      	movne	r3, #0
 8103d9e:	b2db      	uxtb	r3, r3
 8103da0:	e02f      	b.n	8103e02 <HAL_TIM_PWM_Start_DMA+0x13e>
 8103da2:	68bb      	ldr	r3, [r7, #8]
 8103da4:	2b08      	cmp	r3, #8
 8103da6:	d109      	bne.n	8103dbc <HAL_TIM_PWM_Start_DMA+0xf8>
 8103da8:	68fb      	ldr	r3, [r7, #12]
 8103daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103dae:	b2db      	uxtb	r3, r3
 8103db0:	2b01      	cmp	r3, #1
 8103db2:	bf0c      	ite	eq
 8103db4:	2301      	moveq	r3, #1
 8103db6:	2300      	movne	r3, #0
 8103db8:	b2db      	uxtb	r3, r3
 8103dba:	e022      	b.n	8103e02 <HAL_TIM_PWM_Start_DMA+0x13e>
 8103dbc:	68bb      	ldr	r3, [r7, #8]
 8103dbe:	2b0c      	cmp	r3, #12
 8103dc0:	d109      	bne.n	8103dd6 <HAL_TIM_PWM_Start_DMA+0x112>
 8103dc2:	68fb      	ldr	r3, [r7, #12]
 8103dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103dc8:	b2db      	uxtb	r3, r3
 8103dca:	2b01      	cmp	r3, #1
 8103dcc:	bf0c      	ite	eq
 8103dce:	2301      	moveq	r3, #1
 8103dd0:	2300      	movne	r3, #0
 8103dd2:	b2db      	uxtb	r3, r3
 8103dd4:	e015      	b.n	8103e02 <HAL_TIM_PWM_Start_DMA+0x13e>
 8103dd6:	68bb      	ldr	r3, [r7, #8]
 8103dd8:	2b10      	cmp	r3, #16
 8103dda:	d109      	bne.n	8103df0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8103ddc:	68fb      	ldr	r3, [r7, #12]
 8103dde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8103de2:	b2db      	uxtb	r3, r3
 8103de4:	2b01      	cmp	r3, #1
 8103de6:	bf0c      	ite	eq
 8103de8:	2301      	moveq	r3, #1
 8103dea:	2300      	movne	r3, #0
 8103dec:	b2db      	uxtb	r3, r3
 8103dee:	e008      	b.n	8103e02 <HAL_TIM_PWM_Start_DMA+0x13e>
 8103df0:	68fb      	ldr	r3, [r7, #12]
 8103df2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8103df6:	b2db      	uxtb	r3, r3
 8103df8:	2b01      	cmp	r3, #1
 8103dfa:	bf0c      	ite	eq
 8103dfc:	2301      	moveq	r3, #1
 8103dfe:	2300      	movne	r3, #0
 8103e00:	b2db      	uxtb	r3, r3
 8103e02:	2b00      	cmp	r3, #0
 8103e04:	d034      	beq.n	8103e70 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8103e06:	687b      	ldr	r3, [r7, #4]
 8103e08:	2b00      	cmp	r3, #0
 8103e0a:	d104      	bne.n	8103e16 <HAL_TIM_PWM_Start_DMA+0x152>
 8103e0c:	887b      	ldrh	r3, [r7, #2]
 8103e0e:	2b00      	cmp	r3, #0
 8103e10:	d001      	beq.n	8103e16 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8103e12:	2301      	movs	r3, #1
 8103e14:	e152      	b.n	81040bc <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8103e16:	68bb      	ldr	r3, [r7, #8]
 8103e18:	2b00      	cmp	r3, #0
 8103e1a:	d104      	bne.n	8103e26 <HAL_TIM_PWM_Start_DMA+0x162>
 8103e1c:	68fb      	ldr	r3, [r7, #12]
 8103e1e:	2202      	movs	r2, #2
 8103e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103e24:	e026      	b.n	8103e74 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8103e26:	68bb      	ldr	r3, [r7, #8]
 8103e28:	2b04      	cmp	r3, #4
 8103e2a:	d104      	bne.n	8103e36 <HAL_TIM_PWM_Start_DMA+0x172>
 8103e2c:	68fb      	ldr	r3, [r7, #12]
 8103e2e:	2202      	movs	r2, #2
 8103e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103e34:	e01e      	b.n	8103e74 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8103e36:	68bb      	ldr	r3, [r7, #8]
 8103e38:	2b08      	cmp	r3, #8
 8103e3a:	d104      	bne.n	8103e46 <HAL_TIM_PWM_Start_DMA+0x182>
 8103e3c:	68fb      	ldr	r3, [r7, #12]
 8103e3e:	2202      	movs	r2, #2
 8103e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103e44:	e016      	b.n	8103e74 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8103e46:	68bb      	ldr	r3, [r7, #8]
 8103e48:	2b0c      	cmp	r3, #12
 8103e4a:	d104      	bne.n	8103e56 <HAL_TIM_PWM_Start_DMA+0x192>
 8103e4c:	68fb      	ldr	r3, [r7, #12]
 8103e4e:	2202      	movs	r2, #2
 8103e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103e54:	e00e      	b.n	8103e74 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8103e56:	68bb      	ldr	r3, [r7, #8]
 8103e58:	2b10      	cmp	r3, #16
 8103e5a:	d104      	bne.n	8103e66 <HAL_TIM_PWM_Start_DMA+0x1a2>
 8103e5c:	68fb      	ldr	r3, [r7, #12]
 8103e5e:	2202      	movs	r2, #2
 8103e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103e64:	e006      	b.n	8103e74 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8103e66:	68fb      	ldr	r3, [r7, #12]
 8103e68:	2202      	movs	r2, #2
 8103e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8103e6e:	e001      	b.n	8103e74 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8103e70:	2301      	movs	r3, #1
 8103e72:	e123      	b.n	81040bc <HAL_TIM_PWM_Start_DMA+0x3f8>
 8103e74:	68bb      	ldr	r3, [r7, #8]
 8103e76:	2b0c      	cmp	r3, #12
 8103e78:	f200 80ae 	bhi.w	8103fd8 <HAL_TIM_PWM_Start_DMA+0x314>
 8103e7c:	a201      	add	r2, pc, #4	; (adr r2, 8103e84 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8103e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103e82:	bf00      	nop
 8103e84:	08103eb9 	.word	0x08103eb9
 8103e88:	08103fd9 	.word	0x08103fd9
 8103e8c:	08103fd9 	.word	0x08103fd9
 8103e90:	08103fd9 	.word	0x08103fd9
 8103e94:	08103f01 	.word	0x08103f01
 8103e98:	08103fd9 	.word	0x08103fd9
 8103e9c:	08103fd9 	.word	0x08103fd9
 8103ea0:	08103fd9 	.word	0x08103fd9
 8103ea4:	08103f49 	.word	0x08103f49
 8103ea8:	08103fd9 	.word	0x08103fd9
 8103eac:	08103fd9 	.word	0x08103fd9
 8103eb0:	08103fd9 	.word	0x08103fd9
 8103eb4:	08103f91 	.word	0x08103f91
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8103eb8:	68fb      	ldr	r3, [r7, #12]
 8103eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103ebc:	4a81      	ldr	r2, [pc, #516]	; (81040c4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8103ebe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8103ec0:	68fb      	ldr	r3, [r7, #12]
 8103ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103ec4:	4a80      	ldr	r2, [pc, #512]	; (81040c8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8103ec6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8103ec8:	68fb      	ldr	r3, [r7, #12]
 8103eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103ecc:	4a7f      	ldr	r2, [pc, #508]	; (81040cc <HAL_TIM_PWM_Start_DMA+0x408>)
 8103ece:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8103ed0:	68fb      	ldr	r3, [r7, #12]
 8103ed2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8103ed4:	6879      	ldr	r1, [r7, #4]
 8103ed6:	68fb      	ldr	r3, [r7, #12]
 8103ed8:	681b      	ldr	r3, [r3, #0]
 8103eda:	3334      	adds	r3, #52	; 0x34
 8103edc:	461a      	mov	r2, r3
 8103ede:	887b      	ldrh	r3, [r7, #2]
 8103ee0:	f7fd fa80 	bl	81013e4 <HAL_DMA_Start_IT>
 8103ee4:	4603      	mov	r3, r0
 8103ee6:	2b00      	cmp	r3, #0
 8103ee8:	d001      	beq.n	8103eee <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8103eea:	2301      	movs	r3, #1
 8103eec:	e0e6      	b.n	81040bc <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8103eee:	68fb      	ldr	r3, [r7, #12]
 8103ef0:	681b      	ldr	r3, [r3, #0]
 8103ef2:	68da      	ldr	r2, [r3, #12]
 8103ef4:	68fb      	ldr	r3, [r7, #12]
 8103ef6:	681b      	ldr	r3, [r3, #0]
 8103ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103efc:	60da      	str	r2, [r3, #12]
      break;
 8103efe:	e06c      	b.n	8103fda <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8103f00:	68fb      	ldr	r3, [r7, #12]
 8103f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103f04:	4a6f      	ldr	r2, [pc, #444]	; (81040c4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8103f06:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8103f08:	68fb      	ldr	r3, [r7, #12]
 8103f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103f0c:	4a6e      	ldr	r2, [pc, #440]	; (81040c8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8103f0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8103f10:	68fb      	ldr	r3, [r7, #12]
 8103f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103f14:	4a6d      	ldr	r2, [pc, #436]	; (81040cc <HAL_TIM_PWM_Start_DMA+0x408>)
 8103f16:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8103f18:	68fb      	ldr	r3, [r7, #12]
 8103f1a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8103f1c:	6879      	ldr	r1, [r7, #4]
 8103f1e:	68fb      	ldr	r3, [r7, #12]
 8103f20:	681b      	ldr	r3, [r3, #0]
 8103f22:	3338      	adds	r3, #56	; 0x38
 8103f24:	461a      	mov	r2, r3
 8103f26:	887b      	ldrh	r3, [r7, #2]
 8103f28:	f7fd fa5c 	bl	81013e4 <HAL_DMA_Start_IT>
 8103f2c:	4603      	mov	r3, r0
 8103f2e:	2b00      	cmp	r3, #0
 8103f30:	d001      	beq.n	8103f36 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 8103f32:	2301      	movs	r3, #1
 8103f34:	e0c2      	b.n	81040bc <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8103f36:	68fb      	ldr	r3, [r7, #12]
 8103f38:	681b      	ldr	r3, [r3, #0]
 8103f3a:	68da      	ldr	r2, [r3, #12]
 8103f3c:	68fb      	ldr	r3, [r7, #12]
 8103f3e:	681b      	ldr	r3, [r3, #0]
 8103f40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8103f44:	60da      	str	r2, [r3, #12]
      break;
 8103f46:	e048      	b.n	8103fda <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8103f48:	68fb      	ldr	r3, [r7, #12]
 8103f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f4c:	4a5d      	ldr	r2, [pc, #372]	; (81040c4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8103f4e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8103f50:	68fb      	ldr	r3, [r7, #12]
 8103f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f54:	4a5c      	ldr	r2, [pc, #368]	; (81040c8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8103f56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8103f58:	68fb      	ldr	r3, [r7, #12]
 8103f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f5c:	4a5b      	ldr	r2, [pc, #364]	; (81040cc <HAL_TIM_PWM_Start_DMA+0x408>)
 8103f5e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8103f60:	68fb      	ldr	r3, [r7, #12]
 8103f62:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8103f64:	6879      	ldr	r1, [r7, #4]
 8103f66:	68fb      	ldr	r3, [r7, #12]
 8103f68:	681b      	ldr	r3, [r3, #0]
 8103f6a:	333c      	adds	r3, #60	; 0x3c
 8103f6c:	461a      	mov	r2, r3
 8103f6e:	887b      	ldrh	r3, [r7, #2]
 8103f70:	f7fd fa38 	bl	81013e4 <HAL_DMA_Start_IT>
 8103f74:	4603      	mov	r3, r0
 8103f76:	2b00      	cmp	r3, #0
 8103f78:	d001      	beq.n	8103f7e <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8103f7a:	2301      	movs	r3, #1
 8103f7c:	e09e      	b.n	81040bc <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8103f7e:	68fb      	ldr	r3, [r7, #12]
 8103f80:	681b      	ldr	r3, [r3, #0]
 8103f82:	68da      	ldr	r2, [r3, #12]
 8103f84:	68fb      	ldr	r3, [r7, #12]
 8103f86:	681b      	ldr	r3, [r3, #0]
 8103f88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8103f8c:	60da      	str	r2, [r3, #12]
      break;
 8103f8e:	e024      	b.n	8103fda <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8103f90:	68fb      	ldr	r3, [r7, #12]
 8103f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103f94:	4a4b      	ldr	r2, [pc, #300]	; (81040c4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8103f96:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8103f98:	68fb      	ldr	r3, [r7, #12]
 8103f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103f9c:	4a4a      	ldr	r2, [pc, #296]	; (81040c8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8103f9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8103fa0:	68fb      	ldr	r3, [r7, #12]
 8103fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103fa4:	4a49      	ldr	r2, [pc, #292]	; (81040cc <HAL_TIM_PWM_Start_DMA+0x408>)
 8103fa6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8103fa8:	68fb      	ldr	r3, [r7, #12]
 8103faa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8103fac:	6879      	ldr	r1, [r7, #4]
 8103fae:	68fb      	ldr	r3, [r7, #12]
 8103fb0:	681b      	ldr	r3, [r3, #0]
 8103fb2:	3340      	adds	r3, #64	; 0x40
 8103fb4:	461a      	mov	r2, r3
 8103fb6:	887b      	ldrh	r3, [r7, #2]
 8103fb8:	f7fd fa14 	bl	81013e4 <HAL_DMA_Start_IT>
 8103fbc:	4603      	mov	r3, r0
 8103fbe:	2b00      	cmp	r3, #0
 8103fc0:	d001      	beq.n	8103fc6 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8103fc2:	2301      	movs	r3, #1
 8103fc4:	e07a      	b.n	81040bc <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8103fc6:	68fb      	ldr	r3, [r7, #12]
 8103fc8:	681b      	ldr	r3, [r3, #0]
 8103fca:	68da      	ldr	r2, [r3, #12]
 8103fcc:	68fb      	ldr	r3, [r7, #12]
 8103fce:	681b      	ldr	r3, [r3, #0]
 8103fd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8103fd4:	60da      	str	r2, [r3, #12]
      break;
 8103fd6:	e000      	b.n	8103fda <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8103fd8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8103fda:	68fb      	ldr	r3, [r7, #12]
 8103fdc:	681b      	ldr	r3, [r3, #0]
 8103fde:	2201      	movs	r2, #1
 8103fe0:	68b9      	ldr	r1, [r7, #8]
 8103fe2:	4618      	mov	r0, r3
 8103fe4:	f001 f866 	bl	81050b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8103fe8:	68fb      	ldr	r3, [r7, #12]
 8103fea:	681b      	ldr	r3, [r3, #0]
 8103fec:	4a38      	ldr	r2, [pc, #224]	; (81040d0 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8103fee:	4293      	cmp	r3, r2
 8103ff0:	d013      	beq.n	810401a <HAL_TIM_PWM_Start_DMA+0x356>
 8103ff2:	68fb      	ldr	r3, [r7, #12]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	4a37      	ldr	r2, [pc, #220]	; (81040d4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8103ff8:	4293      	cmp	r3, r2
 8103ffa:	d00e      	beq.n	810401a <HAL_TIM_PWM_Start_DMA+0x356>
 8103ffc:	68fb      	ldr	r3, [r7, #12]
 8103ffe:	681b      	ldr	r3, [r3, #0]
 8104000:	4a35      	ldr	r2, [pc, #212]	; (81040d8 <HAL_TIM_PWM_Start_DMA+0x414>)
 8104002:	4293      	cmp	r3, r2
 8104004:	d009      	beq.n	810401a <HAL_TIM_PWM_Start_DMA+0x356>
 8104006:	68fb      	ldr	r3, [r7, #12]
 8104008:	681b      	ldr	r3, [r3, #0]
 810400a:	4a34      	ldr	r2, [pc, #208]	; (81040dc <HAL_TIM_PWM_Start_DMA+0x418>)
 810400c:	4293      	cmp	r3, r2
 810400e:	d004      	beq.n	810401a <HAL_TIM_PWM_Start_DMA+0x356>
 8104010:	68fb      	ldr	r3, [r7, #12]
 8104012:	681b      	ldr	r3, [r3, #0]
 8104014:	4a32      	ldr	r2, [pc, #200]	; (81040e0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8104016:	4293      	cmp	r3, r2
 8104018:	d101      	bne.n	810401e <HAL_TIM_PWM_Start_DMA+0x35a>
 810401a:	2301      	movs	r3, #1
 810401c:	e000      	b.n	8104020 <HAL_TIM_PWM_Start_DMA+0x35c>
 810401e:	2300      	movs	r3, #0
 8104020:	2b00      	cmp	r3, #0
 8104022:	d007      	beq.n	8104034 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8104024:	68fb      	ldr	r3, [r7, #12]
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810402a:	68fb      	ldr	r3, [r7, #12]
 810402c:	681b      	ldr	r3, [r3, #0]
 810402e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104032:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8104034:	68fb      	ldr	r3, [r7, #12]
 8104036:	681b      	ldr	r3, [r3, #0]
 8104038:	4a25      	ldr	r2, [pc, #148]	; (81040d0 <HAL_TIM_PWM_Start_DMA+0x40c>)
 810403a:	4293      	cmp	r3, r2
 810403c:	d01d      	beq.n	810407a <HAL_TIM_PWM_Start_DMA+0x3b6>
 810403e:	68fb      	ldr	r3, [r7, #12]
 8104040:	681b      	ldr	r3, [r3, #0]
 8104042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104046:	d018      	beq.n	810407a <HAL_TIM_PWM_Start_DMA+0x3b6>
 8104048:	68fb      	ldr	r3, [r7, #12]
 810404a:	681b      	ldr	r3, [r3, #0]
 810404c:	4a25      	ldr	r2, [pc, #148]	; (81040e4 <HAL_TIM_PWM_Start_DMA+0x420>)
 810404e:	4293      	cmp	r3, r2
 8104050:	d013      	beq.n	810407a <HAL_TIM_PWM_Start_DMA+0x3b6>
 8104052:	68fb      	ldr	r3, [r7, #12]
 8104054:	681b      	ldr	r3, [r3, #0]
 8104056:	4a24      	ldr	r2, [pc, #144]	; (81040e8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8104058:	4293      	cmp	r3, r2
 810405a:	d00e      	beq.n	810407a <HAL_TIM_PWM_Start_DMA+0x3b6>
 810405c:	68fb      	ldr	r3, [r7, #12]
 810405e:	681b      	ldr	r3, [r3, #0]
 8104060:	4a22      	ldr	r2, [pc, #136]	; (81040ec <HAL_TIM_PWM_Start_DMA+0x428>)
 8104062:	4293      	cmp	r3, r2
 8104064:	d009      	beq.n	810407a <HAL_TIM_PWM_Start_DMA+0x3b6>
 8104066:	68fb      	ldr	r3, [r7, #12]
 8104068:	681b      	ldr	r3, [r3, #0]
 810406a:	4a1a      	ldr	r2, [pc, #104]	; (81040d4 <HAL_TIM_PWM_Start_DMA+0x410>)
 810406c:	4293      	cmp	r3, r2
 810406e:	d004      	beq.n	810407a <HAL_TIM_PWM_Start_DMA+0x3b6>
 8104070:	68fb      	ldr	r3, [r7, #12]
 8104072:	681b      	ldr	r3, [r3, #0]
 8104074:	4a1e      	ldr	r2, [pc, #120]	; (81040f0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8104076:	4293      	cmp	r3, r2
 8104078:	d115      	bne.n	81040a6 <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810407a:	68fb      	ldr	r3, [r7, #12]
 810407c:	681b      	ldr	r3, [r3, #0]
 810407e:	689a      	ldr	r2, [r3, #8]
 8104080:	4b1c      	ldr	r3, [pc, #112]	; (81040f4 <HAL_TIM_PWM_Start_DMA+0x430>)
 8104082:	4013      	ands	r3, r2
 8104084:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104086:	697b      	ldr	r3, [r7, #20]
 8104088:	2b06      	cmp	r3, #6
 810408a:	d015      	beq.n	81040b8 <HAL_TIM_PWM_Start_DMA+0x3f4>
 810408c:	697b      	ldr	r3, [r7, #20]
 810408e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104092:	d011      	beq.n	81040b8 <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 8104094:	68fb      	ldr	r3, [r7, #12]
 8104096:	681b      	ldr	r3, [r3, #0]
 8104098:	681a      	ldr	r2, [r3, #0]
 810409a:	68fb      	ldr	r3, [r7, #12]
 810409c:	681b      	ldr	r3, [r3, #0]
 810409e:	f042 0201 	orr.w	r2, r2, #1
 81040a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81040a4:	e008      	b.n	81040b8 <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81040a6:	68fb      	ldr	r3, [r7, #12]
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	681a      	ldr	r2, [r3, #0]
 81040ac:	68fb      	ldr	r3, [r7, #12]
 81040ae:	681b      	ldr	r3, [r3, #0]
 81040b0:	f042 0201 	orr.w	r2, r2, #1
 81040b4:	601a      	str	r2, [r3, #0]
 81040b6:	e000      	b.n	81040ba <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81040b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81040ba:	2300      	movs	r3, #0
}
 81040bc:	4618      	mov	r0, r3
 81040be:	3718      	adds	r7, #24
 81040c0:	46bd      	mov	sp, r7
 81040c2:	bd80      	pop	{r7, pc}
 81040c4:	0810479b 	.word	0x0810479b
 81040c8:	08104843 	.word	0x08104843
 81040cc:	08104709 	.word	0x08104709
 81040d0:	40010000 	.word	0x40010000
 81040d4:	40010400 	.word	0x40010400
 81040d8:	40014000 	.word	0x40014000
 81040dc:	40014400 	.word	0x40014400
 81040e0:	40014800 	.word	0x40014800
 81040e4:	40000400 	.word	0x40000400
 81040e8:	40000800 	.word	0x40000800
 81040ec:	40000c00 	.word	0x40000c00
 81040f0:	40001800 	.word	0x40001800
 81040f4:	00010007 	.word	0x00010007

081040f8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81040f8:	b580      	push	{r7, lr}
 81040fa:	b082      	sub	sp, #8
 81040fc:	af00      	add	r7, sp, #0
 81040fe:	6078      	str	r0, [r7, #4]
 8104100:	6039      	str	r1, [r7, #0]
 8104102:	683b      	ldr	r3, [r7, #0]
 8104104:	2b0c      	cmp	r3, #12
 8104106:	d855      	bhi.n	81041b4 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8104108:	a201      	add	r2, pc, #4	; (adr r2, 8104110 <HAL_TIM_PWM_Stop_DMA+0x18>)
 810410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810410e:	bf00      	nop
 8104110:	08104145 	.word	0x08104145
 8104114:	081041b5 	.word	0x081041b5
 8104118:	081041b5 	.word	0x081041b5
 810411c:	081041b5 	.word	0x081041b5
 8104120:	08104161 	.word	0x08104161
 8104124:	081041b5 	.word	0x081041b5
 8104128:	081041b5 	.word	0x081041b5
 810412c:	081041b5 	.word	0x081041b5
 8104130:	0810417d 	.word	0x0810417d
 8104134:	081041b5 	.word	0x081041b5
 8104138:	081041b5 	.word	0x081041b5
 810413c:	081041b5 	.word	0x081041b5
 8104140:	08104199 	.word	0x08104199
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8104144:	687b      	ldr	r3, [r7, #4]
 8104146:	681b      	ldr	r3, [r3, #0]
 8104148:	68da      	ldr	r2, [r3, #12]
 810414a:	687b      	ldr	r3, [r7, #4]
 810414c:	681b      	ldr	r3, [r3, #0]
 810414e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8104152:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104158:	4618      	mov	r0, r3
 810415a:	f7fd fbad 	bl	81018b8 <HAL_DMA_Abort_IT>
      break;
 810415e:	e02a      	b.n	81041b6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8104160:	687b      	ldr	r3, [r7, #4]
 8104162:	681b      	ldr	r3, [r3, #0]
 8104164:	68da      	ldr	r2, [r3, #12]
 8104166:	687b      	ldr	r3, [r7, #4]
 8104168:	681b      	ldr	r3, [r3, #0]
 810416a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810416e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8104170:	687b      	ldr	r3, [r7, #4]
 8104172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104174:	4618      	mov	r0, r3
 8104176:	f7fd fb9f 	bl	81018b8 <HAL_DMA_Abort_IT>
      break;
 810417a:	e01c      	b.n	81041b6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 810417c:	687b      	ldr	r3, [r7, #4]
 810417e:	681b      	ldr	r3, [r3, #0]
 8104180:	68da      	ldr	r2, [r3, #12]
 8104182:	687b      	ldr	r3, [r7, #4]
 8104184:	681b      	ldr	r3, [r3, #0]
 8104186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 810418a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 810418c:	687b      	ldr	r3, [r7, #4]
 810418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104190:	4618      	mov	r0, r3
 8104192:	f7fd fb91 	bl	81018b8 <HAL_DMA_Abort_IT>
      break;
 8104196:	e00e      	b.n	81041b6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8104198:	687b      	ldr	r3, [r7, #4]
 810419a:	681b      	ldr	r3, [r3, #0]
 810419c:	68da      	ldr	r2, [r3, #12]
 810419e:	687b      	ldr	r3, [r7, #4]
 81041a0:	681b      	ldr	r3, [r3, #0]
 81041a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81041a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 81041a8:	687b      	ldr	r3, [r7, #4]
 81041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81041ac:	4618      	mov	r0, r3
 81041ae:	f7fd fb83 	bl	81018b8 <HAL_DMA_Abort_IT>
      break;
 81041b2:	e000      	b.n	81041b6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 81041b4:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 81041b6:	687b      	ldr	r3, [r7, #4]
 81041b8:	681b      	ldr	r3, [r3, #0]
 81041ba:	2200      	movs	r2, #0
 81041bc:	6839      	ldr	r1, [r7, #0]
 81041be:	4618      	mov	r0, r3
 81041c0:	f000 ff78 	bl	81050b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 81041c4:	687b      	ldr	r3, [r7, #4]
 81041c6:	681b      	ldr	r3, [r3, #0]
 81041c8:	4a3e      	ldr	r2, [pc, #248]	; (81042c4 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 81041ca:	4293      	cmp	r3, r2
 81041cc:	d013      	beq.n	81041f6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 81041ce:	687b      	ldr	r3, [r7, #4]
 81041d0:	681b      	ldr	r3, [r3, #0]
 81041d2:	4a3d      	ldr	r2, [pc, #244]	; (81042c8 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 81041d4:	4293      	cmp	r3, r2
 81041d6:	d00e      	beq.n	81041f6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 81041d8:	687b      	ldr	r3, [r7, #4]
 81041da:	681b      	ldr	r3, [r3, #0]
 81041dc:	4a3b      	ldr	r2, [pc, #236]	; (81042cc <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 81041de:	4293      	cmp	r3, r2
 81041e0:	d009      	beq.n	81041f6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	681b      	ldr	r3, [r3, #0]
 81041e6:	4a3a      	ldr	r2, [pc, #232]	; (81042d0 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 81041e8:	4293      	cmp	r3, r2
 81041ea:	d004      	beq.n	81041f6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	681b      	ldr	r3, [r3, #0]
 81041f0:	4a38      	ldr	r2, [pc, #224]	; (81042d4 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 81041f2:	4293      	cmp	r3, r2
 81041f4:	d101      	bne.n	81041fa <HAL_TIM_PWM_Stop_DMA+0x102>
 81041f6:	2301      	movs	r3, #1
 81041f8:	e000      	b.n	81041fc <HAL_TIM_PWM_Stop_DMA+0x104>
 81041fa:	2300      	movs	r3, #0
 81041fc:	2b00      	cmp	r3, #0
 81041fe:	d017      	beq.n	8104230 <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8104200:	687b      	ldr	r3, [r7, #4]
 8104202:	681b      	ldr	r3, [r3, #0]
 8104204:	6a1a      	ldr	r2, [r3, #32]
 8104206:	f241 1311 	movw	r3, #4369	; 0x1111
 810420a:	4013      	ands	r3, r2
 810420c:	2b00      	cmp	r3, #0
 810420e:	d10f      	bne.n	8104230 <HAL_TIM_PWM_Stop_DMA+0x138>
 8104210:	687b      	ldr	r3, [r7, #4]
 8104212:	681b      	ldr	r3, [r3, #0]
 8104214:	6a1a      	ldr	r2, [r3, #32]
 8104216:	f240 4344 	movw	r3, #1092	; 0x444
 810421a:	4013      	ands	r3, r2
 810421c:	2b00      	cmp	r3, #0
 810421e:	d107      	bne.n	8104230 <HAL_TIM_PWM_Stop_DMA+0x138>
 8104220:	687b      	ldr	r3, [r7, #4]
 8104222:	681b      	ldr	r3, [r3, #0]
 8104224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8104226:	687b      	ldr	r3, [r7, #4]
 8104228:	681b      	ldr	r3, [r3, #0]
 810422a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810422e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8104230:	687b      	ldr	r3, [r7, #4]
 8104232:	681b      	ldr	r3, [r3, #0]
 8104234:	6a1a      	ldr	r2, [r3, #32]
 8104236:	f241 1311 	movw	r3, #4369	; 0x1111
 810423a:	4013      	ands	r3, r2
 810423c:	2b00      	cmp	r3, #0
 810423e:	d10f      	bne.n	8104260 <HAL_TIM_PWM_Stop_DMA+0x168>
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	681b      	ldr	r3, [r3, #0]
 8104244:	6a1a      	ldr	r2, [r3, #32]
 8104246:	f240 4344 	movw	r3, #1092	; 0x444
 810424a:	4013      	ands	r3, r2
 810424c:	2b00      	cmp	r3, #0
 810424e:	d107      	bne.n	8104260 <HAL_TIM_PWM_Stop_DMA+0x168>
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	681b      	ldr	r3, [r3, #0]
 8104254:	681a      	ldr	r2, [r3, #0]
 8104256:	687b      	ldr	r3, [r7, #4]
 8104258:	681b      	ldr	r3, [r3, #0]
 810425a:	f022 0201 	bic.w	r2, r2, #1
 810425e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8104260:	683b      	ldr	r3, [r7, #0]
 8104262:	2b00      	cmp	r3, #0
 8104264:	d104      	bne.n	8104270 <HAL_TIM_PWM_Stop_DMA+0x178>
 8104266:	687b      	ldr	r3, [r7, #4]
 8104268:	2201      	movs	r2, #1
 810426a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810426e:	e023      	b.n	81042b8 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8104270:	683b      	ldr	r3, [r7, #0]
 8104272:	2b04      	cmp	r3, #4
 8104274:	d104      	bne.n	8104280 <HAL_TIM_PWM_Stop_DMA+0x188>
 8104276:	687b      	ldr	r3, [r7, #4]
 8104278:	2201      	movs	r2, #1
 810427a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810427e:	e01b      	b.n	81042b8 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8104280:	683b      	ldr	r3, [r7, #0]
 8104282:	2b08      	cmp	r3, #8
 8104284:	d104      	bne.n	8104290 <HAL_TIM_PWM_Stop_DMA+0x198>
 8104286:	687b      	ldr	r3, [r7, #4]
 8104288:	2201      	movs	r2, #1
 810428a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810428e:	e013      	b.n	81042b8 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8104290:	683b      	ldr	r3, [r7, #0]
 8104292:	2b0c      	cmp	r3, #12
 8104294:	d104      	bne.n	81042a0 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8104296:	687b      	ldr	r3, [r7, #4]
 8104298:	2201      	movs	r2, #1
 810429a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810429e:	e00b      	b.n	81042b8 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 81042a0:	683b      	ldr	r3, [r7, #0]
 81042a2:	2b10      	cmp	r3, #16
 81042a4:	d104      	bne.n	81042b0 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 81042a6:	687b      	ldr	r3, [r7, #4]
 81042a8:	2201      	movs	r2, #1
 81042aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81042ae:	e003      	b.n	81042b8 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 81042b0:	687b      	ldr	r3, [r7, #4]
 81042b2:	2201      	movs	r2, #1
 81042b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 81042b8:	2300      	movs	r3, #0
}
 81042ba:	4618      	mov	r0, r3
 81042bc:	3708      	adds	r7, #8
 81042be:	46bd      	mov	sp, r7
 81042c0:	bd80      	pop	{r7, pc}
 81042c2:	bf00      	nop
 81042c4:	40010000 	.word	0x40010000
 81042c8:	40010400 	.word	0x40010400
 81042cc:	40014000 	.word	0x40014000
 81042d0:	40014400 	.word	0x40014400
 81042d4:	40014800 	.word	0x40014800

081042d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 81042d8:	b580      	push	{r7, lr}
 81042da:	b084      	sub	sp, #16
 81042dc:	af00      	add	r7, sp, #0
 81042de:	60f8      	str	r0, [r7, #12]
 81042e0:	60b9      	str	r1, [r7, #8]
 81042e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 81042e4:	68fb      	ldr	r3, [r7, #12]
 81042e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81042ea:	2b01      	cmp	r3, #1
 81042ec:	d101      	bne.n	81042f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 81042ee:	2302      	movs	r3, #2
 81042f0:	e0fd      	b.n	81044ee <HAL_TIM_PWM_ConfigChannel+0x216>
 81042f2:	68fb      	ldr	r3, [r7, #12]
 81042f4:	2201      	movs	r2, #1
 81042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 81042fa:	687b      	ldr	r3, [r7, #4]
 81042fc:	2b14      	cmp	r3, #20
 81042fe:	f200 80f0 	bhi.w	81044e2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8104302:	a201      	add	r2, pc, #4	; (adr r2, 8104308 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8104304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104308:	0810435d 	.word	0x0810435d
 810430c:	081044e3 	.word	0x081044e3
 8104310:	081044e3 	.word	0x081044e3
 8104314:	081044e3 	.word	0x081044e3
 8104318:	0810439d 	.word	0x0810439d
 810431c:	081044e3 	.word	0x081044e3
 8104320:	081044e3 	.word	0x081044e3
 8104324:	081044e3 	.word	0x081044e3
 8104328:	081043df 	.word	0x081043df
 810432c:	081044e3 	.word	0x081044e3
 8104330:	081044e3 	.word	0x081044e3
 8104334:	081044e3 	.word	0x081044e3
 8104338:	0810441f 	.word	0x0810441f
 810433c:	081044e3 	.word	0x081044e3
 8104340:	081044e3 	.word	0x081044e3
 8104344:	081044e3 	.word	0x081044e3
 8104348:	08104461 	.word	0x08104461
 810434c:	081044e3 	.word	0x081044e3
 8104350:	081044e3 	.word	0x081044e3
 8104354:	081044e3 	.word	0x081044e3
 8104358:	081044a1 	.word	0x081044a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810435c:	68fb      	ldr	r3, [r7, #12]
 810435e:	681b      	ldr	r3, [r3, #0]
 8104360:	68b9      	ldr	r1, [r7, #8]
 8104362:	4618      	mov	r0, r3
 8104364:	f000 fb3c 	bl	81049e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8104368:	68fb      	ldr	r3, [r7, #12]
 810436a:	681b      	ldr	r3, [r3, #0]
 810436c:	699a      	ldr	r2, [r3, #24]
 810436e:	68fb      	ldr	r3, [r7, #12]
 8104370:	681b      	ldr	r3, [r3, #0]
 8104372:	f042 0208 	orr.w	r2, r2, #8
 8104376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8104378:	68fb      	ldr	r3, [r7, #12]
 810437a:	681b      	ldr	r3, [r3, #0]
 810437c:	699a      	ldr	r2, [r3, #24]
 810437e:	68fb      	ldr	r3, [r7, #12]
 8104380:	681b      	ldr	r3, [r3, #0]
 8104382:	f022 0204 	bic.w	r2, r2, #4
 8104386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8104388:	68fb      	ldr	r3, [r7, #12]
 810438a:	681b      	ldr	r3, [r3, #0]
 810438c:	6999      	ldr	r1, [r3, #24]
 810438e:	68bb      	ldr	r3, [r7, #8]
 8104390:	691a      	ldr	r2, [r3, #16]
 8104392:	68fb      	ldr	r3, [r7, #12]
 8104394:	681b      	ldr	r3, [r3, #0]
 8104396:	430a      	orrs	r2, r1
 8104398:	619a      	str	r2, [r3, #24]
      break;
 810439a:	e0a3      	b.n	81044e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810439c:	68fb      	ldr	r3, [r7, #12]
 810439e:	681b      	ldr	r3, [r3, #0]
 81043a0:	68b9      	ldr	r1, [r7, #8]
 81043a2:	4618      	mov	r0, r3
 81043a4:	f000 fbac 	bl	8104b00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 81043a8:	68fb      	ldr	r3, [r7, #12]
 81043aa:	681b      	ldr	r3, [r3, #0]
 81043ac:	699a      	ldr	r2, [r3, #24]
 81043ae:	68fb      	ldr	r3, [r7, #12]
 81043b0:	681b      	ldr	r3, [r3, #0]
 81043b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81043b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 81043b8:	68fb      	ldr	r3, [r7, #12]
 81043ba:	681b      	ldr	r3, [r3, #0]
 81043bc:	699a      	ldr	r2, [r3, #24]
 81043be:	68fb      	ldr	r3, [r7, #12]
 81043c0:	681b      	ldr	r3, [r3, #0]
 81043c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81043c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81043c8:	68fb      	ldr	r3, [r7, #12]
 81043ca:	681b      	ldr	r3, [r3, #0]
 81043cc:	6999      	ldr	r1, [r3, #24]
 81043ce:	68bb      	ldr	r3, [r7, #8]
 81043d0:	691b      	ldr	r3, [r3, #16]
 81043d2:	021a      	lsls	r2, r3, #8
 81043d4:	68fb      	ldr	r3, [r7, #12]
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	430a      	orrs	r2, r1
 81043da:	619a      	str	r2, [r3, #24]
      break;
 81043dc:	e082      	b.n	81044e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81043de:	68fb      	ldr	r3, [r7, #12]
 81043e0:	681b      	ldr	r3, [r3, #0]
 81043e2:	68b9      	ldr	r1, [r7, #8]
 81043e4:	4618      	mov	r0, r3
 81043e6:	f000 fc15 	bl	8104c14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81043ea:	68fb      	ldr	r3, [r7, #12]
 81043ec:	681b      	ldr	r3, [r3, #0]
 81043ee:	69da      	ldr	r2, [r3, #28]
 81043f0:	68fb      	ldr	r3, [r7, #12]
 81043f2:	681b      	ldr	r3, [r3, #0]
 81043f4:	f042 0208 	orr.w	r2, r2, #8
 81043f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81043fa:	68fb      	ldr	r3, [r7, #12]
 81043fc:	681b      	ldr	r3, [r3, #0]
 81043fe:	69da      	ldr	r2, [r3, #28]
 8104400:	68fb      	ldr	r3, [r7, #12]
 8104402:	681b      	ldr	r3, [r3, #0]
 8104404:	f022 0204 	bic.w	r2, r2, #4
 8104408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810440a:	68fb      	ldr	r3, [r7, #12]
 810440c:	681b      	ldr	r3, [r3, #0]
 810440e:	69d9      	ldr	r1, [r3, #28]
 8104410:	68bb      	ldr	r3, [r7, #8]
 8104412:	691a      	ldr	r2, [r3, #16]
 8104414:	68fb      	ldr	r3, [r7, #12]
 8104416:	681b      	ldr	r3, [r3, #0]
 8104418:	430a      	orrs	r2, r1
 810441a:	61da      	str	r2, [r3, #28]
      break;
 810441c:	e062      	b.n	81044e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810441e:	68fb      	ldr	r3, [r7, #12]
 8104420:	681b      	ldr	r3, [r3, #0]
 8104422:	68b9      	ldr	r1, [r7, #8]
 8104424:	4618      	mov	r0, r3
 8104426:	f000 fc7b 	bl	8104d20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810442a:	68fb      	ldr	r3, [r7, #12]
 810442c:	681b      	ldr	r3, [r3, #0]
 810442e:	69da      	ldr	r2, [r3, #28]
 8104430:	68fb      	ldr	r3, [r7, #12]
 8104432:	681b      	ldr	r3, [r3, #0]
 8104434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810443a:	68fb      	ldr	r3, [r7, #12]
 810443c:	681b      	ldr	r3, [r3, #0]
 810443e:	69da      	ldr	r2, [r3, #28]
 8104440:	68fb      	ldr	r3, [r7, #12]
 8104442:	681b      	ldr	r3, [r3, #0]
 8104444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8104448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810444a:	68fb      	ldr	r3, [r7, #12]
 810444c:	681b      	ldr	r3, [r3, #0]
 810444e:	69d9      	ldr	r1, [r3, #28]
 8104450:	68bb      	ldr	r3, [r7, #8]
 8104452:	691b      	ldr	r3, [r3, #16]
 8104454:	021a      	lsls	r2, r3, #8
 8104456:	68fb      	ldr	r3, [r7, #12]
 8104458:	681b      	ldr	r3, [r3, #0]
 810445a:	430a      	orrs	r2, r1
 810445c:	61da      	str	r2, [r3, #28]
      break;
 810445e:	e041      	b.n	81044e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8104460:	68fb      	ldr	r3, [r7, #12]
 8104462:	681b      	ldr	r3, [r3, #0]
 8104464:	68b9      	ldr	r1, [r7, #8]
 8104466:	4618      	mov	r0, r3
 8104468:	f000 fcc2 	bl	8104df0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810446c:	68fb      	ldr	r3, [r7, #12]
 810446e:	681b      	ldr	r3, [r3, #0]
 8104470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104472:	68fb      	ldr	r3, [r7, #12]
 8104474:	681b      	ldr	r3, [r3, #0]
 8104476:	f042 0208 	orr.w	r2, r2, #8
 810447a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810447c:	68fb      	ldr	r3, [r7, #12]
 810447e:	681b      	ldr	r3, [r3, #0]
 8104480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104482:	68fb      	ldr	r3, [r7, #12]
 8104484:	681b      	ldr	r3, [r3, #0]
 8104486:	f022 0204 	bic.w	r2, r2, #4
 810448a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810448c:	68fb      	ldr	r3, [r7, #12]
 810448e:	681b      	ldr	r3, [r3, #0]
 8104490:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8104492:	68bb      	ldr	r3, [r7, #8]
 8104494:	691a      	ldr	r2, [r3, #16]
 8104496:	68fb      	ldr	r3, [r7, #12]
 8104498:	681b      	ldr	r3, [r3, #0]
 810449a:	430a      	orrs	r2, r1
 810449c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810449e:	e021      	b.n	81044e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81044a0:	68fb      	ldr	r3, [r7, #12]
 81044a2:	681b      	ldr	r3, [r3, #0]
 81044a4:	68b9      	ldr	r1, [r7, #8]
 81044a6:	4618      	mov	r0, r3
 81044a8:	f000 fd04 	bl	8104eb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81044ac:	68fb      	ldr	r3, [r7, #12]
 81044ae:	681b      	ldr	r3, [r3, #0]
 81044b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81044b2:	68fb      	ldr	r3, [r7, #12]
 81044b4:	681b      	ldr	r3, [r3, #0]
 81044b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81044ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 81044bc:	68fb      	ldr	r3, [r7, #12]
 81044be:	681b      	ldr	r3, [r3, #0]
 81044c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81044c2:	68fb      	ldr	r3, [r7, #12]
 81044c4:	681b      	ldr	r3, [r3, #0]
 81044c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81044ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81044cc:	68fb      	ldr	r3, [r7, #12]
 81044ce:	681b      	ldr	r3, [r3, #0]
 81044d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81044d2:	68bb      	ldr	r3, [r7, #8]
 81044d4:	691b      	ldr	r3, [r3, #16]
 81044d6:	021a      	lsls	r2, r3, #8
 81044d8:	68fb      	ldr	r3, [r7, #12]
 81044da:	681b      	ldr	r3, [r3, #0]
 81044dc:	430a      	orrs	r2, r1
 81044de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81044e0:	e000      	b.n	81044e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 81044e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81044e4:	68fb      	ldr	r3, [r7, #12]
 81044e6:	2200      	movs	r2, #0
 81044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81044ec:	2300      	movs	r3, #0
}
 81044ee:	4618      	mov	r0, r3
 81044f0:	3710      	adds	r7, #16
 81044f2:	46bd      	mov	sp, r7
 81044f4:	bd80      	pop	{r7, pc}
 81044f6:	bf00      	nop

081044f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 81044f8:	b580      	push	{r7, lr}
 81044fa:	b084      	sub	sp, #16
 81044fc:	af00      	add	r7, sp, #0
 81044fe:	6078      	str	r0, [r7, #4]
 8104500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8104502:	687b      	ldr	r3, [r7, #4]
 8104504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104508:	2b01      	cmp	r3, #1
 810450a:	d101      	bne.n	8104510 <HAL_TIM_ConfigClockSource+0x18>
 810450c:	2302      	movs	r3, #2
 810450e:	e0dd      	b.n	81046cc <HAL_TIM_ConfigClockSource+0x1d4>
 8104510:	687b      	ldr	r3, [r7, #4]
 8104512:	2201      	movs	r2, #1
 8104514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	2202      	movs	r2, #2
 810451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8104520:	687b      	ldr	r3, [r7, #4]
 8104522:	681b      	ldr	r3, [r3, #0]
 8104524:	689b      	ldr	r3, [r3, #8]
 8104526:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8104528:	68fb      	ldr	r3, [r7, #12]
 810452a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 810452e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8104532:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8104534:	68fb      	ldr	r3, [r7, #12]
 8104536:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810453a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	681b      	ldr	r3, [r3, #0]
 8104540:	68fa      	ldr	r2, [r7, #12]
 8104542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8104544:	683b      	ldr	r3, [r7, #0]
 8104546:	681b      	ldr	r3, [r3, #0]
 8104548:	4a62      	ldr	r2, [pc, #392]	; (81046d4 <HAL_TIM_ConfigClockSource+0x1dc>)
 810454a:	4293      	cmp	r3, r2
 810454c:	f000 80a9 	beq.w	81046a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8104550:	4a60      	ldr	r2, [pc, #384]	; (81046d4 <HAL_TIM_ConfigClockSource+0x1dc>)
 8104552:	4293      	cmp	r3, r2
 8104554:	f200 80ae 	bhi.w	81046b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8104558:	4a5f      	ldr	r2, [pc, #380]	; (81046d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 810455a:	4293      	cmp	r3, r2
 810455c:	f000 80a1 	beq.w	81046a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8104560:	4a5d      	ldr	r2, [pc, #372]	; (81046d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8104562:	4293      	cmp	r3, r2
 8104564:	f200 80a6 	bhi.w	81046b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8104568:	4a5c      	ldr	r2, [pc, #368]	; (81046dc <HAL_TIM_ConfigClockSource+0x1e4>)
 810456a:	4293      	cmp	r3, r2
 810456c:	f000 8099 	beq.w	81046a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8104570:	4a5a      	ldr	r2, [pc, #360]	; (81046dc <HAL_TIM_ConfigClockSource+0x1e4>)
 8104572:	4293      	cmp	r3, r2
 8104574:	f200 809e 	bhi.w	81046b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8104578:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810457c:	f000 8091 	beq.w	81046a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8104580:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8104584:	f200 8096 	bhi.w	81046b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8104588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810458c:	f000 8089 	beq.w	81046a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8104590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104594:	f200 808e 	bhi.w	81046b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8104598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810459c:	d03e      	beq.n	810461c <HAL_TIM_ConfigClockSource+0x124>
 810459e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81045a2:	f200 8087 	bhi.w	81046b4 <HAL_TIM_ConfigClockSource+0x1bc>
 81045a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81045aa:	f000 8085 	beq.w	81046b8 <HAL_TIM_ConfigClockSource+0x1c0>
 81045ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81045b2:	d87f      	bhi.n	81046b4 <HAL_TIM_ConfigClockSource+0x1bc>
 81045b4:	2b70      	cmp	r3, #112	; 0x70
 81045b6:	d01a      	beq.n	81045ee <HAL_TIM_ConfigClockSource+0xf6>
 81045b8:	2b70      	cmp	r3, #112	; 0x70
 81045ba:	d87b      	bhi.n	81046b4 <HAL_TIM_ConfigClockSource+0x1bc>
 81045bc:	2b60      	cmp	r3, #96	; 0x60
 81045be:	d050      	beq.n	8104662 <HAL_TIM_ConfigClockSource+0x16a>
 81045c0:	2b60      	cmp	r3, #96	; 0x60
 81045c2:	d877      	bhi.n	81046b4 <HAL_TIM_ConfigClockSource+0x1bc>
 81045c4:	2b50      	cmp	r3, #80	; 0x50
 81045c6:	d03c      	beq.n	8104642 <HAL_TIM_ConfigClockSource+0x14a>
 81045c8:	2b50      	cmp	r3, #80	; 0x50
 81045ca:	d873      	bhi.n	81046b4 <HAL_TIM_ConfigClockSource+0x1bc>
 81045cc:	2b40      	cmp	r3, #64	; 0x40
 81045ce:	d058      	beq.n	8104682 <HAL_TIM_ConfigClockSource+0x18a>
 81045d0:	2b40      	cmp	r3, #64	; 0x40
 81045d2:	d86f      	bhi.n	81046b4 <HAL_TIM_ConfigClockSource+0x1bc>
 81045d4:	2b30      	cmp	r3, #48	; 0x30
 81045d6:	d064      	beq.n	81046a2 <HAL_TIM_ConfigClockSource+0x1aa>
 81045d8:	2b30      	cmp	r3, #48	; 0x30
 81045da:	d86b      	bhi.n	81046b4 <HAL_TIM_ConfigClockSource+0x1bc>
 81045dc:	2b20      	cmp	r3, #32
 81045de:	d060      	beq.n	81046a2 <HAL_TIM_ConfigClockSource+0x1aa>
 81045e0:	2b20      	cmp	r3, #32
 81045e2:	d867      	bhi.n	81046b4 <HAL_TIM_ConfigClockSource+0x1bc>
 81045e4:	2b00      	cmp	r3, #0
 81045e6:	d05c      	beq.n	81046a2 <HAL_TIM_ConfigClockSource+0x1aa>
 81045e8:	2b10      	cmp	r3, #16
 81045ea:	d05a      	beq.n	81046a2 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 81045ec:	e062      	b.n	81046b4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 81045ee:	687b      	ldr	r3, [r7, #4]
 81045f0:	6818      	ldr	r0, [r3, #0]
 81045f2:	683b      	ldr	r3, [r7, #0]
 81045f4:	6899      	ldr	r1, [r3, #8]
 81045f6:	683b      	ldr	r3, [r7, #0]
 81045f8:	685a      	ldr	r2, [r3, #4]
 81045fa:	683b      	ldr	r3, [r7, #0]
 81045fc:	68db      	ldr	r3, [r3, #12]
 81045fe:	f000 fd39 	bl	8105074 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8104602:	687b      	ldr	r3, [r7, #4]
 8104604:	681b      	ldr	r3, [r3, #0]
 8104606:	689b      	ldr	r3, [r3, #8]
 8104608:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810460a:	68fb      	ldr	r3, [r7, #12]
 810460c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8104610:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8104612:	687b      	ldr	r3, [r7, #4]
 8104614:	681b      	ldr	r3, [r3, #0]
 8104616:	68fa      	ldr	r2, [r7, #12]
 8104618:	609a      	str	r2, [r3, #8]
      break;
 810461a:	e04e      	b.n	81046ba <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 810461c:	687b      	ldr	r3, [r7, #4]
 810461e:	6818      	ldr	r0, [r3, #0]
 8104620:	683b      	ldr	r3, [r7, #0]
 8104622:	6899      	ldr	r1, [r3, #8]
 8104624:	683b      	ldr	r3, [r7, #0]
 8104626:	685a      	ldr	r2, [r3, #4]
 8104628:	683b      	ldr	r3, [r7, #0]
 810462a:	68db      	ldr	r3, [r3, #12]
 810462c:	f000 fd22 	bl	8105074 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	681b      	ldr	r3, [r3, #0]
 8104634:	689a      	ldr	r2, [r3, #8]
 8104636:	687b      	ldr	r3, [r7, #4]
 8104638:	681b      	ldr	r3, [r3, #0]
 810463a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810463e:	609a      	str	r2, [r3, #8]
      break;
 8104640:	e03b      	b.n	81046ba <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	6818      	ldr	r0, [r3, #0]
 8104646:	683b      	ldr	r3, [r7, #0]
 8104648:	6859      	ldr	r1, [r3, #4]
 810464a:	683b      	ldr	r3, [r7, #0]
 810464c:	68db      	ldr	r3, [r3, #12]
 810464e:	461a      	mov	r2, r3
 8104650:	f000 fc94 	bl	8104f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8104654:	687b      	ldr	r3, [r7, #4]
 8104656:	681b      	ldr	r3, [r3, #0]
 8104658:	2150      	movs	r1, #80	; 0x50
 810465a:	4618      	mov	r0, r3
 810465c:	f000 fced 	bl	810503a <TIM_ITRx_SetConfig>
      break;
 8104660:	e02b      	b.n	81046ba <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8104662:	687b      	ldr	r3, [r7, #4]
 8104664:	6818      	ldr	r0, [r3, #0]
 8104666:	683b      	ldr	r3, [r7, #0]
 8104668:	6859      	ldr	r1, [r3, #4]
 810466a:	683b      	ldr	r3, [r7, #0]
 810466c:	68db      	ldr	r3, [r3, #12]
 810466e:	461a      	mov	r2, r3
 8104670:	f000 fcb3 	bl	8104fda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8104674:	687b      	ldr	r3, [r7, #4]
 8104676:	681b      	ldr	r3, [r3, #0]
 8104678:	2160      	movs	r1, #96	; 0x60
 810467a:	4618      	mov	r0, r3
 810467c:	f000 fcdd 	bl	810503a <TIM_ITRx_SetConfig>
      break;
 8104680:	e01b      	b.n	81046ba <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8104682:	687b      	ldr	r3, [r7, #4]
 8104684:	6818      	ldr	r0, [r3, #0]
 8104686:	683b      	ldr	r3, [r7, #0]
 8104688:	6859      	ldr	r1, [r3, #4]
 810468a:	683b      	ldr	r3, [r7, #0]
 810468c:	68db      	ldr	r3, [r3, #12]
 810468e:	461a      	mov	r2, r3
 8104690:	f000 fc74 	bl	8104f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	681b      	ldr	r3, [r3, #0]
 8104698:	2140      	movs	r1, #64	; 0x40
 810469a:	4618      	mov	r0, r3
 810469c:	f000 fccd 	bl	810503a <TIM_ITRx_SetConfig>
      break;
 81046a0:	e00b      	b.n	81046ba <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 81046a2:	687b      	ldr	r3, [r7, #4]
 81046a4:	681a      	ldr	r2, [r3, #0]
 81046a6:	683b      	ldr	r3, [r7, #0]
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	4619      	mov	r1, r3
 81046ac:	4610      	mov	r0, r2
 81046ae:	f000 fcc4 	bl	810503a <TIM_ITRx_SetConfig>
        break;
 81046b2:	e002      	b.n	81046ba <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 81046b4:	bf00      	nop
 81046b6:	e000      	b.n	81046ba <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 81046b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	2201      	movs	r2, #1
 81046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	2200      	movs	r2, #0
 81046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81046ca:	2300      	movs	r3, #0
}
 81046cc:	4618      	mov	r0, r3
 81046ce:	3710      	adds	r7, #16
 81046d0:	46bd      	mov	sp, r7
 81046d2:	bd80      	pop	{r7, pc}
 81046d4:	00100040 	.word	0x00100040
 81046d8:	00100030 	.word	0x00100030
 81046dc:	00100020 	.word	0x00100020

081046e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 81046e0:	b480      	push	{r7}
 81046e2:	b083      	sub	sp, #12
 81046e4:	af00      	add	r7, sp, #0
 81046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 81046e8:	bf00      	nop
 81046ea:	370c      	adds	r7, #12
 81046ec:	46bd      	mov	sp, r7
 81046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046f2:	4770      	bx	lr

081046f4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 81046f4:	b480      	push	{r7}
 81046f6:	b083      	sub	sp, #12
 81046f8:	af00      	add	r7, sp, #0
 81046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 81046fc:	bf00      	nop
 81046fe:	370c      	adds	r7, #12
 8104700:	46bd      	mov	sp, r7
 8104702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104706:	4770      	bx	lr

08104708 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8104708:	b580      	push	{r7, lr}
 810470a:	b084      	sub	sp, #16
 810470c:	af00      	add	r7, sp, #0
 810470e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104714:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8104716:	68fb      	ldr	r3, [r7, #12]
 8104718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810471a:	687a      	ldr	r2, [r7, #4]
 810471c:	429a      	cmp	r2, r3
 810471e:	d107      	bne.n	8104730 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8104720:	68fb      	ldr	r3, [r7, #12]
 8104722:	2201      	movs	r2, #1
 8104724:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8104726:	68fb      	ldr	r3, [r7, #12]
 8104728:	2201      	movs	r2, #1
 810472a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810472e:	e02a      	b.n	8104786 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8104730:	68fb      	ldr	r3, [r7, #12]
 8104732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104734:	687a      	ldr	r2, [r7, #4]
 8104736:	429a      	cmp	r2, r3
 8104738:	d107      	bne.n	810474a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810473a:	68fb      	ldr	r3, [r7, #12]
 810473c:	2202      	movs	r2, #2
 810473e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8104740:	68fb      	ldr	r3, [r7, #12]
 8104742:	2201      	movs	r2, #1
 8104744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8104748:	e01d      	b.n	8104786 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 810474a:	68fb      	ldr	r3, [r7, #12]
 810474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810474e:	687a      	ldr	r2, [r7, #4]
 8104750:	429a      	cmp	r2, r3
 8104752:	d107      	bne.n	8104764 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8104754:	68fb      	ldr	r3, [r7, #12]
 8104756:	2204      	movs	r2, #4
 8104758:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 810475a:	68fb      	ldr	r3, [r7, #12]
 810475c:	2201      	movs	r2, #1
 810475e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8104762:	e010      	b.n	8104786 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8104764:	68fb      	ldr	r3, [r7, #12]
 8104766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104768:	687a      	ldr	r2, [r7, #4]
 810476a:	429a      	cmp	r2, r3
 810476c:	d107      	bne.n	810477e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810476e:	68fb      	ldr	r3, [r7, #12]
 8104770:	2208      	movs	r2, #8
 8104772:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8104774:	68fb      	ldr	r3, [r7, #12]
 8104776:	2201      	movs	r2, #1
 8104778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810477c:	e003      	b.n	8104786 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 810477e:	68fb      	ldr	r3, [r7, #12]
 8104780:	2201      	movs	r2, #1
 8104782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8104786:	68f8      	ldr	r0, [r7, #12]
 8104788:	f7ff ffb4 	bl	81046f4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810478c:	68fb      	ldr	r3, [r7, #12]
 810478e:	2200      	movs	r2, #0
 8104790:	771a      	strb	r2, [r3, #28]
}
 8104792:	bf00      	nop
 8104794:	3710      	adds	r7, #16
 8104796:	46bd      	mov	sp, r7
 8104798:	bd80      	pop	{r7, pc}

0810479a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 810479a:	b580      	push	{r7, lr}
 810479c:	b084      	sub	sp, #16
 810479e:	af00      	add	r7, sp, #0
 81047a0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 81047a2:	687b      	ldr	r3, [r7, #4]
 81047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81047a6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 81047a8:	68fb      	ldr	r3, [r7, #12]
 81047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81047ac:	687a      	ldr	r2, [r7, #4]
 81047ae:	429a      	cmp	r2, r3
 81047b0:	d10b      	bne.n	81047ca <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81047b2:	68fb      	ldr	r3, [r7, #12]
 81047b4:	2201      	movs	r2, #1
 81047b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 81047b8:	687b      	ldr	r3, [r7, #4]
 81047ba:	69db      	ldr	r3, [r3, #28]
 81047bc:	2b00      	cmp	r3, #0
 81047be:	d136      	bne.n	810482e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 81047c0:	68fb      	ldr	r3, [r7, #12]
 81047c2:	2201      	movs	r2, #1
 81047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81047c8:	e031      	b.n	810482e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 81047ca:	68fb      	ldr	r3, [r7, #12]
 81047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81047ce:	687a      	ldr	r2, [r7, #4]
 81047d0:	429a      	cmp	r2, r3
 81047d2:	d10b      	bne.n	81047ec <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81047d4:	68fb      	ldr	r3, [r7, #12]
 81047d6:	2202      	movs	r2, #2
 81047d8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 81047da:	687b      	ldr	r3, [r7, #4]
 81047dc:	69db      	ldr	r3, [r3, #28]
 81047de:	2b00      	cmp	r3, #0
 81047e0:	d125      	bne.n	810482e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 81047e2:	68fb      	ldr	r3, [r7, #12]
 81047e4:	2201      	movs	r2, #1
 81047e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81047ea:	e020      	b.n	810482e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 81047ec:	68fb      	ldr	r3, [r7, #12]
 81047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81047f0:	687a      	ldr	r2, [r7, #4]
 81047f2:	429a      	cmp	r2, r3
 81047f4:	d10b      	bne.n	810480e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81047f6:	68fb      	ldr	r3, [r7, #12]
 81047f8:	2204      	movs	r2, #4
 81047fa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 81047fc:	687b      	ldr	r3, [r7, #4]
 81047fe:	69db      	ldr	r3, [r3, #28]
 8104800:	2b00      	cmp	r3, #0
 8104802:	d114      	bne.n	810482e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8104804:	68fb      	ldr	r3, [r7, #12]
 8104806:	2201      	movs	r2, #1
 8104808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810480c:	e00f      	b.n	810482e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 810480e:	68fb      	ldr	r3, [r7, #12]
 8104810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104812:	687a      	ldr	r2, [r7, #4]
 8104814:	429a      	cmp	r2, r3
 8104816:	d10a      	bne.n	810482e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8104818:	68fb      	ldr	r3, [r7, #12]
 810481a:	2208      	movs	r2, #8
 810481c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 810481e:	687b      	ldr	r3, [r7, #4]
 8104820:	69db      	ldr	r3, [r3, #28]
 8104822:	2b00      	cmp	r3, #0
 8104824:	d103      	bne.n	810482e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8104826:	68fb      	ldr	r3, [r7, #12]
 8104828:	2201      	movs	r2, #1
 810482a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 810482e:	68f8      	ldr	r0, [r7, #12]
 8104830:	f7fb fd6e 	bl	8100310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104834:	68fb      	ldr	r3, [r7, #12]
 8104836:	2200      	movs	r2, #0
 8104838:	771a      	strb	r2, [r3, #28]
}
 810483a:	bf00      	nop
 810483c:	3710      	adds	r7, #16
 810483e:	46bd      	mov	sp, r7
 8104840:	bd80      	pop	{r7, pc}

08104842 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8104842:	b580      	push	{r7, lr}
 8104844:	b084      	sub	sp, #16
 8104846:	af00      	add	r7, sp, #0
 8104848:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810484a:	687b      	ldr	r3, [r7, #4]
 810484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810484e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8104850:	68fb      	ldr	r3, [r7, #12]
 8104852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104854:	687a      	ldr	r2, [r7, #4]
 8104856:	429a      	cmp	r2, r3
 8104858:	d103      	bne.n	8104862 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810485a:	68fb      	ldr	r3, [r7, #12]
 810485c:	2201      	movs	r2, #1
 810485e:	771a      	strb	r2, [r3, #28]
 8104860:	e019      	b.n	8104896 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8104862:	68fb      	ldr	r3, [r7, #12]
 8104864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104866:	687a      	ldr	r2, [r7, #4]
 8104868:	429a      	cmp	r2, r3
 810486a:	d103      	bne.n	8104874 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810486c:	68fb      	ldr	r3, [r7, #12]
 810486e:	2202      	movs	r2, #2
 8104870:	771a      	strb	r2, [r3, #28]
 8104872:	e010      	b.n	8104896 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8104874:	68fb      	ldr	r3, [r7, #12]
 8104876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104878:	687a      	ldr	r2, [r7, #4]
 810487a:	429a      	cmp	r2, r3
 810487c:	d103      	bne.n	8104886 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810487e:	68fb      	ldr	r3, [r7, #12]
 8104880:	2204      	movs	r2, #4
 8104882:	771a      	strb	r2, [r3, #28]
 8104884:	e007      	b.n	8104896 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8104886:	68fb      	ldr	r3, [r7, #12]
 8104888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810488a:	687a      	ldr	r2, [r7, #4]
 810488c:	429a      	cmp	r2, r3
 810488e:	d102      	bne.n	8104896 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8104890:	68fb      	ldr	r3, [r7, #12]
 8104892:	2208      	movs	r2, #8
 8104894:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8104896:	68f8      	ldr	r0, [r7, #12]
 8104898:	f7ff ff22 	bl	81046e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810489c:	68fb      	ldr	r3, [r7, #12]
 810489e:	2200      	movs	r2, #0
 81048a0:	771a      	strb	r2, [r3, #28]
}
 81048a2:	bf00      	nop
 81048a4:	3710      	adds	r7, #16
 81048a6:	46bd      	mov	sp, r7
 81048a8:	bd80      	pop	{r7, pc}
	...

081048ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81048ac:	b480      	push	{r7}
 81048ae:	b085      	sub	sp, #20
 81048b0:	af00      	add	r7, sp, #0
 81048b2:	6078      	str	r0, [r7, #4]
 81048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81048b6:	687b      	ldr	r3, [r7, #4]
 81048b8:	681b      	ldr	r3, [r3, #0]
 81048ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81048bc:	687b      	ldr	r3, [r7, #4]
 81048be:	4a40      	ldr	r2, [pc, #256]	; (81049c0 <TIM_Base_SetConfig+0x114>)
 81048c0:	4293      	cmp	r3, r2
 81048c2:	d013      	beq.n	81048ec <TIM_Base_SetConfig+0x40>
 81048c4:	687b      	ldr	r3, [r7, #4]
 81048c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81048ca:	d00f      	beq.n	81048ec <TIM_Base_SetConfig+0x40>
 81048cc:	687b      	ldr	r3, [r7, #4]
 81048ce:	4a3d      	ldr	r2, [pc, #244]	; (81049c4 <TIM_Base_SetConfig+0x118>)
 81048d0:	4293      	cmp	r3, r2
 81048d2:	d00b      	beq.n	81048ec <TIM_Base_SetConfig+0x40>
 81048d4:	687b      	ldr	r3, [r7, #4]
 81048d6:	4a3c      	ldr	r2, [pc, #240]	; (81049c8 <TIM_Base_SetConfig+0x11c>)
 81048d8:	4293      	cmp	r3, r2
 81048da:	d007      	beq.n	81048ec <TIM_Base_SetConfig+0x40>
 81048dc:	687b      	ldr	r3, [r7, #4]
 81048de:	4a3b      	ldr	r2, [pc, #236]	; (81049cc <TIM_Base_SetConfig+0x120>)
 81048e0:	4293      	cmp	r3, r2
 81048e2:	d003      	beq.n	81048ec <TIM_Base_SetConfig+0x40>
 81048e4:	687b      	ldr	r3, [r7, #4]
 81048e6:	4a3a      	ldr	r2, [pc, #232]	; (81049d0 <TIM_Base_SetConfig+0x124>)
 81048e8:	4293      	cmp	r3, r2
 81048ea:	d108      	bne.n	81048fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81048ec:	68fb      	ldr	r3, [r7, #12]
 81048ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81048f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81048f4:	683b      	ldr	r3, [r7, #0]
 81048f6:	685b      	ldr	r3, [r3, #4]
 81048f8:	68fa      	ldr	r2, [r7, #12]
 81048fa:	4313      	orrs	r3, r2
 81048fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81048fe:	687b      	ldr	r3, [r7, #4]
 8104900:	4a2f      	ldr	r2, [pc, #188]	; (81049c0 <TIM_Base_SetConfig+0x114>)
 8104902:	4293      	cmp	r3, r2
 8104904:	d01f      	beq.n	8104946 <TIM_Base_SetConfig+0x9a>
 8104906:	687b      	ldr	r3, [r7, #4]
 8104908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810490c:	d01b      	beq.n	8104946 <TIM_Base_SetConfig+0x9a>
 810490e:	687b      	ldr	r3, [r7, #4]
 8104910:	4a2c      	ldr	r2, [pc, #176]	; (81049c4 <TIM_Base_SetConfig+0x118>)
 8104912:	4293      	cmp	r3, r2
 8104914:	d017      	beq.n	8104946 <TIM_Base_SetConfig+0x9a>
 8104916:	687b      	ldr	r3, [r7, #4]
 8104918:	4a2b      	ldr	r2, [pc, #172]	; (81049c8 <TIM_Base_SetConfig+0x11c>)
 810491a:	4293      	cmp	r3, r2
 810491c:	d013      	beq.n	8104946 <TIM_Base_SetConfig+0x9a>
 810491e:	687b      	ldr	r3, [r7, #4]
 8104920:	4a2a      	ldr	r2, [pc, #168]	; (81049cc <TIM_Base_SetConfig+0x120>)
 8104922:	4293      	cmp	r3, r2
 8104924:	d00f      	beq.n	8104946 <TIM_Base_SetConfig+0x9a>
 8104926:	687b      	ldr	r3, [r7, #4]
 8104928:	4a29      	ldr	r2, [pc, #164]	; (81049d0 <TIM_Base_SetConfig+0x124>)
 810492a:	4293      	cmp	r3, r2
 810492c:	d00b      	beq.n	8104946 <TIM_Base_SetConfig+0x9a>
 810492e:	687b      	ldr	r3, [r7, #4]
 8104930:	4a28      	ldr	r2, [pc, #160]	; (81049d4 <TIM_Base_SetConfig+0x128>)
 8104932:	4293      	cmp	r3, r2
 8104934:	d007      	beq.n	8104946 <TIM_Base_SetConfig+0x9a>
 8104936:	687b      	ldr	r3, [r7, #4]
 8104938:	4a27      	ldr	r2, [pc, #156]	; (81049d8 <TIM_Base_SetConfig+0x12c>)
 810493a:	4293      	cmp	r3, r2
 810493c:	d003      	beq.n	8104946 <TIM_Base_SetConfig+0x9a>
 810493e:	687b      	ldr	r3, [r7, #4]
 8104940:	4a26      	ldr	r2, [pc, #152]	; (81049dc <TIM_Base_SetConfig+0x130>)
 8104942:	4293      	cmp	r3, r2
 8104944:	d108      	bne.n	8104958 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8104946:	68fb      	ldr	r3, [r7, #12]
 8104948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810494c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810494e:	683b      	ldr	r3, [r7, #0]
 8104950:	68db      	ldr	r3, [r3, #12]
 8104952:	68fa      	ldr	r2, [r7, #12]
 8104954:	4313      	orrs	r3, r2
 8104956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8104958:	68fb      	ldr	r3, [r7, #12]
 810495a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810495e:	683b      	ldr	r3, [r7, #0]
 8104960:	695b      	ldr	r3, [r3, #20]
 8104962:	4313      	orrs	r3, r2
 8104964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8104966:	687b      	ldr	r3, [r7, #4]
 8104968:	68fa      	ldr	r2, [r7, #12]
 810496a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810496c:	683b      	ldr	r3, [r7, #0]
 810496e:	689a      	ldr	r2, [r3, #8]
 8104970:	687b      	ldr	r3, [r7, #4]
 8104972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8104974:	683b      	ldr	r3, [r7, #0]
 8104976:	681a      	ldr	r2, [r3, #0]
 8104978:	687b      	ldr	r3, [r7, #4]
 810497a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810497c:	687b      	ldr	r3, [r7, #4]
 810497e:	4a10      	ldr	r2, [pc, #64]	; (81049c0 <TIM_Base_SetConfig+0x114>)
 8104980:	4293      	cmp	r3, r2
 8104982:	d00f      	beq.n	81049a4 <TIM_Base_SetConfig+0xf8>
 8104984:	687b      	ldr	r3, [r7, #4]
 8104986:	4a12      	ldr	r2, [pc, #72]	; (81049d0 <TIM_Base_SetConfig+0x124>)
 8104988:	4293      	cmp	r3, r2
 810498a:	d00b      	beq.n	81049a4 <TIM_Base_SetConfig+0xf8>
 810498c:	687b      	ldr	r3, [r7, #4]
 810498e:	4a11      	ldr	r2, [pc, #68]	; (81049d4 <TIM_Base_SetConfig+0x128>)
 8104990:	4293      	cmp	r3, r2
 8104992:	d007      	beq.n	81049a4 <TIM_Base_SetConfig+0xf8>
 8104994:	687b      	ldr	r3, [r7, #4]
 8104996:	4a10      	ldr	r2, [pc, #64]	; (81049d8 <TIM_Base_SetConfig+0x12c>)
 8104998:	4293      	cmp	r3, r2
 810499a:	d003      	beq.n	81049a4 <TIM_Base_SetConfig+0xf8>
 810499c:	687b      	ldr	r3, [r7, #4]
 810499e:	4a0f      	ldr	r2, [pc, #60]	; (81049dc <TIM_Base_SetConfig+0x130>)
 81049a0:	4293      	cmp	r3, r2
 81049a2:	d103      	bne.n	81049ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81049a4:	683b      	ldr	r3, [r7, #0]
 81049a6:	691a      	ldr	r2, [r3, #16]
 81049a8:	687b      	ldr	r3, [r7, #4]
 81049aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81049ac:	687b      	ldr	r3, [r7, #4]
 81049ae:	2201      	movs	r2, #1
 81049b0:	615a      	str	r2, [r3, #20]
}
 81049b2:	bf00      	nop
 81049b4:	3714      	adds	r7, #20
 81049b6:	46bd      	mov	sp, r7
 81049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049bc:	4770      	bx	lr
 81049be:	bf00      	nop
 81049c0:	40010000 	.word	0x40010000
 81049c4:	40000400 	.word	0x40000400
 81049c8:	40000800 	.word	0x40000800
 81049cc:	40000c00 	.word	0x40000c00
 81049d0:	40010400 	.word	0x40010400
 81049d4:	40014000 	.word	0x40014000
 81049d8:	40014400 	.word	0x40014400
 81049dc:	40014800 	.word	0x40014800

081049e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81049e0:	b480      	push	{r7}
 81049e2:	b087      	sub	sp, #28
 81049e4:	af00      	add	r7, sp, #0
 81049e6:	6078      	str	r0, [r7, #4]
 81049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81049ea:	687b      	ldr	r3, [r7, #4]
 81049ec:	6a1b      	ldr	r3, [r3, #32]
 81049ee:	f023 0201 	bic.w	r2, r3, #1
 81049f2:	687b      	ldr	r3, [r7, #4]
 81049f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81049f6:	687b      	ldr	r3, [r7, #4]
 81049f8:	6a1b      	ldr	r3, [r3, #32]
 81049fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81049fc:	687b      	ldr	r3, [r7, #4]
 81049fe:	685b      	ldr	r3, [r3, #4]
 8104a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8104a02:	687b      	ldr	r3, [r7, #4]
 8104a04:	699b      	ldr	r3, [r3, #24]
 8104a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8104a08:	68fb      	ldr	r3, [r7, #12]
 8104a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8104a14:	68fb      	ldr	r3, [r7, #12]
 8104a16:	f023 0303 	bic.w	r3, r3, #3
 8104a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8104a1c:	683b      	ldr	r3, [r7, #0]
 8104a1e:	681b      	ldr	r3, [r3, #0]
 8104a20:	68fa      	ldr	r2, [r7, #12]
 8104a22:	4313      	orrs	r3, r2
 8104a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8104a26:	697b      	ldr	r3, [r7, #20]
 8104a28:	f023 0302 	bic.w	r3, r3, #2
 8104a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8104a2e:	683b      	ldr	r3, [r7, #0]
 8104a30:	689b      	ldr	r3, [r3, #8]
 8104a32:	697a      	ldr	r2, [r7, #20]
 8104a34:	4313      	orrs	r3, r2
 8104a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8104a38:	687b      	ldr	r3, [r7, #4]
 8104a3a:	4a2c      	ldr	r2, [pc, #176]	; (8104aec <TIM_OC1_SetConfig+0x10c>)
 8104a3c:	4293      	cmp	r3, r2
 8104a3e:	d00f      	beq.n	8104a60 <TIM_OC1_SetConfig+0x80>
 8104a40:	687b      	ldr	r3, [r7, #4]
 8104a42:	4a2b      	ldr	r2, [pc, #172]	; (8104af0 <TIM_OC1_SetConfig+0x110>)
 8104a44:	4293      	cmp	r3, r2
 8104a46:	d00b      	beq.n	8104a60 <TIM_OC1_SetConfig+0x80>
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	4a2a      	ldr	r2, [pc, #168]	; (8104af4 <TIM_OC1_SetConfig+0x114>)
 8104a4c:	4293      	cmp	r3, r2
 8104a4e:	d007      	beq.n	8104a60 <TIM_OC1_SetConfig+0x80>
 8104a50:	687b      	ldr	r3, [r7, #4]
 8104a52:	4a29      	ldr	r2, [pc, #164]	; (8104af8 <TIM_OC1_SetConfig+0x118>)
 8104a54:	4293      	cmp	r3, r2
 8104a56:	d003      	beq.n	8104a60 <TIM_OC1_SetConfig+0x80>
 8104a58:	687b      	ldr	r3, [r7, #4]
 8104a5a:	4a28      	ldr	r2, [pc, #160]	; (8104afc <TIM_OC1_SetConfig+0x11c>)
 8104a5c:	4293      	cmp	r3, r2
 8104a5e:	d10c      	bne.n	8104a7a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8104a60:	697b      	ldr	r3, [r7, #20]
 8104a62:	f023 0308 	bic.w	r3, r3, #8
 8104a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8104a68:	683b      	ldr	r3, [r7, #0]
 8104a6a:	68db      	ldr	r3, [r3, #12]
 8104a6c:	697a      	ldr	r2, [r7, #20]
 8104a6e:	4313      	orrs	r3, r2
 8104a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8104a72:	697b      	ldr	r3, [r7, #20]
 8104a74:	f023 0304 	bic.w	r3, r3, #4
 8104a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104a7a:	687b      	ldr	r3, [r7, #4]
 8104a7c:	4a1b      	ldr	r2, [pc, #108]	; (8104aec <TIM_OC1_SetConfig+0x10c>)
 8104a7e:	4293      	cmp	r3, r2
 8104a80:	d00f      	beq.n	8104aa2 <TIM_OC1_SetConfig+0xc2>
 8104a82:	687b      	ldr	r3, [r7, #4]
 8104a84:	4a1a      	ldr	r2, [pc, #104]	; (8104af0 <TIM_OC1_SetConfig+0x110>)
 8104a86:	4293      	cmp	r3, r2
 8104a88:	d00b      	beq.n	8104aa2 <TIM_OC1_SetConfig+0xc2>
 8104a8a:	687b      	ldr	r3, [r7, #4]
 8104a8c:	4a19      	ldr	r2, [pc, #100]	; (8104af4 <TIM_OC1_SetConfig+0x114>)
 8104a8e:	4293      	cmp	r3, r2
 8104a90:	d007      	beq.n	8104aa2 <TIM_OC1_SetConfig+0xc2>
 8104a92:	687b      	ldr	r3, [r7, #4]
 8104a94:	4a18      	ldr	r2, [pc, #96]	; (8104af8 <TIM_OC1_SetConfig+0x118>)
 8104a96:	4293      	cmp	r3, r2
 8104a98:	d003      	beq.n	8104aa2 <TIM_OC1_SetConfig+0xc2>
 8104a9a:	687b      	ldr	r3, [r7, #4]
 8104a9c:	4a17      	ldr	r2, [pc, #92]	; (8104afc <TIM_OC1_SetConfig+0x11c>)
 8104a9e:	4293      	cmp	r3, r2
 8104aa0:	d111      	bne.n	8104ac6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8104aa2:	693b      	ldr	r3, [r7, #16]
 8104aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8104aaa:	693b      	ldr	r3, [r7, #16]
 8104aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8104ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8104ab2:	683b      	ldr	r3, [r7, #0]
 8104ab4:	695b      	ldr	r3, [r3, #20]
 8104ab6:	693a      	ldr	r2, [r7, #16]
 8104ab8:	4313      	orrs	r3, r2
 8104aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8104abc:	683b      	ldr	r3, [r7, #0]
 8104abe:	699b      	ldr	r3, [r3, #24]
 8104ac0:	693a      	ldr	r2, [r7, #16]
 8104ac2:	4313      	orrs	r3, r2
 8104ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104ac6:	687b      	ldr	r3, [r7, #4]
 8104ac8:	693a      	ldr	r2, [r7, #16]
 8104aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8104acc:	687b      	ldr	r3, [r7, #4]
 8104ace:	68fa      	ldr	r2, [r7, #12]
 8104ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8104ad2:	683b      	ldr	r3, [r7, #0]
 8104ad4:	685a      	ldr	r2, [r3, #4]
 8104ad6:	687b      	ldr	r3, [r7, #4]
 8104ad8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104ada:	687b      	ldr	r3, [r7, #4]
 8104adc:	697a      	ldr	r2, [r7, #20]
 8104ade:	621a      	str	r2, [r3, #32]
}
 8104ae0:	bf00      	nop
 8104ae2:	371c      	adds	r7, #28
 8104ae4:	46bd      	mov	sp, r7
 8104ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104aea:	4770      	bx	lr
 8104aec:	40010000 	.word	0x40010000
 8104af0:	40010400 	.word	0x40010400
 8104af4:	40014000 	.word	0x40014000
 8104af8:	40014400 	.word	0x40014400
 8104afc:	40014800 	.word	0x40014800

08104b00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8104b00:	b480      	push	{r7}
 8104b02:	b087      	sub	sp, #28
 8104b04:	af00      	add	r7, sp, #0
 8104b06:	6078      	str	r0, [r7, #4]
 8104b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8104b0a:	687b      	ldr	r3, [r7, #4]
 8104b0c:	6a1b      	ldr	r3, [r3, #32]
 8104b0e:	f023 0210 	bic.w	r2, r3, #16
 8104b12:	687b      	ldr	r3, [r7, #4]
 8104b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104b16:	687b      	ldr	r3, [r7, #4]
 8104b18:	6a1b      	ldr	r3, [r3, #32]
 8104b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104b1c:	687b      	ldr	r3, [r7, #4]
 8104b1e:	685b      	ldr	r3, [r3, #4]
 8104b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8104b22:	687b      	ldr	r3, [r7, #4]
 8104b24:	699b      	ldr	r3, [r3, #24]
 8104b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8104b28:	68fb      	ldr	r3, [r7, #12]
 8104b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8104b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8104b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8104b34:	68fb      	ldr	r3, [r7, #12]
 8104b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8104b3c:	683b      	ldr	r3, [r7, #0]
 8104b3e:	681b      	ldr	r3, [r3, #0]
 8104b40:	021b      	lsls	r3, r3, #8
 8104b42:	68fa      	ldr	r2, [r7, #12]
 8104b44:	4313      	orrs	r3, r2
 8104b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8104b48:	697b      	ldr	r3, [r7, #20]
 8104b4a:	f023 0320 	bic.w	r3, r3, #32
 8104b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8104b50:	683b      	ldr	r3, [r7, #0]
 8104b52:	689b      	ldr	r3, [r3, #8]
 8104b54:	011b      	lsls	r3, r3, #4
 8104b56:	697a      	ldr	r2, [r7, #20]
 8104b58:	4313      	orrs	r3, r2
 8104b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8104b5c:	687b      	ldr	r3, [r7, #4]
 8104b5e:	4a28      	ldr	r2, [pc, #160]	; (8104c00 <TIM_OC2_SetConfig+0x100>)
 8104b60:	4293      	cmp	r3, r2
 8104b62:	d003      	beq.n	8104b6c <TIM_OC2_SetConfig+0x6c>
 8104b64:	687b      	ldr	r3, [r7, #4]
 8104b66:	4a27      	ldr	r2, [pc, #156]	; (8104c04 <TIM_OC2_SetConfig+0x104>)
 8104b68:	4293      	cmp	r3, r2
 8104b6a:	d10d      	bne.n	8104b88 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8104b6c:	697b      	ldr	r3, [r7, #20]
 8104b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8104b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8104b74:	683b      	ldr	r3, [r7, #0]
 8104b76:	68db      	ldr	r3, [r3, #12]
 8104b78:	011b      	lsls	r3, r3, #4
 8104b7a:	697a      	ldr	r2, [r7, #20]
 8104b7c:	4313      	orrs	r3, r2
 8104b7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8104b80:	697b      	ldr	r3, [r7, #20]
 8104b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8104b86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104b88:	687b      	ldr	r3, [r7, #4]
 8104b8a:	4a1d      	ldr	r2, [pc, #116]	; (8104c00 <TIM_OC2_SetConfig+0x100>)
 8104b8c:	4293      	cmp	r3, r2
 8104b8e:	d00f      	beq.n	8104bb0 <TIM_OC2_SetConfig+0xb0>
 8104b90:	687b      	ldr	r3, [r7, #4]
 8104b92:	4a1c      	ldr	r2, [pc, #112]	; (8104c04 <TIM_OC2_SetConfig+0x104>)
 8104b94:	4293      	cmp	r3, r2
 8104b96:	d00b      	beq.n	8104bb0 <TIM_OC2_SetConfig+0xb0>
 8104b98:	687b      	ldr	r3, [r7, #4]
 8104b9a:	4a1b      	ldr	r2, [pc, #108]	; (8104c08 <TIM_OC2_SetConfig+0x108>)
 8104b9c:	4293      	cmp	r3, r2
 8104b9e:	d007      	beq.n	8104bb0 <TIM_OC2_SetConfig+0xb0>
 8104ba0:	687b      	ldr	r3, [r7, #4]
 8104ba2:	4a1a      	ldr	r2, [pc, #104]	; (8104c0c <TIM_OC2_SetConfig+0x10c>)
 8104ba4:	4293      	cmp	r3, r2
 8104ba6:	d003      	beq.n	8104bb0 <TIM_OC2_SetConfig+0xb0>
 8104ba8:	687b      	ldr	r3, [r7, #4]
 8104baa:	4a19      	ldr	r2, [pc, #100]	; (8104c10 <TIM_OC2_SetConfig+0x110>)
 8104bac:	4293      	cmp	r3, r2
 8104bae:	d113      	bne.n	8104bd8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8104bb0:	693b      	ldr	r3, [r7, #16]
 8104bb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8104bb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8104bb8:	693b      	ldr	r3, [r7, #16]
 8104bba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8104bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8104bc0:	683b      	ldr	r3, [r7, #0]
 8104bc2:	695b      	ldr	r3, [r3, #20]
 8104bc4:	009b      	lsls	r3, r3, #2
 8104bc6:	693a      	ldr	r2, [r7, #16]
 8104bc8:	4313      	orrs	r3, r2
 8104bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8104bcc:	683b      	ldr	r3, [r7, #0]
 8104bce:	699b      	ldr	r3, [r3, #24]
 8104bd0:	009b      	lsls	r3, r3, #2
 8104bd2:	693a      	ldr	r2, [r7, #16]
 8104bd4:	4313      	orrs	r3, r2
 8104bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104bd8:	687b      	ldr	r3, [r7, #4]
 8104bda:	693a      	ldr	r2, [r7, #16]
 8104bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8104bde:	687b      	ldr	r3, [r7, #4]
 8104be0:	68fa      	ldr	r2, [r7, #12]
 8104be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8104be4:	683b      	ldr	r3, [r7, #0]
 8104be6:	685a      	ldr	r2, [r3, #4]
 8104be8:	687b      	ldr	r3, [r7, #4]
 8104bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104bec:	687b      	ldr	r3, [r7, #4]
 8104bee:	697a      	ldr	r2, [r7, #20]
 8104bf0:	621a      	str	r2, [r3, #32]
}
 8104bf2:	bf00      	nop
 8104bf4:	371c      	adds	r7, #28
 8104bf6:	46bd      	mov	sp, r7
 8104bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bfc:	4770      	bx	lr
 8104bfe:	bf00      	nop
 8104c00:	40010000 	.word	0x40010000
 8104c04:	40010400 	.word	0x40010400
 8104c08:	40014000 	.word	0x40014000
 8104c0c:	40014400 	.word	0x40014400
 8104c10:	40014800 	.word	0x40014800

08104c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8104c14:	b480      	push	{r7}
 8104c16:	b087      	sub	sp, #28
 8104c18:	af00      	add	r7, sp, #0
 8104c1a:	6078      	str	r0, [r7, #4]
 8104c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8104c1e:	687b      	ldr	r3, [r7, #4]
 8104c20:	6a1b      	ldr	r3, [r3, #32]
 8104c22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104c2a:	687b      	ldr	r3, [r7, #4]
 8104c2c:	6a1b      	ldr	r3, [r3, #32]
 8104c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104c30:	687b      	ldr	r3, [r7, #4]
 8104c32:	685b      	ldr	r3, [r3, #4]
 8104c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8104c36:	687b      	ldr	r3, [r7, #4]
 8104c38:	69db      	ldr	r3, [r3, #28]
 8104c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8104c3c:	68fb      	ldr	r3, [r7, #12]
 8104c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8104c44:	68fb      	ldr	r3, [r7, #12]
 8104c46:	f023 0303 	bic.w	r3, r3, #3
 8104c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8104c4c:	683b      	ldr	r3, [r7, #0]
 8104c4e:	681b      	ldr	r3, [r3, #0]
 8104c50:	68fa      	ldr	r2, [r7, #12]
 8104c52:	4313      	orrs	r3, r2
 8104c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8104c56:	697b      	ldr	r3, [r7, #20]
 8104c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8104c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8104c5e:	683b      	ldr	r3, [r7, #0]
 8104c60:	689b      	ldr	r3, [r3, #8]
 8104c62:	021b      	lsls	r3, r3, #8
 8104c64:	697a      	ldr	r2, [r7, #20]
 8104c66:	4313      	orrs	r3, r2
 8104c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8104c6a:	687b      	ldr	r3, [r7, #4]
 8104c6c:	4a27      	ldr	r2, [pc, #156]	; (8104d0c <TIM_OC3_SetConfig+0xf8>)
 8104c6e:	4293      	cmp	r3, r2
 8104c70:	d003      	beq.n	8104c7a <TIM_OC3_SetConfig+0x66>
 8104c72:	687b      	ldr	r3, [r7, #4]
 8104c74:	4a26      	ldr	r2, [pc, #152]	; (8104d10 <TIM_OC3_SetConfig+0xfc>)
 8104c76:	4293      	cmp	r3, r2
 8104c78:	d10d      	bne.n	8104c96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8104c7a:	697b      	ldr	r3, [r7, #20]
 8104c7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8104c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8104c82:	683b      	ldr	r3, [r7, #0]
 8104c84:	68db      	ldr	r3, [r3, #12]
 8104c86:	021b      	lsls	r3, r3, #8
 8104c88:	697a      	ldr	r2, [r7, #20]
 8104c8a:	4313      	orrs	r3, r2
 8104c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8104c8e:	697b      	ldr	r3, [r7, #20]
 8104c90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8104c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104c96:	687b      	ldr	r3, [r7, #4]
 8104c98:	4a1c      	ldr	r2, [pc, #112]	; (8104d0c <TIM_OC3_SetConfig+0xf8>)
 8104c9a:	4293      	cmp	r3, r2
 8104c9c:	d00f      	beq.n	8104cbe <TIM_OC3_SetConfig+0xaa>
 8104c9e:	687b      	ldr	r3, [r7, #4]
 8104ca0:	4a1b      	ldr	r2, [pc, #108]	; (8104d10 <TIM_OC3_SetConfig+0xfc>)
 8104ca2:	4293      	cmp	r3, r2
 8104ca4:	d00b      	beq.n	8104cbe <TIM_OC3_SetConfig+0xaa>
 8104ca6:	687b      	ldr	r3, [r7, #4]
 8104ca8:	4a1a      	ldr	r2, [pc, #104]	; (8104d14 <TIM_OC3_SetConfig+0x100>)
 8104caa:	4293      	cmp	r3, r2
 8104cac:	d007      	beq.n	8104cbe <TIM_OC3_SetConfig+0xaa>
 8104cae:	687b      	ldr	r3, [r7, #4]
 8104cb0:	4a19      	ldr	r2, [pc, #100]	; (8104d18 <TIM_OC3_SetConfig+0x104>)
 8104cb2:	4293      	cmp	r3, r2
 8104cb4:	d003      	beq.n	8104cbe <TIM_OC3_SetConfig+0xaa>
 8104cb6:	687b      	ldr	r3, [r7, #4]
 8104cb8:	4a18      	ldr	r2, [pc, #96]	; (8104d1c <TIM_OC3_SetConfig+0x108>)
 8104cba:	4293      	cmp	r3, r2
 8104cbc:	d113      	bne.n	8104ce6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8104cbe:	693b      	ldr	r3, [r7, #16]
 8104cc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8104cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8104cc6:	693b      	ldr	r3, [r7, #16]
 8104cc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8104ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8104cce:	683b      	ldr	r3, [r7, #0]
 8104cd0:	695b      	ldr	r3, [r3, #20]
 8104cd2:	011b      	lsls	r3, r3, #4
 8104cd4:	693a      	ldr	r2, [r7, #16]
 8104cd6:	4313      	orrs	r3, r2
 8104cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8104cda:	683b      	ldr	r3, [r7, #0]
 8104cdc:	699b      	ldr	r3, [r3, #24]
 8104cde:	011b      	lsls	r3, r3, #4
 8104ce0:	693a      	ldr	r2, [r7, #16]
 8104ce2:	4313      	orrs	r3, r2
 8104ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104ce6:	687b      	ldr	r3, [r7, #4]
 8104ce8:	693a      	ldr	r2, [r7, #16]
 8104cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8104cec:	687b      	ldr	r3, [r7, #4]
 8104cee:	68fa      	ldr	r2, [r7, #12]
 8104cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8104cf2:	683b      	ldr	r3, [r7, #0]
 8104cf4:	685a      	ldr	r2, [r3, #4]
 8104cf6:	687b      	ldr	r3, [r7, #4]
 8104cf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104cfa:	687b      	ldr	r3, [r7, #4]
 8104cfc:	697a      	ldr	r2, [r7, #20]
 8104cfe:	621a      	str	r2, [r3, #32]
}
 8104d00:	bf00      	nop
 8104d02:	371c      	adds	r7, #28
 8104d04:	46bd      	mov	sp, r7
 8104d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d0a:	4770      	bx	lr
 8104d0c:	40010000 	.word	0x40010000
 8104d10:	40010400 	.word	0x40010400
 8104d14:	40014000 	.word	0x40014000
 8104d18:	40014400 	.word	0x40014400
 8104d1c:	40014800 	.word	0x40014800

08104d20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8104d20:	b480      	push	{r7}
 8104d22:	b087      	sub	sp, #28
 8104d24:	af00      	add	r7, sp, #0
 8104d26:	6078      	str	r0, [r7, #4]
 8104d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8104d2a:	687b      	ldr	r3, [r7, #4]
 8104d2c:	6a1b      	ldr	r3, [r3, #32]
 8104d2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8104d32:	687b      	ldr	r3, [r7, #4]
 8104d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104d36:	687b      	ldr	r3, [r7, #4]
 8104d38:	6a1b      	ldr	r3, [r3, #32]
 8104d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104d3c:	687b      	ldr	r3, [r7, #4]
 8104d3e:	685b      	ldr	r3, [r3, #4]
 8104d40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8104d42:	687b      	ldr	r3, [r7, #4]
 8104d44:	69db      	ldr	r3, [r3, #28]
 8104d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8104d48:	68fb      	ldr	r3, [r7, #12]
 8104d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8104d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8104d50:	68fb      	ldr	r3, [r7, #12]
 8104d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8104d58:	683b      	ldr	r3, [r7, #0]
 8104d5a:	681b      	ldr	r3, [r3, #0]
 8104d5c:	021b      	lsls	r3, r3, #8
 8104d5e:	68fa      	ldr	r2, [r7, #12]
 8104d60:	4313      	orrs	r3, r2
 8104d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8104d64:	693b      	ldr	r3, [r7, #16]
 8104d66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8104d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8104d6c:	683b      	ldr	r3, [r7, #0]
 8104d6e:	689b      	ldr	r3, [r3, #8]
 8104d70:	031b      	lsls	r3, r3, #12
 8104d72:	693a      	ldr	r2, [r7, #16]
 8104d74:	4313      	orrs	r3, r2
 8104d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104d78:	687b      	ldr	r3, [r7, #4]
 8104d7a:	4a18      	ldr	r2, [pc, #96]	; (8104ddc <TIM_OC4_SetConfig+0xbc>)
 8104d7c:	4293      	cmp	r3, r2
 8104d7e:	d00f      	beq.n	8104da0 <TIM_OC4_SetConfig+0x80>
 8104d80:	687b      	ldr	r3, [r7, #4]
 8104d82:	4a17      	ldr	r2, [pc, #92]	; (8104de0 <TIM_OC4_SetConfig+0xc0>)
 8104d84:	4293      	cmp	r3, r2
 8104d86:	d00b      	beq.n	8104da0 <TIM_OC4_SetConfig+0x80>
 8104d88:	687b      	ldr	r3, [r7, #4]
 8104d8a:	4a16      	ldr	r2, [pc, #88]	; (8104de4 <TIM_OC4_SetConfig+0xc4>)
 8104d8c:	4293      	cmp	r3, r2
 8104d8e:	d007      	beq.n	8104da0 <TIM_OC4_SetConfig+0x80>
 8104d90:	687b      	ldr	r3, [r7, #4]
 8104d92:	4a15      	ldr	r2, [pc, #84]	; (8104de8 <TIM_OC4_SetConfig+0xc8>)
 8104d94:	4293      	cmp	r3, r2
 8104d96:	d003      	beq.n	8104da0 <TIM_OC4_SetConfig+0x80>
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	4a14      	ldr	r2, [pc, #80]	; (8104dec <TIM_OC4_SetConfig+0xcc>)
 8104d9c:	4293      	cmp	r3, r2
 8104d9e:	d109      	bne.n	8104db4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8104da0:	697b      	ldr	r3, [r7, #20]
 8104da2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8104da6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8104da8:	683b      	ldr	r3, [r7, #0]
 8104daa:	695b      	ldr	r3, [r3, #20]
 8104dac:	019b      	lsls	r3, r3, #6
 8104dae:	697a      	ldr	r2, [r7, #20]
 8104db0:	4313      	orrs	r3, r2
 8104db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104db4:	687b      	ldr	r3, [r7, #4]
 8104db6:	697a      	ldr	r2, [r7, #20]
 8104db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8104dba:	687b      	ldr	r3, [r7, #4]
 8104dbc:	68fa      	ldr	r2, [r7, #12]
 8104dbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8104dc0:	683b      	ldr	r3, [r7, #0]
 8104dc2:	685a      	ldr	r2, [r3, #4]
 8104dc4:	687b      	ldr	r3, [r7, #4]
 8104dc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104dc8:	687b      	ldr	r3, [r7, #4]
 8104dca:	693a      	ldr	r2, [r7, #16]
 8104dcc:	621a      	str	r2, [r3, #32]
}
 8104dce:	bf00      	nop
 8104dd0:	371c      	adds	r7, #28
 8104dd2:	46bd      	mov	sp, r7
 8104dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dd8:	4770      	bx	lr
 8104dda:	bf00      	nop
 8104ddc:	40010000 	.word	0x40010000
 8104de0:	40010400 	.word	0x40010400
 8104de4:	40014000 	.word	0x40014000
 8104de8:	40014400 	.word	0x40014400
 8104dec:	40014800 	.word	0x40014800

08104df0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8104df0:	b480      	push	{r7}
 8104df2:	b087      	sub	sp, #28
 8104df4:	af00      	add	r7, sp, #0
 8104df6:	6078      	str	r0, [r7, #4]
 8104df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8104dfa:	687b      	ldr	r3, [r7, #4]
 8104dfc:	6a1b      	ldr	r3, [r3, #32]
 8104dfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8104e02:	687b      	ldr	r3, [r7, #4]
 8104e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104e06:	687b      	ldr	r3, [r7, #4]
 8104e08:	6a1b      	ldr	r3, [r3, #32]
 8104e0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104e0c:	687b      	ldr	r3, [r7, #4]
 8104e0e:	685b      	ldr	r3, [r3, #4]
 8104e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8104e12:	687b      	ldr	r3, [r7, #4]
 8104e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8104e18:	68fb      	ldr	r3, [r7, #12]
 8104e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8104e20:	683b      	ldr	r3, [r7, #0]
 8104e22:	681b      	ldr	r3, [r3, #0]
 8104e24:	68fa      	ldr	r2, [r7, #12]
 8104e26:	4313      	orrs	r3, r2
 8104e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8104e2a:	693b      	ldr	r3, [r7, #16]
 8104e2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8104e30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8104e32:	683b      	ldr	r3, [r7, #0]
 8104e34:	689b      	ldr	r3, [r3, #8]
 8104e36:	041b      	lsls	r3, r3, #16
 8104e38:	693a      	ldr	r2, [r7, #16]
 8104e3a:	4313      	orrs	r3, r2
 8104e3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104e3e:	687b      	ldr	r3, [r7, #4]
 8104e40:	4a17      	ldr	r2, [pc, #92]	; (8104ea0 <TIM_OC5_SetConfig+0xb0>)
 8104e42:	4293      	cmp	r3, r2
 8104e44:	d00f      	beq.n	8104e66 <TIM_OC5_SetConfig+0x76>
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	4a16      	ldr	r2, [pc, #88]	; (8104ea4 <TIM_OC5_SetConfig+0xb4>)
 8104e4a:	4293      	cmp	r3, r2
 8104e4c:	d00b      	beq.n	8104e66 <TIM_OC5_SetConfig+0x76>
 8104e4e:	687b      	ldr	r3, [r7, #4]
 8104e50:	4a15      	ldr	r2, [pc, #84]	; (8104ea8 <TIM_OC5_SetConfig+0xb8>)
 8104e52:	4293      	cmp	r3, r2
 8104e54:	d007      	beq.n	8104e66 <TIM_OC5_SetConfig+0x76>
 8104e56:	687b      	ldr	r3, [r7, #4]
 8104e58:	4a14      	ldr	r2, [pc, #80]	; (8104eac <TIM_OC5_SetConfig+0xbc>)
 8104e5a:	4293      	cmp	r3, r2
 8104e5c:	d003      	beq.n	8104e66 <TIM_OC5_SetConfig+0x76>
 8104e5e:	687b      	ldr	r3, [r7, #4]
 8104e60:	4a13      	ldr	r2, [pc, #76]	; (8104eb0 <TIM_OC5_SetConfig+0xc0>)
 8104e62:	4293      	cmp	r3, r2
 8104e64:	d109      	bne.n	8104e7a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8104e66:	697b      	ldr	r3, [r7, #20]
 8104e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8104e6e:	683b      	ldr	r3, [r7, #0]
 8104e70:	695b      	ldr	r3, [r3, #20]
 8104e72:	021b      	lsls	r3, r3, #8
 8104e74:	697a      	ldr	r2, [r7, #20]
 8104e76:	4313      	orrs	r3, r2
 8104e78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	697a      	ldr	r2, [r7, #20]
 8104e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8104e80:	687b      	ldr	r3, [r7, #4]
 8104e82:	68fa      	ldr	r2, [r7, #12]
 8104e84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8104e86:	683b      	ldr	r3, [r7, #0]
 8104e88:	685a      	ldr	r2, [r3, #4]
 8104e8a:	687b      	ldr	r3, [r7, #4]
 8104e8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104e8e:	687b      	ldr	r3, [r7, #4]
 8104e90:	693a      	ldr	r2, [r7, #16]
 8104e92:	621a      	str	r2, [r3, #32]
}
 8104e94:	bf00      	nop
 8104e96:	371c      	adds	r7, #28
 8104e98:	46bd      	mov	sp, r7
 8104e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e9e:	4770      	bx	lr
 8104ea0:	40010000 	.word	0x40010000
 8104ea4:	40010400 	.word	0x40010400
 8104ea8:	40014000 	.word	0x40014000
 8104eac:	40014400 	.word	0x40014400
 8104eb0:	40014800 	.word	0x40014800

08104eb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8104eb4:	b480      	push	{r7}
 8104eb6:	b087      	sub	sp, #28
 8104eb8:	af00      	add	r7, sp, #0
 8104eba:	6078      	str	r0, [r7, #4]
 8104ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8104ebe:	687b      	ldr	r3, [r7, #4]
 8104ec0:	6a1b      	ldr	r3, [r3, #32]
 8104ec2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8104ec6:	687b      	ldr	r3, [r7, #4]
 8104ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104eca:	687b      	ldr	r3, [r7, #4]
 8104ecc:	6a1b      	ldr	r3, [r3, #32]
 8104ece:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104ed0:	687b      	ldr	r3, [r7, #4]
 8104ed2:	685b      	ldr	r3, [r3, #4]
 8104ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8104edc:	68fb      	ldr	r3, [r7, #12]
 8104ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8104ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8104ee4:	683b      	ldr	r3, [r7, #0]
 8104ee6:	681b      	ldr	r3, [r3, #0]
 8104ee8:	021b      	lsls	r3, r3, #8
 8104eea:	68fa      	ldr	r2, [r7, #12]
 8104eec:	4313      	orrs	r3, r2
 8104eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8104ef0:	693b      	ldr	r3, [r7, #16]
 8104ef2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8104ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8104ef8:	683b      	ldr	r3, [r7, #0]
 8104efa:	689b      	ldr	r3, [r3, #8]
 8104efc:	051b      	lsls	r3, r3, #20
 8104efe:	693a      	ldr	r2, [r7, #16]
 8104f00:	4313      	orrs	r3, r2
 8104f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104f04:	687b      	ldr	r3, [r7, #4]
 8104f06:	4a18      	ldr	r2, [pc, #96]	; (8104f68 <TIM_OC6_SetConfig+0xb4>)
 8104f08:	4293      	cmp	r3, r2
 8104f0a:	d00f      	beq.n	8104f2c <TIM_OC6_SetConfig+0x78>
 8104f0c:	687b      	ldr	r3, [r7, #4]
 8104f0e:	4a17      	ldr	r2, [pc, #92]	; (8104f6c <TIM_OC6_SetConfig+0xb8>)
 8104f10:	4293      	cmp	r3, r2
 8104f12:	d00b      	beq.n	8104f2c <TIM_OC6_SetConfig+0x78>
 8104f14:	687b      	ldr	r3, [r7, #4]
 8104f16:	4a16      	ldr	r2, [pc, #88]	; (8104f70 <TIM_OC6_SetConfig+0xbc>)
 8104f18:	4293      	cmp	r3, r2
 8104f1a:	d007      	beq.n	8104f2c <TIM_OC6_SetConfig+0x78>
 8104f1c:	687b      	ldr	r3, [r7, #4]
 8104f1e:	4a15      	ldr	r2, [pc, #84]	; (8104f74 <TIM_OC6_SetConfig+0xc0>)
 8104f20:	4293      	cmp	r3, r2
 8104f22:	d003      	beq.n	8104f2c <TIM_OC6_SetConfig+0x78>
 8104f24:	687b      	ldr	r3, [r7, #4]
 8104f26:	4a14      	ldr	r2, [pc, #80]	; (8104f78 <TIM_OC6_SetConfig+0xc4>)
 8104f28:	4293      	cmp	r3, r2
 8104f2a:	d109      	bne.n	8104f40 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8104f2c:	697b      	ldr	r3, [r7, #20]
 8104f2e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8104f32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8104f34:	683b      	ldr	r3, [r7, #0]
 8104f36:	695b      	ldr	r3, [r3, #20]
 8104f38:	029b      	lsls	r3, r3, #10
 8104f3a:	697a      	ldr	r2, [r7, #20]
 8104f3c:	4313      	orrs	r3, r2
 8104f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104f40:	687b      	ldr	r3, [r7, #4]
 8104f42:	697a      	ldr	r2, [r7, #20]
 8104f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8104f46:	687b      	ldr	r3, [r7, #4]
 8104f48:	68fa      	ldr	r2, [r7, #12]
 8104f4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8104f4c:	683b      	ldr	r3, [r7, #0]
 8104f4e:	685a      	ldr	r2, [r3, #4]
 8104f50:	687b      	ldr	r3, [r7, #4]
 8104f52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104f54:	687b      	ldr	r3, [r7, #4]
 8104f56:	693a      	ldr	r2, [r7, #16]
 8104f58:	621a      	str	r2, [r3, #32]
}
 8104f5a:	bf00      	nop
 8104f5c:	371c      	adds	r7, #28
 8104f5e:	46bd      	mov	sp, r7
 8104f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f64:	4770      	bx	lr
 8104f66:	bf00      	nop
 8104f68:	40010000 	.word	0x40010000
 8104f6c:	40010400 	.word	0x40010400
 8104f70:	40014000 	.word	0x40014000
 8104f74:	40014400 	.word	0x40014400
 8104f78:	40014800 	.word	0x40014800

08104f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8104f7c:	b480      	push	{r7}
 8104f7e:	b087      	sub	sp, #28
 8104f80:	af00      	add	r7, sp, #0
 8104f82:	60f8      	str	r0, [r7, #12]
 8104f84:	60b9      	str	r1, [r7, #8]
 8104f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8104f88:	68fb      	ldr	r3, [r7, #12]
 8104f8a:	6a1b      	ldr	r3, [r3, #32]
 8104f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8104f8e:	68fb      	ldr	r3, [r7, #12]
 8104f90:	6a1b      	ldr	r3, [r3, #32]
 8104f92:	f023 0201 	bic.w	r2, r3, #1
 8104f96:	68fb      	ldr	r3, [r7, #12]
 8104f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8104f9a:	68fb      	ldr	r3, [r7, #12]
 8104f9c:	699b      	ldr	r3, [r3, #24]
 8104f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8104fa0:	693b      	ldr	r3, [r7, #16]
 8104fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8104fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8104fa8:	687b      	ldr	r3, [r7, #4]
 8104faa:	011b      	lsls	r3, r3, #4
 8104fac:	693a      	ldr	r2, [r7, #16]
 8104fae:	4313      	orrs	r3, r2
 8104fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8104fb2:	697b      	ldr	r3, [r7, #20]
 8104fb4:	f023 030a 	bic.w	r3, r3, #10
 8104fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8104fba:	697a      	ldr	r2, [r7, #20]
 8104fbc:	68bb      	ldr	r3, [r7, #8]
 8104fbe:	4313      	orrs	r3, r2
 8104fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8104fc2:	68fb      	ldr	r3, [r7, #12]
 8104fc4:	693a      	ldr	r2, [r7, #16]
 8104fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8104fc8:	68fb      	ldr	r3, [r7, #12]
 8104fca:	697a      	ldr	r2, [r7, #20]
 8104fcc:	621a      	str	r2, [r3, #32]
}
 8104fce:	bf00      	nop
 8104fd0:	371c      	adds	r7, #28
 8104fd2:	46bd      	mov	sp, r7
 8104fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fd8:	4770      	bx	lr

08104fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8104fda:	b480      	push	{r7}
 8104fdc:	b087      	sub	sp, #28
 8104fde:	af00      	add	r7, sp, #0
 8104fe0:	60f8      	str	r0, [r7, #12]
 8104fe2:	60b9      	str	r1, [r7, #8]
 8104fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8104fe6:	68fb      	ldr	r3, [r7, #12]
 8104fe8:	6a1b      	ldr	r3, [r3, #32]
 8104fea:	f023 0210 	bic.w	r2, r3, #16
 8104fee:	68fb      	ldr	r3, [r7, #12]
 8104ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8104ff2:	68fb      	ldr	r3, [r7, #12]
 8104ff4:	699b      	ldr	r3, [r3, #24]
 8104ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8104ff8:	68fb      	ldr	r3, [r7, #12]
 8104ffa:	6a1b      	ldr	r3, [r3, #32]
 8104ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8104ffe:	697b      	ldr	r3, [r7, #20]
 8105000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8105004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8105006:	687b      	ldr	r3, [r7, #4]
 8105008:	031b      	lsls	r3, r3, #12
 810500a:	697a      	ldr	r2, [r7, #20]
 810500c:	4313      	orrs	r3, r2
 810500e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8105010:	693b      	ldr	r3, [r7, #16]
 8105012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8105016:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8105018:	68bb      	ldr	r3, [r7, #8]
 810501a:	011b      	lsls	r3, r3, #4
 810501c:	693a      	ldr	r2, [r7, #16]
 810501e:	4313      	orrs	r3, r2
 8105020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8105022:	68fb      	ldr	r3, [r7, #12]
 8105024:	697a      	ldr	r2, [r7, #20]
 8105026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8105028:	68fb      	ldr	r3, [r7, #12]
 810502a:	693a      	ldr	r2, [r7, #16]
 810502c:	621a      	str	r2, [r3, #32]
}
 810502e:	bf00      	nop
 8105030:	371c      	adds	r7, #28
 8105032:	46bd      	mov	sp, r7
 8105034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105038:	4770      	bx	lr

0810503a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810503a:	b480      	push	{r7}
 810503c:	b085      	sub	sp, #20
 810503e:	af00      	add	r7, sp, #0
 8105040:	6078      	str	r0, [r7, #4]
 8105042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8105044:	687b      	ldr	r3, [r7, #4]
 8105046:	689b      	ldr	r3, [r3, #8]
 8105048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810504a:	68fb      	ldr	r3, [r7, #12]
 810504c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8105050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8105056:	683a      	ldr	r2, [r7, #0]
 8105058:	68fb      	ldr	r3, [r7, #12]
 810505a:	4313      	orrs	r3, r2
 810505c:	f043 0307 	orr.w	r3, r3, #7
 8105060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8105062:	687b      	ldr	r3, [r7, #4]
 8105064:	68fa      	ldr	r2, [r7, #12]
 8105066:	609a      	str	r2, [r3, #8]
}
 8105068:	bf00      	nop
 810506a:	3714      	adds	r7, #20
 810506c:	46bd      	mov	sp, r7
 810506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105072:	4770      	bx	lr

08105074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8105074:	b480      	push	{r7}
 8105076:	b087      	sub	sp, #28
 8105078:	af00      	add	r7, sp, #0
 810507a:	60f8      	str	r0, [r7, #12]
 810507c:	60b9      	str	r1, [r7, #8]
 810507e:	607a      	str	r2, [r7, #4]
 8105080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8105082:	68fb      	ldr	r3, [r7, #12]
 8105084:	689b      	ldr	r3, [r3, #8]
 8105086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105088:	697b      	ldr	r3, [r7, #20]
 810508a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810508e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8105090:	683b      	ldr	r3, [r7, #0]
 8105092:	021a      	lsls	r2, r3, #8
 8105094:	687b      	ldr	r3, [r7, #4]
 8105096:	431a      	orrs	r2, r3
 8105098:	68bb      	ldr	r3, [r7, #8]
 810509a:	4313      	orrs	r3, r2
 810509c:	697a      	ldr	r2, [r7, #20]
 810509e:	4313      	orrs	r3, r2
 81050a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81050a2:	68fb      	ldr	r3, [r7, #12]
 81050a4:	697a      	ldr	r2, [r7, #20]
 81050a6:	609a      	str	r2, [r3, #8]
}
 81050a8:	bf00      	nop
 81050aa:	371c      	adds	r7, #28
 81050ac:	46bd      	mov	sp, r7
 81050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050b2:	4770      	bx	lr

081050b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81050b4:	b480      	push	{r7}
 81050b6:	b087      	sub	sp, #28
 81050b8:	af00      	add	r7, sp, #0
 81050ba:	60f8      	str	r0, [r7, #12]
 81050bc:	60b9      	str	r1, [r7, #8]
 81050be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 81050c0:	68bb      	ldr	r3, [r7, #8]
 81050c2:	f003 031f 	and.w	r3, r3, #31
 81050c6:	2201      	movs	r2, #1
 81050c8:	fa02 f303 	lsl.w	r3, r2, r3
 81050cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 81050ce:	68fb      	ldr	r3, [r7, #12]
 81050d0:	6a1a      	ldr	r2, [r3, #32]
 81050d2:	697b      	ldr	r3, [r7, #20]
 81050d4:	43db      	mvns	r3, r3
 81050d6:	401a      	ands	r2, r3
 81050d8:	68fb      	ldr	r3, [r7, #12]
 81050da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 81050dc:	68fb      	ldr	r3, [r7, #12]
 81050de:	6a1a      	ldr	r2, [r3, #32]
 81050e0:	68bb      	ldr	r3, [r7, #8]
 81050e2:	f003 031f 	and.w	r3, r3, #31
 81050e6:	6879      	ldr	r1, [r7, #4]
 81050e8:	fa01 f303 	lsl.w	r3, r1, r3
 81050ec:	431a      	orrs	r2, r3
 81050ee:	68fb      	ldr	r3, [r7, #12]
 81050f0:	621a      	str	r2, [r3, #32]
}
 81050f2:	bf00      	nop
 81050f4:	371c      	adds	r7, #28
 81050f6:	46bd      	mov	sp, r7
 81050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050fc:	4770      	bx	lr
	...

08105100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8105100:	b480      	push	{r7}
 8105102:	b085      	sub	sp, #20
 8105104:	af00      	add	r7, sp, #0
 8105106:	6078      	str	r0, [r7, #4]
 8105108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810510a:	687b      	ldr	r3, [r7, #4]
 810510c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8105110:	2b01      	cmp	r3, #1
 8105112:	d101      	bne.n	8105118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8105114:	2302      	movs	r3, #2
 8105116:	e068      	b.n	81051ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8105118:	687b      	ldr	r3, [r7, #4]
 810511a:	2201      	movs	r2, #1
 810511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105120:	687b      	ldr	r3, [r7, #4]
 8105122:	2202      	movs	r2, #2
 8105124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8105128:	687b      	ldr	r3, [r7, #4]
 810512a:	681b      	ldr	r3, [r3, #0]
 810512c:	685b      	ldr	r3, [r3, #4]
 810512e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8105130:	687b      	ldr	r3, [r7, #4]
 8105132:	681b      	ldr	r3, [r3, #0]
 8105134:	689b      	ldr	r3, [r3, #8]
 8105136:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8105138:	687b      	ldr	r3, [r7, #4]
 810513a:	681b      	ldr	r3, [r3, #0]
 810513c:	4a2e      	ldr	r2, [pc, #184]	; (81051f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 810513e:	4293      	cmp	r3, r2
 8105140:	d004      	beq.n	810514c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8105142:	687b      	ldr	r3, [r7, #4]
 8105144:	681b      	ldr	r3, [r3, #0]
 8105146:	4a2d      	ldr	r2, [pc, #180]	; (81051fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8105148:	4293      	cmp	r3, r2
 810514a:	d108      	bne.n	810515e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810514c:	68fb      	ldr	r3, [r7, #12]
 810514e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8105152:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8105154:	683b      	ldr	r3, [r7, #0]
 8105156:	685b      	ldr	r3, [r3, #4]
 8105158:	68fa      	ldr	r2, [r7, #12]
 810515a:	4313      	orrs	r3, r2
 810515c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810515e:	68fb      	ldr	r3, [r7, #12]
 8105160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105164:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8105166:	683b      	ldr	r3, [r7, #0]
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	68fa      	ldr	r2, [r7, #12]
 810516c:	4313      	orrs	r3, r2
 810516e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	681b      	ldr	r3, [r3, #0]
 8105174:	68fa      	ldr	r2, [r7, #12]
 8105176:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105178:	687b      	ldr	r3, [r7, #4]
 810517a:	681b      	ldr	r3, [r3, #0]
 810517c:	4a1e      	ldr	r2, [pc, #120]	; (81051f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 810517e:	4293      	cmp	r3, r2
 8105180:	d01d      	beq.n	81051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8105182:	687b      	ldr	r3, [r7, #4]
 8105184:	681b      	ldr	r3, [r3, #0]
 8105186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810518a:	d018      	beq.n	81051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810518c:	687b      	ldr	r3, [r7, #4]
 810518e:	681b      	ldr	r3, [r3, #0]
 8105190:	4a1b      	ldr	r2, [pc, #108]	; (8105200 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8105192:	4293      	cmp	r3, r2
 8105194:	d013      	beq.n	81051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8105196:	687b      	ldr	r3, [r7, #4]
 8105198:	681b      	ldr	r3, [r3, #0]
 810519a:	4a1a      	ldr	r2, [pc, #104]	; (8105204 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810519c:	4293      	cmp	r3, r2
 810519e:	d00e      	beq.n	81051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	681b      	ldr	r3, [r3, #0]
 81051a4:	4a18      	ldr	r2, [pc, #96]	; (8105208 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81051a6:	4293      	cmp	r3, r2
 81051a8:	d009      	beq.n	81051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 81051aa:	687b      	ldr	r3, [r7, #4]
 81051ac:	681b      	ldr	r3, [r3, #0]
 81051ae:	4a13      	ldr	r2, [pc, #76]	; (81051fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 81051b0:	4293      	cmp	r3, r2
 81051b2:	d004      	beq.n	81051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	681b      	ldr	r3, [r3, #0]
 81051b8:	4a14      	ldr	r2, [pc, #80]	; (810520c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81051ba:	4293      	cmp	r3, r2
 81051bc:	d10c      	bne.n	81051d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 81051be:	68bb      	ldr	r3, [r7, #8]
 81051c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81051c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 81051c6:	683b      	ldr	r3, [r7, #0]
 81051c8:	689b      	ldr	r3, [r3, #8]
 81051ca:	68ba      	ldr	r2, [r7, #8]
 81051cc:	4313      	orrs	r3, r2
 81051ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 81051d0:	687b      	ldr	r3, [r7, #4]
 81051d2:	681b      	ldr	r3, [r3, #0]
 81051d4:	68ba      	ldr	r2, [r7, #8]
 81051d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 81051d8:	687b      	ldr	r3, [r7, #4]
 81051da:	2201      	movs	r2, #1
 81051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	2200      	movs	r2, #0
 81051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81051e8:	2300      	movs	r3, #0
}
 81051ea:	4618      	mov	r0, r3
 81051ec:	3714      	adds	r7, #20
 81051ee:	46bd      	mov	sp, r7
 81051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051f4:	4770      	bx	lr
 81051f6:	bf00      	nop
 81051f8:	40010000 	.word	0x40010000
 81051fc:	40010400 	.word	0x40010400
 8105200:	40000400 	.word	0x40000400
 8105204:	40000800 	.word	0x40000800
 8105208:	40000c00 	.word	0x40000c00
 810520c:	40001800 	.word	0x40001800

08105210 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8105210:	b480      	push	{r7}
 8105212:	b085      	sub	sp, #20
 8105214:	af00      	add	r7, sp, #0
 8105216:	6078      	str	r0, [r7, #4]
 8105218:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810521a:	2300      	movs	r3, #0
 810521c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 810521e:	687b      	ldr	r3, [r7, #4]
 8105220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8105224:	2b01      	cmp	r3, #1
 8105226:	d101      	bne.n	810522c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8105228:	2302      	movs	r3, #2
 810522a:	e065      	b.n	81052f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810522c:	687b      	ldr	r3, [r7, #4]
 810522e:	2201      	movs	r2, #1
 8105230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8105234:	68fb      	ldr	r3, [r7, #12]
 8105236:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810523a:	683b      	ldr	r3, [r7, #0]
 810523c:	68db      	ldr	r3, [r3, #12]
 810523e:	4313      	orrs	r3, r2
 8105240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8105242:	68fb      	ldr	r3, [r7, #12]
 8105244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8105248:	683b      	ldr	r3, [r7, #0]
 810524a:	689b      	ldr	r3, [r3, #8]
 810524c:	4313      	orrs	r3, r2
 810524e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8105250:	68fb      	ldr	r3, [r7, #12]
 8105252:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8105256:	683b      	ldr	r3, [r7, #0]
 8105258:	685b      	ldr	r3, [r3, #4]
 810525a:	4313      	orrs	r3, r2
 810525c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810525e:	68fb      	ldr	r3, [r7, #12]
 8105260:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8105264:	683b      	ldr	r3, [r7, #0]
 8105266:	681b      	ldr	r3, [r3, #0]
 8105268:	4313      	orrs	r3, r2
 810526a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810526c:	68fb      	ldr	r3, [r7, #12]
 810526e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8105272:	683b      	ldr	r3, [r7, #0]
 8105274:	691b      	ldr	r3, [r3, #16]
 8105276:	4313      	orrs	r3, r2
 8105278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810527a:	68fb      	ldr	r3, [r7, #12]
 810527c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8105280:	683b      	ldr	r3, [r7, #0]
 8105282:	695b      	ldr	r3, [r3, #20]
 8105284:	4313      	orrs	r3, r2
 8105286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8105288:	68fb      	ldr	r3, [r7, #12]
 810528a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810528e:	683b      	ldr	r3, [r7, #0]
 8105290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105292:	4313      	orrs	r3, r2
 8105294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8105296:	68fb      	ldr	r3, [r7, #12]
 8105298:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 810529c:	683b      	ldr	r3, [r7, #0]
 810529e:	699b      	ldr	r3, [r3, #24]
 81052a0:	041b      	lsls	r3, r3, #16
 81052a2:	4313      	orrs	r3, r2
 81052a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 81052a6:	687b      	ldr	r3, [r7, #4]
 81052a8:	681b      	ldr	r3, [r3, #0]
 81052aa:	4a16      	ldr	r2, [pc, #88]	; (8105304 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 81052ac:	4293      	cmp	r3, r2
 81052ae:	d004      	beq.n	81052ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 81052b0:	687b      	ldr	r3, [r7, #4]
 81052b2:	681b      	ldr	r3, [r3, #0]
 81052b4:	4a14      	ldr	r2, [pc, #80]	; (8105308 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 81052b6:	4293      	cmp	r3, r2
 81052b8:	d115      	bne.n	81052e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 81052ba:	68fb      	ldr	r3, [r7, #12]
 81052bc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 81052c0:	683b      	ldr	r3, [r7, #0]
 81052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81052c4:	051b      	lsls	r3, r3, #20
 81052c6:	4313      	orrs	r3, r2
 81052c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 81052ca:	68fb      	ldr	r3, [r7, #12]
 81052cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81052d0:	683b      	ldr	r3, [r7, #0]
 81052d2:	69db      	ldr	r3, [r3, #28]
 81052d4:	4313      	orrs	r3, r2
 81052d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 81052d8:	68fb      	ldr	r3, [r7, #12]
 81052da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 81052de:	683b      	ldr	r3, [r7, #0]
 81052e0:	6a1b      	ldr	r3, [r3, #32]
 81052e2:	4313      	orrs	r3, r2
 81052e4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 81052e6:	687b      	ldr	r3, [r7, #4]
 81052e8:	681b      	ldr	r3, [r3, #0]
 81052ea:	68fa      	ldr	r2, [r7, #12]
 81052ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 81052ee:	687b      	ldr	r3, [r7, #4]
 81052f0:	2200      	movs	r2, #0
 81052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81052f6:	2300      	movs	r3, #0
}
 81052f8:	4618      	mov	r0, r3
 81052fa:	3714      	adds	r7, #20
 81052fc:	46bd      	mov	sp, r7
 81052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105302:	4770      	bx	lr
 8105304:	40010000 	.word	0x40010000
 8105308:	40010400 	.word	0x40010400

0810530c <__libc_init_array>:
 810530c:	b570      	push	{r4, r5, r6, lr}
 810530e:	4d0d      	ldr	r5, [pc, #52]	; (8105344 <__libc_init_array+0x38>)
 8105310:	4c0d      	ldr	r4, [pc, #52]	; (8105348 <__libc_init_array+0x3c>)
 8105312:	1b64      	subs	r4, r4, r5
 8105314:	10a4      	asrs	r4, r4, #2
 8105316:	2600      	movs	r6, #0
 8105318:	42a6      	cmp	r6, r4
 810531a:	d109      	bne.n	8105330 <__libc_init_array+0x24>
 810531c:	4d0b      	ldr	r5, [pc, #44]	; (810534c <__libc_init_array+0x40>)
 810531e:	4c0c      	ldr	r4, [pc, #48]	; (8105350 <__libc_init_array+0x44>)
 8105320:	f000 f820 	bl	8105364 <_init>
 8105324:	1b64      	subs	r4, r4, r5
 8105326:	10a4      	asrs	r4, r4, #2
 8105328:	2600      	movs	r6, #0
 810532a:	42a6      	cmp	r6, r4
 810532c:	d105      	bne.n	810533a <__libc_init_array+0x2e>
 810532e:	bd70      	pop	{r4, r5, r6, pc}
 8105330:	f855 3b04 	ldr.w	r3, [r5], #4
 8105334:	4798      	blx	r3
 8105336:	3601      	adds	r6, #1
 8105338:	e7ee      	b.n	8105318 <__libc_init_array+0xc>
 810533a:	f855 3b04 	ldr.w	r3, [r5], #4
 810533e:	4798      	blx	r3
 8105340:	3601      	adds	r6, #1
 8105342:	e7f2      	b.n	810532a <__libc_init_array+0x1e>
 8105344:	08105394 	.word	0x08105394
 8105348:	08105394 	.word	0x08105394
 810534c:	08105394 	.word	0x08105394
 8105350:	08105398 	.word	0x08105398

08105354 <memset>:
 8105354:	4402      	add	r2, r0
 8105356:	4603      	mov	r3, r0
 8105358:	4293      	cmp	r3, r2
 810535a:	d100      	bne.n	810535e <memset+0xa>
 810535c:	4770      	bx	lr
 810535e:	f803 1b01 	strb.w	r1, [r3], #1
 8105362:	e7f9      	b.n	8105358 <memset+0x4>

08105364 <_init>:
 8105364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105366:	bf00      	nop
 8105368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810536a:	bc08      	pop	{r3}
 810536c:	469e      	mov	lr, r3
 810536e:	4770      	bx	lr

08105370 <_fini>:
 8105370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105372:	bf00      	nop
 8105374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8105376:	bc08      	pop	{r3}
 8105378:	469e      	mov	lr, r3
 810537a:	4770      	bx	lr
