
Neopixel_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c1c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eec  08005eec  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08005eec  08005eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ef4  08005ef4  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef4  08005ef4  00015ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08005efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08005f0c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08005f6c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000057c  240000d0  08005fcc  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400064c  08005fcc  0002064c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002058d  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000332b  00000000  00000000  0004068b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ff8  00000000  00000000  000439b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000f10  00000000  00000000  000449b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a474  00000000  00000000  000458c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001296c  00000000  00000000  0007fd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001809f6  00000000  00000000  000926a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00213096  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004378  00000000  00000000  002130ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005e9c 	.word	0x08005e9c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08005e9c 	.word	0x08005e9c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000710:	bf00      	nop
 8000712:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <main+0xa0>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d004      	beq.n	8000728 <main+0x24>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	dcf4      	bgt.n	8000712 <main+0xe>
  if ( timeout < 0 )
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	da01      	bge.n	8000732 <main+0x2e>
  {
  Error_Handler();
 800072e:	f000 fa0b 	bl	8000b48 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fc4b 	bl	8000fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f837 	bl	80007a8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <main+0xa0>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <main+0xa0>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <main+0xa0>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000758:	2000      	movs	r0, #0
 800075a:	f001 fbb7 	bl	8001ecc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f001 fbcd 	bl	8001f00 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800076c:	bf00      	nop
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <main+0xa0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d104      	bne.n	8000784 <main+0x80>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dcf4      	bgt.n	800076e <main+0x6a>
if ( timeout < 0 )
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	da01      	bge.n	800078e <main+0x8a>
{
Error_Handler();
 800078a:	f000 f9dd 	bl	8000b48 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f975 	bl	8000a7c <MX_GPIO_Init>
  MX_ETH_Init();
 8000792:	f000 f88f 	bl	80008b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f8d9 	bl	800094c <MX_USART3_UART_Init>
  MX_DMA_Init();
 800079a:	f000 f955 	bl	8000a48 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079e:	f000 f921 	bl	80009e4 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <main+0x9e>
 80007a4:	58024400 	.word	0x58024400

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b09c      	sub	sp, #112	; 0x70
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	224c      	movs	r2, #76	; 0x4c
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f005 fb68 	bl	8005e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2220      	movs	r2, #32
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f005 fb62 	bl	8005e8c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007c8:	2004      	movs	r0, #4
 80007ca:	f001 fcf5 	bl	80021b8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <SystemClock_Config+0x100>)
 80007d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d6:	4a34      	ldr	r2, [pc, #208]	; (80008a8 <SystemClock_Config+0x100>)
 80007d8:	f023 0301 	bic.w	r3, r3, #1
 80007dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007de:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <SystemClock_Config+0x100>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	4b30      	ldr	r3, [pc, #192]	; (80008ac <SystemClock_Config+0x104>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f0:	4a2e      	ldr	r2, [pc, #184]	; (80008ac <SystemClock_Config+0x104>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <SystemClock_Config+0x104>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000804:	bf00      	nop
 8000806:	4b29      	ldr	r3, [pc, #164]	; (80008ac <SystemClock_Config+0x104>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000812:	d1f8      	bne.n	8000806 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000814:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <SystemClock_Config+0x108>)
 8000816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000818:	f023 0303 	bic.w	r3, r3, #3
 800081c:	4a24      	ldr	r2, [pc, #144]	; (80008b0 <SystemClock_Config+0x108>)
 800081e:	f043 0302 	orr.w	r3, r3, #2
 8000822:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000824:	2301      	movs	r3, #1
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000828:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000832:	2302      	movs	r3, #2
 8000834:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 36;
 800083a:	2324      	movs	r3, #36	; 0x24
 800083c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000842:	2304      	movs	r3, #4
 8000844:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800084a:	230c      	movs	r3, #12
 800084c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800084e:	2300      	movs	r3, #0
 8000850:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fd16 	bl	800228c <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000866:	f000 f96f 	bl	8000b48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	233f      	movs	r3, #63	; 0x3f
 800086c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2303      	movs	r3, #3
 8000870:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000872:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2101      	movs	r1, #1
 8000890:	4618      	mov	r0, r3
 8000892:	f002 f90b 	bl	8002aac <HAL_RCC_ClockConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800089c:	f000 f954 	bl	8000b48 <Error_Handler>
  }
}
 80008a0:	bf00      	nop
 80008a2:	3770      	adds	r7, #112	; 0x70
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	58000400 	.word	0x58000400
 80008ac:	58024800 	.word	0x58024800
 80008b0:	58024400 	.word	0x58024400

080008b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <MX_ETH_Init+0x80>)
 80008ba:	4a1f      	ldr	r2, [pc, #124]	; (8000938 <MX_ETH_Init+0x84>)
 80008bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_ETH_Init+0x88>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_ETH_Init+0x88>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_ETH_Init+0x88>)
 80008cc:	22e1      	movs	r2, #225	; 0xe1
 80008ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_ETH_Init+0x88>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_ETH_Init+0x88>)
 80008d8:	2200      	movs	r2, #0
 80008da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_ETH_Init+0x88>)
 80008de:	2200      	movs	r2, #0
 80008e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_ETH_Init+0x80>)
 80008e4:	4a15      	ldr	r2, [pc, #84]	; (800093c <MX_ETH_Init+0x88>)
 80008e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_ETH_Init+0x80>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_ETH_Init+0x80>)
 80008f0:	4a13      	ldr	r2, [pc, #76]	; (8000940 <MX_ETH_Init+0x8c>)
 80008f2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_ETH_Init+0x80>)
 80008f6:	4a13      	ldr	r2, [pc, #76]	; (8000944 <MX_ETH_Init+0x90>)
 80008f8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_ETH_Init+0x80>)
 80008fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000900:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_ETH_Init+0x80>)
 8000904:	f000 fd1c 	bl	8001340 <HAL_ETH_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800090e:	f000 f91b 	bl	8000b48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000912:	2234      	movs	r2, #52	; 0x34
 8000914:	2100      	movs	r1, #0
 8000916:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_ETH_Init+0x94>)
 8000918:	f005 fab8 	bl	8005e8c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_ETH_Init+0x94>)
 800091e:	2221      	movs	r2, #33	; 0x21
 8000920:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_ETH_Init+0x94>)
 8000924:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000928:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_ETH_Init+0x94>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2400058c 	.word	0x2400058c
 8000938:	40028000 	.word	0x40028000
 800093c:	240000ec 	.word	0x240000ec
 8000940:	24000070 	.word	0x24000070
 8000944:	24000010 	.word	0x24000010
 8000948:	24000614 	.word	0x24000614

0800094c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000952:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <MX_USART3_UART_Init+0x94>)
 8000954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_USART3_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_USART3_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART3_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000996:	f003 ff77 	bl	8004888 <HAL_UART_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009a0:	f000 f8d2 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a4:	2100      	movs	r1, #0
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_USART3_UART_Init+0x90>)
 80009a8:	f004 fec4 	bl	8005734 <HAL_UARTEx_SetTxFifoThreshold>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009b2:	f000 f8c9 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4808      	ldr	r0, [pc, #32]	; (80009dc <MX_USART3_UART_Init+0x90>)
 80009ba:	f004 fef9 	bl	80057b0 <HAL_UARTEx_SetRxFifoThreshold>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009c4:	f000 f8c0 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_USART3_UART_Init+0x90>)
 80009ca:	f004 fe7a 	bl	80056c2 <HAL_UARTEx_DisableFifoMode>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f000 f8b8 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	240000f4 	.word	0x240000f4
 80009e0:	40004800 	.word	0x40004800

080009e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ea:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f0:	2209      	movs	r2, #9
 80009f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2c:	f001 fa7c 	bl	8001f28 <HAL_PCD_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a36:	f000 f887 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	24000184 	.word	0x24000184
 8000a44:	40080000 	.word	0x40080000

08000a48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_DMA_Init+0x30>)
 8000a50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a54:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <MX_DMA_Init+0x30>)
 8000a56:	f043 0302 	orr.w	r3, r3, #2
 8000a5a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_DMA_Init+0x30>)
 8000a60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]

}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	58024400 	.word	0x58024400

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b087      	sub	sp, #28
 8000a80:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	4a2e      	ldr	r2, [pc, #184]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a92:	4b2c      	ldr	r3, [pc, #176]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa0:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa6:	4a27      	ldr	r2, [pc, #156]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae2:	4a18      	ldr	r2, [pc, #96]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	f003 0308 	and.w	r3, r3, #8
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	4a09      	ldr	r2, [pc, #36]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_GPIO_Init+0xc8>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

}
 8000b36:	bf00      	nop
 8000b38:	371c      	adds	r7, #28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	58024400 	.word	0x58024400

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>
	...

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_MspInit+0x30>)
 8000b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b60:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x30>)
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x30>)
 8000b6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	58024400 	.word	0x58024400

08000b88 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08e      	sub	sp, #56	; 0x38
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a59      	ldr	r2, [pc, #356]	; (8000d0c <HAL_ETH_MspInit+0x184>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	f040 80ab 	bne.w	8000d02 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000bac:	4b58      	ldr	r3, [pc, #352]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000bae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb2:	4a57      	ldr	r2, [pc, #348]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bb8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bbc:	4b54      	ldr	r3, [pc, #336]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000bbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bc6:	623b      	str	r3, [r7, #32]
 8000bc8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000bca:	4b51      	ldr	r3, [pc, #324]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bd0:	4a4f      	ldr	r2, [pc, #316]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bda:	4b4d      	ldr	r3, [pc, #308]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000bdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be4:	61fb      	str	r3, [r7, #28]
 8000be6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000be8:	4b49      	ldr	r3, [pc, #292]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000bea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bee:	4a48      	ldr	r2, [pc, #288]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bf8:	4b45      	ldr	r3, [pc, #276]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000bfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	4b42      	ldr	r3, [pc, #264]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	4a40      	ldr	r2, [pc, #256]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c16:	4b3e      	ldr	r3, [pc, #248]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b3a      	ldr	r3, [pc, #232]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a39      	ldr	r2, [pc, #228]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	4a31      	ldr	r2, [pc, #196]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c60:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	4a2a      	ldr	r2, [pc, #168]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c7e:	2332      	movs	r3, #50	; 0x32
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c8e:	230b      	movs	r3, #11
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	481e      	ldr	r0, [pc, #120]	; (8000d14 <HAL_ETH_MspInit+0x18c>)
 8000c9a:	f000 ff67 	bl	8001b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c9e:	2386      	movs	r3, #134	; 0x86
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cae:	230b      	movs	r3, #11
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4817      	ldr	r0, [pc, #92]	; (8000d18 <HAL_ETH_MspInit+0x190>)
 8000cba:	f000 ff57 	bl	8001b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd0:	230b      	movs	r3, #11
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4810      	ldr	r0, [pc, #64]	; (8000d1c <HAL_ETH_MspInit+0x194>)
 8000cdc:	f000 ff46 	bl	8001b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ce0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf2:	230b      	movs	r3, #11
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4808      	ldr	r0, [pc, #32]	; (8000d20 <HAL_ETH_MspInit+0x198>)
 8000cfe:	f000 ff35 	bl	8001b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	3738      	adds	r7, #56	; 0x38
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40028000 	.word	0x40028000
 8000d10:	58024400 	.word	0x58024400
 8000d14:	58020800 	.word	0x58020800
 8000d18:	58020000 	.word	0x58020000
 8000d1c:	58020400 	.word	0x58020400
 8000d20:	58021800 	.word	0x58021800

08000d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b0b8      	sub	sp, #224	; 0xe0
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	22bc      	movs	r2, #188	; 0xbc
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f005 f8a1 	bl	8005e8c <memset>
  if(huart->Instance==USART3)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a2d      	ldr	r2, [pc, #180]	; (8000e04 <HAL_UART_MspInit+0xe0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d153      	bne.n	8000dfc <HAL_UART_MspInit+0xd8>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d54:	2302      	movs	r3, #2
 8000d56:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000d5c:	2312      	movs	r3, #18
 8000d5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 3;
 8000d64:	2303      	movs	r3, #3
 8000d66:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d6c:	23c0      	movs	r3, #192	; 0xc0
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d70:	2320      	movs	r3, #32
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000d74:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 fa1d 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_UART_MspInit+0x70>
    {
      Error_Handler();
 8000d90:	f7ff feda 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <HAL_UART_MspInit+0xe4>)
 8000d96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d9a:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <HAL_UART_MspInit+0xe4>)
 8000d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_UART_MspInit+0xe4>)
 8000da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_UART_MspInit+0xe4>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <HAL_UART_MspInit+0xe4>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_UART_MspInit+0xe4>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	f003 0308 	and.w	r3, r3, #8
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000dd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dea:	2307      	movs	r3, #7
 8000dec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df4:	4619      	mov	r1, r3
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_UART_MspInit+0xe8>)
 8000df8:	f000 feb8 	bl	8001b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	37e0      	adds	r7, #224	; 0xe0
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40004800 	.word	0x40004800
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	58020c00 	.word	0x58020c00

08000e10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b0b8      	sub	sp, #224	; 0xe0
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	22bc      	movs	r2, #188	; 0xbc
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f005 f82b 	bl	8005e8c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a37      	ldr	r2, [pc, #220]	; (8000f18 <HAL_PCD_MspInit+0x108>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d166      	bne.n	8000f0e <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000e4a:	2312      	movs	r3, #18
 8000e4c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000e52:	2303      	movs	r3, #3
 8000e54:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000e56:	2302      	movs	r3, #2
 8000e58:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000e5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e5e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000e60:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e64:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000e66:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6e:	f107 0310 	add.w	r3, r7, #16
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 f9a6 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8000e7e:	f7ff fe63 	bl	8000b48 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e82:	f001 f9f3 	bl	800226c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <HAL_PCD_MspInit+0x10c>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <HAL_PCD_MspInit+0x10c>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <HAL_PCD_MspInit+0x10c>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ea4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000ea8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4815      	ldr	r0, [pc, #84]	; (8000f20 <HAL_PCD_MspInit+0x110>)
 8000ecc:	f000 fe4e 	bl	8001b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <HAL_PCD_MspInit+0x110>)
 8000eec:	f000 fe3e 	bl	8001b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_PCD_MspInit+0x10c>)
 8000ef2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ef6:	4a09      	ldr	r2, [pc, #36]	; (8000f1c <HAL_PCD_MspInit+0x10c>)
 8000ef8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000efc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_PCD_MspInit+0x10c>)
 8000f02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	37e0      	adds	r7, #224	; 0xe0
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40080000 	.word	0x40080000
 8000f1c:	58024400 	.word	0x58024400
 8000f20:	58020000 	.word	0x58020000

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <NMI_Handler+0x4>

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <MemManage_Handler+0x4>

08000f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f70:	f000 f89e 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f7c:	f7ff fb28 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f82:	490d      	ldr	r1, [pc, #52]	; (8000fb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f98:	4c0a      	ldr	r4, [pc, #40]	; (8000fc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f004 ff4d 	bl	8005e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000faa:	f7ff fbab 	bl	8000704 <main>
  bx  lr
 8000fae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fb8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fbc:	08005efc 	.word	0x08005efc
  ldr r2, =_sbss
 8000fc0:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000fc4:	2400064c 	.word	0x2400064c

08000fc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC3_IRQHandler>
	...

08000fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	f000 f982 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fd8:	f001 ff1e 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_Init+0x68>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	0a1b      	lsrs	r3, r3, #8
 8000fe4:	f003 030f 	and.w	r3, r3, #15
 8000fe8:	4913      	ldr	r1, [pc, #76]	; (8001038 <HAL_Init+0x6c>)
 8000fea:	5ccb      	ldrb	r3, [r1, r3]
 8000fec:	f003 031f 	and.w	r3, r3, #31
 8000ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <HAL_Init+0x68>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <HAL_Init+0x6c>)
 8001000:	5cd3      	ldrb	r3, [r2, r3]
 8001002:	f003 031f 	and.w	r3, r3, #31
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	fa22 f303 	lsr.w	r3, r2, r3
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <HAL_Init+0x70>)
 800100e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001010:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <HAL_Init+0x74>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f814 	bl	8001044 <HAL_InitTick>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e002      	b.n	800102c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001026:	f7ff fd95 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	58024400 	.word	0x58024400
 8001038:	08005eb4 	.word	0x08005eb4
 800103c:	24000004 	.word	0x24000004
 8001040:	24000000 	.word	0x24000000

08001044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_InitTick+0x60>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e021      	b.n	800109c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <HAL_InitTick+0x64>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_InitTick+0x60>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f959 	bl	8001326 <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800108c:	f000 f931 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x68>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2400000c 	.word	0x2400000c
 80010a8:	24000000 	.word	0x24000000
 80010ac:	24000008 	.word	0x24000008

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2400000c 	.word	0x2400000c
 80010d4:	24000648 	.word	0x24000648

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	24000648 	.word	0x24000648

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2400000c 	.word	0x2400000c

08001138 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_GetREVID+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	0c1b      	lsrs	r3, r3, #16
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	5c001000 	.word	0x5c001000

08001150 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001160:	4904      	ldr	r1, [pc, #16]	; (8001174 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4313      	orrs	r3, r2
 8001166:	604b      	str	r3, [r1, #4]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	58000400 	.word	0x58000400

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <__NVIC_SetPriorityGrouping+0x40>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <__NVIC_SetPriorityGrouping+0x40>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00
 80011bc:	05fa0000 	.word	0x05fa0000

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff47 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff5e 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff90 	bl	8001230 <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5f 	bl	80011dc <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffb2 	bl	8001298 <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e0c6      	b.n	80014e0 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001356:	2b00      	cmp	r3, #0
 8001358:	d102      	bne.n	8001360 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fc14 	bl	8000b88 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2223      	movs	r2, #35	; 0x23
 8001364:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	4b60      	ldr	r3, [pc, #384]	; (80014e8 <HAL_ETH_Init+0x1a8>)
 8001368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800136c:	4a5e      	ldr	r2, [pc, #376]	; (80014e8 <HAL_ETH_Init+0x1a8>)
 800136e:	f043 0302 	orr.w	r3, r3, #2
 8001372:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001376:	4b5c      	ldr	r3, [pc, #368]	; (80014e8 <HAL_ETH_Init+0x1a8>)
 8001378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	7a1b      	ldrb	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d103      	bne.n	8001394 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800138c:	2000      	movs	r0, #0
 800138e:	f7ff fedf 	bl	8001150 <HAL_SYSCFG_ETHInterfaceSelect>
 8001392:	e003      	b.n	800139c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001394:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001398:	f7ff feda 	bl	8001150 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013b4:	f7ff fe90 	bl	80010d8 <HAL_GetTick>
 80013b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013ba:	e00f      	b.n	80013dc <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80013bc:	f7ff fe8c 	bl	80010d8 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013ca:	d907      	bls.n	80013dc <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2204      	movs	r2, #4
 80013d0:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	22e0      	movs	r2, #224	; 0xe0
 80013d6:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e081      	b.n	80014e0 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1e6      	bne.n	80013bc <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 fac0 	bl	8001974 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80013f4:	f001 fe8a 	bl	800310c <HAL_RCC_GetHCLKFreq>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4a3c      	ldr	r2, [pc, #240]	; (80014ec <HAL_ETH_Init+0x1ac>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	0c9a      	lsrs	r2, r3, #18
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3a01      	subs	r2, #1
 8001408:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 fa13 	bl	8001838 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001428:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800142c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d007      	beq.n	800144a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	22e0      	movs	r2, #224	; 0xe0
 8001444:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e04a      	b.n	80014e0 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001452:	4413      	add	r3, r2
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <HAL_ETH_Init+0x1b0>)
 8001458:	4013      	ands	r3, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6952      	ldr	r2, [r2, #20]
 800145e:	0052      	lsls	r2, r2, #1
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	6809      	ldr	r1, [r1, #0]
 8001464:	431a      	orrs	r2, r3
 8001466:	f241 1308 	movw	r3, #4360	; 0x1108
 800146a:	440b      	add	r3, r1
 800146c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fad8 	bl	8001a24 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 fb1c 	bl	8001ab2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	3305      	adds	r3, #5
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	021a      	lsls	r2, r3, #8
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	3304      	adds	r3, #4
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	3303      	adds	r3, #3
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	061a      	lsls	r2, r3, #24
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	3302      	adds	r3, #2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	041b      	lsls	r3, r3, #16
 80014ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	3301      	adds	r3, #1
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014c6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2210      	movs	r2, #16
 80014d6:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2210      	movs	r2, #16
 80014dc:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	58024400 	.word	0x58024400
 80014ec:	431bde83 	.word	0x431bde83
 80014f0:	ffff8001 	.word	0xffff8001

080014f4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001506:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	791b      	ldrb	r3, [r3, #4]
 800150c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800150e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	7b1b      	ldrb	r3, [r3, #12]
 8001514:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001516:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	7b5b      	ldrb	r3, [r3, #13]
 800151c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800151e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	7b9b      	ldrb	r3, [r3, #14]
 8001524:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001526:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	7bdb      	ldrb	r3, [r3, #15]
 800152c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800152e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	7c12      	ldrb	r2, [r2, #16]
 8001534:	2a00      	cmp	r2, #0
 8001536:	d102      	bne.n	800153e <ETH_SetMACConfig+0x4a>
 8001538:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800153c:	e000      	b.n	8001540 <ETH_SetMACConfig+0x4c>
 800153e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001540:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	7c52      	ldrb	r2, [r2, #17]
 8001546:	2a00      	cmp	r2, #0
 8001548:	d102      	bne.n	8001550 <ETH_SetMACConfig+0x5c>
 800154a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800154e:	e000      	b.n	8001552 <ETH_SetMACConfig+0x5e>
 8001550:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001552:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	7c9b      	ldrb	r3, [r3, #18]
 8001558:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800155a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001560:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001566:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	7f1b      	ldrb	r3, [r3, #28]
 800156c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800156e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	7f5b      	ldrb	r3, [r3, #29]
 8001574:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001576:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	7f92      	ldrb	r2, [r2, #30]
 800157c:	2a00      	cmp	r2, #0
 800157e:	d102      	bne.n	8001586 <ETH_SetMACConfig+0x92>
 8001580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001584:	e000      	b.n	8001588 <ETH_SetMACConfig+0x94>
 8001586:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001588:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	7fdb      	ldrb	r3, [r3, #31]
 800158e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001590:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001598:	2a00      	cmp	r2, #0
 800159a:	d102      	bne.n	80015a2 <ETH_SetMACConfig+0xae>
 800159c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a0:	e000      	b.n	80015a4 <ETH_SetMACConfig+0xb0>
 80015a2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80015a4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80015aa:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015b2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80015b4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80015ba:	4313      	orrs	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b56      	ldr	r3, [pc, #344]	; (8001720 <ETH_SetMACConfig+0x22c>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	68f9      	ldr	r1, [r7, #12]
 80015ce:	430b      	orrs	r3, r1
 80015d0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015de:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80015e0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015e8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80015ea:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80015f2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80015f4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80015fc:	2a00      	cmp	r2, #0
 80015fe:	d102      	bne.n	8001606 <ETH_SetMACConfig+0x112>
 8001600:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001604:	e000      	b.n	8001608 <ETH_SetMACConfig+0x114>
 8001606:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001608:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800160e:	4313      	orrs	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	4b42      	ldr	r3, [pc, #264]	; (8001724 <ETH_SetMACConfig+0x230>)
 800161a:	4013      	ands	r3, r2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	68f9      	ldr	r1, [r7, #12]
 8001622:	430b      	orrs	r3, r1
 8001624:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800162c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001632:	4313      	orrs	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <ETH_SetMACConfig+0x234>)
 800163e:	4013      	ands	r3, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	68f9      	ldr	r1, [r7, #12]
 8001646:	430b      	orrs	r3, r1
 8001648:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001650:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001656:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800165e:	2a00      	cmp	r2, #0
 8001660:	d101      	bne.n	8001666 <ETH_SetMACConfig+0x172>
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	e000      	b.n	8001668 <ETH_SetMACConfig+0x174>
 8001666:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001668:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001670:	4313      	orrs	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800167a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800167e:	4013      	ands	r3, r2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	68f9      	ldr	r1, [r7, #12]
 8001686:	430b      	orrs	r3, r1
 8001688:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001690:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001698:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800169a:	4313      	orrs	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a6:	f023 0103 	bic.w	r1, r3, #3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80016be:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80016da:	2a00      	cmp	r2, #0
 80016dc:	d101      	bne.n	80016e2 <ETH_SetMACConfig+0x1ee>
 80016de:	2240      	movs	r2, #64	; 0x40
 80016e0:	e000      	b.n	80016e4 <ETH_SetMACConfig+0x1f0>
 80016e2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80016e4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80016ec:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80016ee:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80016f6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80016f8:	4313      	orrs	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001704:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	430a      	orrs	r2, r1
 8001710:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	00048083 	.word	0x00048083
 8001724:	c0f88000 	.word	0xc0f88000
 8001728:	fffffef0 	.word	0xfffffef0

0800172c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b38      	ldr	r3, [pc, #224]	; (8001824 <ETH_SetDMAConfig+0xf8>)
 8001742:	4013      	ands	r3, r2
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	6809      	ldr	r1, [r1, #0]
 800174c:	431a      	orrs	r2, r3
 800174e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001752:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	791b      	ldrb	r3, [r3, #4]
 8001758:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800175e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	7b1b      	ldrb	r3, [r3, #12]
 8001764:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001766:	4313      	orrs	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	f241 0304 	movw	r3, #4100	; 0x1004
 8001772:	4413      	add	r3, r2
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b2c      	ldr	r3, [pc, #176]	; (8001828 <ETH_SetDMAConfig+0xfc>)
 8001778:	4013      	ands	r3, r2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6811      	ldr	r1, [r2, #0]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	431a      	orrs	r2, r3
 8001782:	f241 0304 	movw	r3, #4100	; 0x1004
 8001786:	440b      	add	r3, r1
 8001788:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	7b5b      	ldrb	r3, [r3, #13]
 800178e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001794:	4313      	orrs	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <ETH_SetDMAConfig+0x100>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6811      	ldr	r1, [r2, #0]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80017b2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	7d1b      	ldrb	r3, [r3, #20]
 80017bc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80017be:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	7f5b      	ldrb	r3, [r3, #29]
 80017c4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	f241 1304 	movw	r3, #4356	; 0x1104
 80017d2:	4413      	add	r3, r2
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <ETH_SetDMAConfig+0x104>)
 80017d8:	4013      	ands	r3, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6811      	ldr	r1, [r2, #0]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	f241 1304 	movw	r3, #4356	; 0x1104
 80017e6:	440b      	add	r3, r1
 80017e8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	7f1b      	ldrb	r3, [r3, #28]
 80017ee:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80017f4:	4313      	orrs	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	f241 1308 	movw	r3, #4360	; 0x1108
 8001800:	4413      	add	r3, r2
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <ETH_SetDMAConfig+0x108>)
 8001806:	4013      	ands	r3, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6811      	ldr	r1, [r2, #0]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	431a      	orrs	r2, r3
 8001810:	f241 1308 	movw	r3, #4360	; 0x1108
 8001814:	440b      	add	r3, r1
 8001816:	601a      	str	r2, [r3, #0]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	ffff87fd 	.word	0xffff87fd
 8001828:	ffff2ffe 	.word	0xffff2ffe
 800182c:	fffec000 	.word	0xfffec000
 8001830:	ffc0efef 	.word	0xffc0efef
 8001834:	7fc0ffff 	.word	0x7fc0ffff

08001838 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b0a4      	sub	sp, #144	; 0x90
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001840:	2301      	movs	r3, #1
 8001842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001846:	2300      	movs	r3, #0
 8001848:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001856:	2301      	movs	r3, #1
 8001858:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800185c:	2301      	movs	r3, #1
 800185e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001862:	2301      	movs	r3, #1
 8001864:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800186e:	2301      	movs	r3, #1
 8001870:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001878:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001880:	2300      	movs	r3, #0
 8001882:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001890:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001894:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800189c:	2300      	movs	r3, #0
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80018a0:	2301      	movs	r3, #1
 80018a2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80018b2:	2300      	movs	r3, #0
 80018b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80018ba:	2300      	movs	r3, #0
 80018bc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80018d0:	2320      	movs	r3, #32
 80018d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80018d6:	2301      	movs	r3, #1
 80018d8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80018e2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80018e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018ec:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80018f4:	2302      	movs	r3, #2
 80018f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800190c:	2301      	movs	r3, #1
 800190e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001912:	2300      	movs	r3, #0
 8001914:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001916:	2301      	movs	r3, #1
 8001918:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800191c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001920:	4619      	mov	r1, r3
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fde6 	bl	80014f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001928:	2301      	movs	r3, #1
 800192a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800192c:	2301      	movs	r3, #1
 800192e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001942:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001946:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800194c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001950:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001958:	f44f 7306 	mov.w	r3, #536	; 0x218
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800195e:	f107 0308 	add.w	r3, r7, #8
 8001962:	4619      	mov	r1, r3
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff fee1 	bl	800172c <ETH_SetDMAConfig>
}
 800196a:	bf00      	nop
 800196c:	3790      	adds	r7, #144	; 0x90
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001984:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800198c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800198e:	f001 fbbd 	bl	800310c <HAL_RCC_GetHCLKFreq>
 8001992:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4a1e      	ldr	r2, [pc, #120]	; (8001a10 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d908      	bls.n	80019ae <ETH_MAC_MDIO_ClkConfig+0x3a>
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d804      	bhi.n	80019ae <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e027      	b.n	80019fe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	4a18      	ldr	r2, [pc, #96]	; (8001a14 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d908      	bls.n	80019c8 <ETH_MAC_MDIO_ClkConfig+0x54>
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	4a17      	ldr	r2, [pc, #92]	; (8001a18 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d204      	bcs.n	80019c8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	e01a      	b.n	80019fe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d303      	bcc.n	80019d8 <ETH_MAC_MDIO_ClkConfig+0x64>
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d911      	bls.n	80019fc <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4a10      	ldr	r2, [pc, #64]	; (8001a1c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d908      	bls.n	80019f2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d804      	bhi.n	80019f2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e005      	b.n	80019fe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e000      	b.n	80019fe <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80019fc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	01312cff 	.word	0x01312cff
 8001a14:	02160ebf 	.word	0x02160ebf
 8001a18:	03938700 	.word	0x03938700
 8001a1c:	05f5e0ff 	.word	0x05f5e0ff
 8001a20:	08f0d17f 	.word	0x08f0d17f

08001a24 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	e01d      	b.n	8001a6e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68d9      	ldr	r1, [r3, #12]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	440b      	add	r3, r1
 8001a42:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	3206      	adds	r2, #6
 8001a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d9de      	bls.n	8001a32 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	f241 132c 	movw	r3, #4396	; 0x112c
 8001a82:	4413      	add	r3, r2
 8001a84:	2203      	movs	r2, #3
 8001a86:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68d9      	ldr	r1, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	f241 1314 	movw	r3, #4372	; 0x1114
 8001a94:	4413      	add	r3, r2
 8001a96:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001aa4:	601a      	str	r2, [r3, #0]
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b085      	sub	sp, #20
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	e024      	b.n	8001b0a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6919      	ldr	r1, [r3, #16]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	440b      	add	r3, r1
 8001ad0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3310      	adds	r3, #16
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3301      	adds	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d9d7      	bls.n	8001ac0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	f241 1330 	movw	r3, #4400	; 0x1130
 8001b36:	4413      	add	r3, r2
 8001b38:	2203      	movs	r2, #3
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6919      	ldr	r1, [r3, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	f241 131c 	movw	r3, #4380	; 0x111c
 8001b48:	4413      	add	r3, r2
 8001b4a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	f241 1328 	movw	r3, #4392	; 0x1128
 8001b5c:	4413      	add	r3, r2
 8001b5e:	6019      	str	r1, [r3, #0]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b7a:	4b89      	ldr	r3, [pc, #548]	; (8001da0 <HAL_GPIO_Init+0x234>)
 8001b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b7e:	e194      	b.n	8001eaa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2101      	movs	r1, #1
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 8186 	beq.w	8001ea4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d00b      	beq.n	8001bb8 <HAL_GPIO_Init+0x4c>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d007      	beq.n	8001bb8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bac:	2b11      	cmp	r3, #17
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b12      	cmp	r3, #18
 8001bb6:	d130      	bne.n	8001c1a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bee:	2201      	movs	r2, #1
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	091b      	lsrs	r3, r3, #4
 8001c04:	f003 0201 	and.w	r2, r3, #1
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0xee>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b12      	cmp	r3, #18
 8001c58:	d123      	bne.n	8001ca2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3208      	adds	r2, #8
 8001c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	220f      	movs	r2, #15
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	69b9      	ldr	r1, [r7, #24]
 8001c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	2203      	movs	r2, #3
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0203 	and.w	r2, r3, #3
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 80e0 	beq.w	8001ea4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce4:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <HAL_GPIO_Init+0x238>)
 8001ce6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cea:	4a2e      	ldr	r2, [pc, #184]	; (8001da4 <HAL_GPIO_Init+0x238>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cf4:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <HAL_GPIO_Init+0x238>)
 8001cf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d02:	4a29      	ldr	r2, [pc, #164]	; (8001da8 <HAL_GPIO_Init+0x23c>)
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a20      	ldr	r2, [pc, #128]	; (8001dac <HAL_GPIO_Init+0x240>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d052      	beq.n	8001dd4 <HAL_GPIO_Init+0x268>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <HAL_GPIO_Init+0x244>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d031      	beq.n	8001d9a <HAL_GPIO_Init+0x22e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a1e      	ldr	r2, [pc, #120]	; (8001db4 <HAL_GPIO_Init+0x248>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d02b      	beq.n	8001d96 <HAL_GPIO_Init+0x22a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a1d      	ldr	r2, [pc, #116]	; (8001db8 <HAL_GPIO_Init+0x24c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d025      	beq.n	8001d92 <HAL_GPIO_Init+0x226>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <HAL_GPIO_Init+0x250>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01f      	beq.n	8001d8e <HAL_GPIO_Init+0x222>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <HAL_GPIO_Init+0x254>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d019      	beq.n	8001d8a <HAL_GPIO_Init+0x21e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a1a      	ldr	r2, [pc, #104]	; (8001dc4 <HAL_GPIO_Init+0x258>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d013      	beq.n	8001d86 <HAL_GPIO_Init+0x21a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <HAL_GPIO_Init+0x25c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00d      	beq.n	8001d82 <HAL_GPIO_Init+0x216>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <HAL_GPIO_Init+0x260>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d007      	beq.n	8001d7e <HAL_GPIO_Init+0x212>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_GPIO_Init+0x264>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d101      	bne.n	8001d7a <HAL_GPIO_Init+0x20e>
 8001d76:	2309      	movs	r3, #9
 8001d78:	e02d      	b.n	8001dd6 <HAL_GPIO_Init+0x26a>
 8001d7a:	230a      	movs	r3, #10
 8001d7c:	e02b      	b.n	8001dd6 <HAL_GPIO_Init+0x26a>
 8001d7e:	2308      	movs	r3, #8
 8001d80:	e029      	b.n	8001dd6 <HAL_GPIO_Init+0x26a>
 8001d82:	2307      	movs	r3, #7
 8001d84:	e027      	b.n	8001dd6 <HAL_GPIO_Init+0x26a>
 8001d86:	2306      	movs	r3, #6
 8001d88:	e025      	b.n	8001dd6 <HAL_GPIO_Init+0x26a>
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	e023      	b.n	8001dd6 <HAL_GPIO_Init+0x26a>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e021      	b.n	8001dd6 <HAL_GPIO_Init+0x26a>
 8001d92:	2303      	movs	r3, #3
 8001d94:	e01f      	b.n	8001dd6 <HAL_GPIO_Init+0x26a>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e01d      	b.n	8001dd6 <HAL_GPIO_Init+0x26a>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e01b      	b.n	8001dd6 <HAL_GPIO_Init+0x26a>
 8001d9e:	bf00      	nop
 8001da0:	58000080 	.word	0x58000080
 8001da4:	58024400 	.word	0x58024400
 8001da8:	58000400 	.word	0x58000400
 8001dac:	58020000 	.word	0x58020000
 8001db0:	58020400 	.word	0x58020400
 8001db4:	58020800 	.word	0x58020800
 8001db8:	58020c00 	.word	0x58020c00
 8001dbc:	58021000 	.word	0x58021000
 8001dc0:	58021400 	.word	0x58021400
 8001dc4:	58021800 	.word	0x58021800
 8001dc8:	58021c00 	.word	0x58021c00
 8001dcc:	58022000 	.word	0x58022000
 8001dd0:	58022400 	.word	0x58022400
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	f002 0203 	and.w	r2, r2, #3
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	4093      	lsls	r3, r2
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de6:	4938      	ldr	r1, [pc, #224]	; (8001ec8 <HAL_GPIO_Init+0x35c>)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f47f ae63 	bne.w	8001b80 <HAL_GPIO_Init+0x14>
  }
}
 8001eba:	bf00      	nop
 8001ebc:	bf00      	nop
 8001ebe:	3724      	adds	r7, #36	; 0x24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	58000400 	.word	0x58000400

08001ecc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001ed4:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_HSEM_FastTake+0x2c>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3320      	adds	r3, #32
 8001eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ede:	4a07      	ldr	r2, [pc, #28]	; (8001efc <HAL_HSEM_FastTake+0x30>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e000      	b.n	8001eea <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	58026400 	.word	0x58026400
 8001efc:	80000300 	.word	0x80000300

08001f00 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001f0a:	4906      	ldr	r1, [pc, #24]	; (8001f24 <HAL_HSEM_Release+0x24>)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	58026400 	.word	0x58026400

08001f28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2a:	b08f      	sub	sp, #60	; 0x3c
 8001f2c:	af0a      	add	r7, sp, #40	; 0x28
 8001f2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e116      	b.n	8002168 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d106      	bne.n	8001f5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7fe ff5b 	bl	8000e10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 fd13 	bl	80059a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	687e      	ldr	r6, [r7, #4]
 8001f86:	466d      	mov	r5, sp
 8001f88:	f106 0410 	add.w	r4, r6, #16
 8001f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f98:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f9c:	1d33      	adds	r3, r6, #4
 8001f9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa0:	6838      	ldr	r0, [r7, #0]
 8001fa2:	f003 fc91 	bl	80058c8 <USB_CoreInit>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0d7      	b.n	8002168 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 fd01 	bl	80059c6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]
 8001fc8:	e04a      	b.n	8002060 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	333d      	adds	r3, #61	; 0x3d
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	1a9b      	subs	r3, r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	333c      	adds	r3, #60	; 0x3c
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	b298      	uxth	r0, r3
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	1a9b      	subs	r3, r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	3342      	adds	r3, #66	; 0x42
 8002006:	4602      	mov	r2, r0
 8002008:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	333f      	adds	r3, #63	; 0x3f
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	3344      	adds	r3, #68	; 0x44
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	3348      	adds	r3, #72	; 0x48
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	3350      	adds	r3, #80	; 0x50
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	3301      	adds	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	429a      	cmp	r2, r3
 8002068:	d3af      	bcc.n	8001fca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
 800206e:	e044      	b.n	80020fa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	1a9b      	subs	r3, r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	3301      	adds	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	429a      	cmp	r2, r3
 8002102:	d3b5      	bcc.n	8002070 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	687e      	ldr	r6, [r7, #4]
 800210c:	466d      	mov	r5, sp
 800210e:	f106 0410 	add.w	r4, r6, #16
 8002112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800211a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800211e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002122:	1d33      	adds	r3, r6, #4
 8002124:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002126:	6838      	ldr	r0, [r7, #0]
 8002128:	f003 fc78 	bl	8005a1c <USB_DevInit>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e014      	b.n	8002168 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	2b01      	cmp	r3, #1
 8002154:	d102      	bne.n	800215c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f80a 	bl	8002170 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f003 fe1a 	bl	8005d9a <USB_DevDisconnect>

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002170 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	10000003 	.word	0x10000003

080021b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80021c0:	4b29      	ldr	r3, [pc, #164]	; (8002268 <HAL_PWREx_ConfigSupply+0xb0>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	2b06      	cmp	r3, #6
 80021ca:	d00a      	beq.n	80021e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021cc:	4b26      	ldr	r3, [pc, #152]	; (8002268 <HAL_PWREx_ConfigSupply+0xb0>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e040      	b.n	8002260 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e03e      	b.n	8002260 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021e2:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_PWREx_ConfigSupply+0xb0>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80021ea:	491f      	ldr	r1, [pc, #124]	; (8002268 <HAL_PWREx_ConfigSupply+0xb0>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021f2:	f7fe ff71 	bl	80010d8 <HAL_GetTick>
 80021f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021f8:	e009      	b.n	800220e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021fa:	f7fe ff6d 	bl	80010d8 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002208:	d901      	bls.n	800220e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e028      	b.n	8002260 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <HAL_PWREx_ConfigSupply+0xb0>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800221a:	d1ee      	bne.n	80021fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b1e      	cmp	r3, #30
 8002220:	d008      	beq.n	8002234 <HAL_PWREx_ConfigSupply+0x7c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b2e      	cmp	r3, #46	; 0x2e
 8002226:	d005      	beq.n	8002234 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b1d      	cmp	r3, #29
 800222c:	d002      	beq.n	8002234 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b2d      	cmp	r3, #45	; 0x2d
 8002232:	d114      	bne.n	800225e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002234:	f7fe ff50 	bl	80010d8 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800223a:	e009      	b.n	8002250 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800223c:	f7fe ff4c 	bl	80010d8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800224a:	d901      	bls.n	8002250 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e007      	b.n	8002260 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_PWREx_ConfigSupply+0xb0>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225c:	d1ee      	bne.n	800223c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	58024800 	.word	0x58024800

0800226c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4a04      	ldr	r2, [pc, #16]	; (8002288 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	58024800 	.word	0x58024800

0800228c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08c      	sub	sp, #48	; 0x30
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e3ff      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 8087 	beq.w	80023ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ac:	4b99      	ldr	r3, [pc, #612]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022b6:	4b97      	ldr	r3, [pc, #604]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022be:	2b10      	cmp	r3, #16
 80022c0:	d007      	beq.n	80022d2 <HAL_RCC_OscConfig+0x46>
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	2b18      	cmp	r3, #24
 80022c6:	d110      	bne.n	80022ea <HAL_RCC_OscConfig+0x5e>
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d10b      	bne.n	80022ea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d2:	4b90      	ldr	r3, [pc, #576]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d06c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x12c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d168      	bne.n	80023b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e3d9      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x76>
 80022f4:	4b87      	ldr	r3, [pc, #540]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a86      	ldr	r2, [pc, #536]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80022fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	e02e      	b.n	8002360 <HAL_RCC_OscConfig+0xd4>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x98>
 800230a:	4b82      	ldr	r3, [pc, #520]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a81      	ldr	r2, [pc, #516]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 8002310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4b7f      	ldr	r3, [pc, #508]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a7e      	ldr	r2, [pc, #504]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 800231c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e01d      	b.n	8002360 <HAL_RCC_OscConfig+0xd4>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0xbc>
 800232e:	4b79      	ldr	r3, [pc, #484]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a78      	ldr	r2, [pc, #480]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a75      	ldr	r2, [pc, #468]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0xd4>
 8002348:	4b72      	ldr	r3, [pc, #456]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a71      	ldr	r2, [pc, #452]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 800234e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b6f      	ldr	r3, [pc, #444]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a6e      	ldr	r2, [pc, #440]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 800235a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d013      	beq.n	8002390 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe feb6 	bl	80010d8 <HAL_GetTick>
 800236c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe feb2 	bl	80010d8 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e38d      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002382:	4b64      	ldr	r3, [pc, #400]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0xe4>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7fe fea2 	bl	80010d8 <HAL_GetTick>
 8002394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002398:	f7fe fe9e 	bl	80010d8 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e379      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023aa:	4b5a      	ldr	r3, [pc, #360]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x10c>
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80ae 	beq.w	8002524 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c8:	4b52      	ldr	r3, [pc, #328]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023d2:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d007      	beq.n	80023ee <HAL_RCC_OscConfig+0x162>
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	2b18      	cmp	r3, #24
 80023e2:	d13a      	bne.n	800245a <HAL_RCC_OscConfig+0x1ce>
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d135      	bne.n	800245a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ee:	4b49      	ldr	r3, [pc, #292]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <HAL_RCC_OscConfig+0x17a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e34b      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002406:	f7fe fe97 	bl	8001138 <HAL_GetREVID>
 800240a:	4603      	mov	r3, r0
 800240c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002410:	4293      	cmp	r3, r2
 8002412:	d817      	bhi.n	8002444 <HAL_RCC_OscConfig+0x1b8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b40      	cmp	r3, #64	; 0x40
 800241a:	d108      	bne.n	800242e <HAL_RCC_OscConfig+0x1a2>
 800241c:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002424:	4a3b      	ldr	r2, [pc, #236]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 8002426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800242c:	e07a      	b.n	8002524 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	031b      	lsls	r3, r3, #12
 800243c:	4935      	ldr	r1, [pc, #212]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002442:	e06f      	b.n	8002524 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002444:	4b33      	ldr	r3, [pc, #204]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	061b      	lsls	r3, r3, #24
 8002452:	4930      	ldr	r1, [pc, #192]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002458:	e064      	b.n	8002524 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d045      	beq.n	80024ee <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002462:	4b2c      	ldr	r3, [pc, #176]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 0219 	bic.w	r2, r3, #25
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	4929      	ldr	r1, [pc, #164]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fe30 	bl	80010d8 <HAL_GetTick>
 8002478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247c:	f7fe fe2c 	bl	80010d8 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e307      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800248e:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249a:	f7fe fe4d 	bl	8001138 <HAL_GetREVID>
 800249e:	4603      	mov	r3, r0
 80024a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d817      	bhi.n	80024d8 <HAL_RCC_OscConfig+0x24c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	2b40      	cmp	r3, #64	; 0x40
 80024ae:	d108      	bne.n	80024c2 <HAL_RCC_OscConfig+0x236>
 80024b0:	4b18      	ldr	r3, [pc, #96]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024b8:	4a16      	ldr	r2, [pc, #88]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80024ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024be:	6053      	str	r3, [r2, #4]
 80024c0:	e030      	b.n	8002524 <HAL_RCC_OscConfig+0x298>
 80024c2:	4b14      	ldr	r3, [pc, #80]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	031b      	lsls	r3, r3, #12
 80024d0:	4910      	ldr	r1, [pc, #64]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	604b      	str	r3, [r1, #4]
 80024d6:	e025      	b.n	8002524 <HAL_RCC_OscConfig+0x298>
 80024d8:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	061b      	lsls	r3, r3, #24
 80024e6:	490b      	ldr	r1, [pc, #44]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
 80024ec:	e01a      	b.n	8002524 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a08      	ldr	r2, [pc, #32]	; (8002514 <HAL_RCC_OscConfig+0x288>)
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7fe fded 	bl	80010d8 <HAL_GetTick>
 80024fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002502:	f7fe fde9 	bl	80010d8 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d903      	bls.n	8002518 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e2c4      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
 8002514:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002518:	4ba4      	ldr	r3, [pc, #656]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1ee      	bne.n	8002502 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80a9 	beq.w	8002684 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002532:	4b9e      	ldr	r3, [pc, #632]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800253a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800253c:	4b9b      	ldr	r3, [pc, #620]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	2b08      	cmp	r3, #8
 8002546:	d007      	beq.n	8002558 <HAL_RCC_OscConfig+0x2cc>
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2b18      	cmp	r3, #24
 800254c:	d13a      	bne.n	80025c4 <HAL_RCC_OscConfig+0x338>
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d135      	bne.n	80025c4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002558:	4b94      	ldr	r3, [pc, #592]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_OscConfig+0x2e4>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	d001      	beq.n	8002570 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e296      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002570:	f7fe fde2 	bl	8001138 <HAL_GetREVID>
 8002574:	4603      	mov	r3, r0
 8002576:	f241 0203 	movw	r2, #4099	; 0x1003
 800257a:	4293      	cmp	r3, r2
 800257c:	d817      	bhi.n	80025ae <HAL_RCC_OscConfig+0x322>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	2b20      	cmp	r3, #32
 8002584:	d108      	bne.n	8002598 <HAL_RCC_OscConfig+0x30c>
 8002586:	4b89      	ldr	r3, [pc, #548]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800258e:	4a87      	ldr	r2, [pc, #540]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 8002590:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002594:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002596:	e075      	b.n	8002684 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002598:	4b84      	ldr	r3, [pc, #528]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	069b      	lsls	r3, r3, #26
 80025a6:	4981      	ldr	r1, [pc, #516]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025ac:	e06a      	b.n	8002684 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025ae:	4b7f      	ldr	r3, [pc, #508]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	061b      	lsls	r3, r3, #24
 80025bc:	497b      	ldr	r1, [pc, #492]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025c2:	e05f      	b.n	8002684 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d042      	beq.n	8002652 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025cc:	4b77      	ldr	r3, [pc, #476]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a76      	ldr	r2, [pc, #472]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 80025d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fd7e 	bl	80010d8 <HAL_GetTick>
 80025dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80025e0:	f7fe fd7a 	bl	80010d8 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e255      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025f2:	4b6e      	ldr	r3, [pc, #440]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025fe:	f7fe fd9b 	bl	8001138 <HAL_GetREVID>
 8002602:	4603      	mov	r3, r0
 8002604:	f241 0203 	movw	r2, #4099	; 0x1003
 8002608:	4293      	cmp	r3, r2
 800260a:	d817      	bhi.n	800263c <HAL_RCC_OscConfig+0x3b0>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	2b20      	cmp	r3, #32
 8002612:	d108      	bne.n	8002626 <HAL_RCC_OscConfig+0x39a>
 8002614:	4b65      	ldr	r3, [pc, #404]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800261c:	4a63      	ldr	r2, [pc, #396]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 800261e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002622:	6053      	str	r3, [r2, #4]
 8002624:	e02e      	b.n	8002684 <HAL_RCC_OscConfig+0x3f8>
 8002626:	4b61      	ldr	r3, [pc, #388]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	069b      	lsls	r3, r3, #26
 8002634:	495d      	ldr	r1, [pc, #372]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
 800263a:	e023      	b.n	8002684 <HAL_RCC_OscConfig+0x3f8>
 800263c:	4b5b      	ldr	r3, [pc, #364]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	061b      	lsls	r3, r3, #24
 800264a:	4958      	ldr	r1, [pc, #352]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 800264c:	4313      	orrs	r3, r2
 800264e:	60cb      	str	r3, [r1, #12]
 8002650:	e018      	b.n	8002684 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002652:	4b56      	ldr	r3, [pc, #344]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a55      	ldr	r2, [pc, #340]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 8002658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800265c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7fe fd3b 	bl	80010d8 <HAL_GetTick>
 8002662:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002666:	f7fe fd37 	bl	80010d8 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e212      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002678:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d036      	beq.n	80026fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d019      	beq.n	80026cc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002698:	4b44      	ldr	r3, [pc, #272]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 800269a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800269c:	4a43      	ldr	r2, [pc, #268]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7fe fd18 	bl	80010d8 <HAL_GetTick>
 80026a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ac:	f7fe fd14 	bl	80010d8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1ef      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026be:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 80026c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x420>
 80026ca:	e018      	b.n	80026fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026cc:	4b37      	ldr	r3, [pc, #220]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 80026ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d0:	4a36      	ldr	r2, [pc, #216]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7fe fcfe 	bl	80010d8 <HAL_GetTick>
 80026dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e0:	f7fe fcfa 	bl	80010d8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1d5      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026f2:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 80026f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d036      	beq.n	8002778 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d019      	beq.n	8002746 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002712:	4b26      	ldr	r3, [pc, #152]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a25      	ldr	r2, [pc, #148]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 8002718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800271c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800271e:	f7fe fcdb 	bl	80010d8 <HAL_GetTick>
 8002722:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002726:	f7fe fcd7 	bl	80010d8 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e1b2      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002738:	4b1c      	ldr	r3, [pc, #112]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x49a>
 8002744:	e018      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002746:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a18      	ldr	r2, [pc, #96]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 800274c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002750:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002752:	f7fe fcc1 	bl	80010d8 <HAL_GetTick>
 8002756:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800275a:	f7fe fcbd 	bl	80010d8 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e198      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800276c:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <HAL_RCC_OscConfig+0x520>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f0      	bne.n	800275a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8085 	beq.w	8002890 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <HAL_RCC_OscConfig+0x524>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a09      	ldr	r2, [pc, #36]	; (80027b0 <HAL_RCC_OscConfig+0x524>)
 800278c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002790:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002792:	f7fe fca1 	bl	80010d8 <HAL_GetTick>
 8002796:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002798:	e00c      	b.n	80027b4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800279a:	f7fe fc9d 	bl	80010d8 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b64      	cmp	r3, #100	; 0x64
 80027a6:	d905      	bls.n	80027b4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e178      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
 80027ac:	58024400 	.word	0x58024400
 80027b0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027b4:	4b96      	ldr	r3, [pc, #600]	; (8002a10 <HAL_RCC_OscConfig+0x784>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0ec      	beq.n	800279a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d106      	bne.n	80027d6 <HAL_RCC_OscConfig+0x54a>
 80027c8:	4b92      	ldr	r3, [pc, #584]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	4a91      	ldr	r2, [pc, #580]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6713      	str	r3, [r2, #112]	; 0x70
 80027d4:	e02d      	b.n	8002832 <HAL_RCC_OscConfig+0x5a6>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x56c>
 80027de:	4b8d      	ldr	r3, [pc, #564]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	4a8c      	ldr	r2, [pc, #560]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ea:	4b8a      	ldr	r3, [pc, #552]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	4a89      	ldr	r2, [pc, #548]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80027f0:	f023 0304 	bic.w	r3, r3, #4
 80027f4:	6713      	str	r3, [r2, #112]	; 0x70
 80027f6:	e01c      	b.n	8002832 <HAL_RCC_OscConfig+0x5a6>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b05      	cmp	r3, #5
 80027fe:	d10c      	bne.n	800281a <HAL_RCC_OscConfig+0x58e>
 8002800:	4b84      	ldr	r3, [pc, #528]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	4a83      	ldr	r2, [pc, #524]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002806:	f043 0304 	orr.w	r3, r3, #4
 800280a:	6713      	str	r3, [r2, #112]	; 0x70
 800280c:	4b81      	ldr	r3, [pc, #516]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	4a80      	ldr	r2, [pc, #512]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6713      	str	r3, [r2, #112]	; 0x70
 8002818:	e00b      	b.n	8002832 <HAL_RCC_OscConfig+0x5a6>
 800281a:	4b7e      	ldr	r3, [pc, #504]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281e:	4a7d      	ldr	r2, [pc, #500]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	6713      	str	r3, [r2, #112]	; 0x70
 8002826:	4b7b      	ldr	r3, [pc, #492]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	4a7a      	ldr	r2, [pc, #488]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 800282c:	f023 0304 	bic.w	r3, r3, #4
 8002830:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d015      	beq.n	8002866 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283a:	f7fe fc4d 	bl	80010d8 <HAL_GetTick>
 800283e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7fe fc49 	bl	80010d8 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e122      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002858:	4b6e      	ldr	r3, [pc, #440]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0ee      	beq.n	8002842 <HAL_RCC_OscConfig+0x5b6>
 8002864:	e014      	b.n	8002890 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002866:	f7fe fc37 	bl	80010d8 <HAL_GetTick>
 800286a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe fc33 	bl	80010d8 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e10c      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002884:	4b63      	ldr	r3, [pc, #396]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1ee      	bne.n	800286e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 8101 	beq.w	8002a9c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800289a:	4b5e      	ldr	r3, [pc, #376]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028a2:	2b18      	cmp	r3, #24
 80028a4:	f000 80bc 	beq.w	8002a20 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	f040 8095 	bne.w	80029dc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b2:	4b58      	ldr	r3, [pc, #352]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a57      	ldr	r2, [pc, #348]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80028b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7fe fc0b 	bl	80010d8 <HAL_GetTick>
 80028c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c6:	f7fe fc07 	bl	80010d8 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e0e2      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028d8:	4b4e      	ldr	r3, [pc, #312]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e4:	4b4b      	ldr	r3, [pc, #300]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80028e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028e8:	4b4b      	ldr	r3, [pc, #300]	; (8002a18 <HAL_RCC_OscConfig+0x78c>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	430a      	orrs	r2, r1
 80028f8:	4946      	ldr	r1, [pc, #280]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	628b      	str	r3, [r1, #40]	; 0x28
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	3b01      	subs	r3, #1
 8002904:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290c:	3b01      	subs	r3, #1
 800290e:	025b      	lsls	r3, r3, #9
 8002910:	b29b      	uxth	r3, r3
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	3b01      	subs	r3, #1
 800291a:	041b      	lsls	r3, r3, #16
 800291c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	3b01      	subs	r3, #1
 8002928:	061b      	lsls	r3, r3, #24
 800292a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800292e:	4939      	ldr	r1, [pc, #228]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002930:	4313      	orrs	r3, r2
 8002932:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002934:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	4a36      	ldr	r2, [pc, #216]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002940:	4b34      	ldr	r3, [pc, #208]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002944:	4b35      	ldr	r3, [pc, #212]	; (8002a1c <HAL_RCC_OscConfig+0x790>)
 8002946:	4013      	ands	r3, r2
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800294c:	00d2      	lsls	r2, r2, #3
 800294e:	4931      	ldr	r1, [pc, #196]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002950:	4313      	orrs	r3, r2
 8002952:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002954:	4b2f      	ldr	r3, [pc, #188]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	f023 020c 	bic.w	r2, r3, #12
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	492c      	ldr	r1, [pc, #176]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002962:	4313      	orrs	r3, r2
 8002964:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002966:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	f023 0202 	bic.w	r2, r3, #2
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	4928      	ldr	r1, [pc, #160]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002974:	4313      	orrs	r3, r2
 8002976:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002978:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	4a25      	ldr	r2, [pc, #148]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 800297e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002982:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002984:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 800298a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002990:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	4a1f      	ldr	r2, [pc, #124]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002996:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800299a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	4a1c      	ldr	r2, [pc, #112]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a8:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a19      	ldr	r2, [pc, #100]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80029ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fb90 	bl	80010d8 <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029bc:	f7fe fb8c 	bl	80010d8 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e067      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x730>
 80029da:	e05f      	b.n	8002a9c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029dc:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0c      	ldr	r2, [pc, #48]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 80029e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fb76 	bl	80010d8 <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fb72 	bl	80010d8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e04d      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <HAL_RCC_OscConfig+0x788>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x764>
 8002a0e:	e045      	b.n	8002a9c <HAL_RCC_OscConfig+0x810>
 8002a10:	58024800 	.word	0x58024800
 8002a14:	58024400 	.word	0x58024400
 8002a18:	fffffc0c 	.word	0xfffffc0c
 8002a1c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <HAL_RCC_OscConfig+0x81c>)
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_RCC_OscConfig+0x81c>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d031      	beq.n	8002a98 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f003 0203 	and.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d12a      	bne.n	8002a98 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d122      	bne.n	8002a98 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d11a      	bne.n	8002a98 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	0a5b      	lsrs	r3, r3, #9
 8002a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d111      	bne.n	8002a98 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	0c1b      	lsrs	r3, r3, #16
 8002a78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d108      	bne.n	8002a98 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	0e1b      	lsrs	r3, r3, #24
 8002a8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3730      	adds	r7, #48	; 0x30
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	58024400 	.word	0x58024400

08002aac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e19c      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b8a      	ldr	r3, [pc, #552]	; (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d910      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b87      	ldr	r3, [pc, #540]	; (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 020f 	bic.w	r2, r3, #15
 8002ad6:	4985      	ldr	r1, [pc, #532]	; (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b83      	ldr	r3, [pc, #524]	; (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e184      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d010      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	4b7b      	ldr	r3, [pc, #492]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d908      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b0c:	4b78      	ldr	r3, [pc, #480]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	4975      	ldr	r1, [pc, #468]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d010      	beq.n	8002b4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	4b70      	ldr	r3, [pc, #448]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d908      	bls.n	8002b4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b3a:	4b6d      	ldr	r3, [pc, #436]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	496a      	ldr	r1, [pc, #424]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d010      	beq.n	8002b7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	4b64      	ldr	r3, [pc, #400]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d908      	bls.n	8002b7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b68:	4b61      	ldr	r3, [pc, #388]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	495e      	ldr	r1, [pc, #376]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d010      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	4b59      	ldr	r3, [pc, #356]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d908      	bls.n	8002ba8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b96:	4b56      	ldr	r3, [pc, #344]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	4953      	ldr	r1, [pc, #332]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d010      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	4b4d      	ldr	r3, [pc, #308]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d908      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc4:	4b4a      	ldr	r3, [pc, #296]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f023 020f 	bic.w	r2, r3, #15
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4947      	ldr	r1, [pc, #284]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d055      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002be2:	4b43      	ldr	r3, [pc, #268]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4940      	ldr	r1, [pc, #256]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bfc:	4b3c      	ldr	r3, [pc, #240]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d121      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0f6      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d107      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c14:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d115      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0ea      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d107      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c2c:	4b30      	ldr	r3, [pc, #192]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0de      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c3c:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0d6      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c4c:	4b28      	ldr	r3, [pc, #160]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f023 0207 	bic.w	r2, r3, #7
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4925      	ldr	r1, [pc, #148]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fa3b 	bl	80010d8 <HAL_GetTick>
 8002c62:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c64:	e00a      	b.n	8002c7c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c66:	f7fe fa37 	bl	80010d8 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e0be      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d1eb      	bne.n	8002c66 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d010      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d208      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f023 020f 	bic.w	r2, r3, #15
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	490e      	ldr	r1, [pc, #56]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d214      	bcs.n	8002cf4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 020f 	bic.w	r2, r3, #15
 8002cd2:	4906      	ldr	r1, [pc, #24]	; (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b04      	ldr	r3, [pc, #16]	; (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e086      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
 8002cec:	52002000 	.word	0x52002000
 8002cf0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d010      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	4b3f      	ldr	r3, [pc, #252]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d208      	bcs.n	8002d22 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d10:	4b3c      	ldr	r3, [pc, #240]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	4939      	ldr	r1, [pc, #228]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d010      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d208      	bcs.n	8002d50 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d3e:	4b31      	ldr	r3, [pc, #196]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	492e      	ldr	r1, [pc, #184]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d010      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	4b28      	ldr	r3, [pc, #160]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d208      	bcs.n	8002d7e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d6c:	4b25      	ldr	r3, [pc, #148]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	4922      	ldr	r1, [pc, #136]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d010      	beq.n	8002dac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d208      	bcs.n	8002dac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	4917      	ldr	r1, [pc, #92]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dac:	f000 f834 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	4912      	ldr	r1, [pc, #72]	; (8002e08 <HAL_RCC_ClockConfig+0x35c>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	4a0d      	ldr	r2, [pc, #52]	; (8002e08 <HAL_RCC_ClockConfig+0x35c>)
 8002dd4:	5cd3      	ldrb	r3, [r2, r3]
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8002de0:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <HAL_RCC_ClockConfig+0x360>)
 8002de2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002de4:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <HAL_RCC_ClockConfig+0x364>)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_RCC_ClockConfig+0x368>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe f928 	bl	8001044 <HAL_InitTick>
 8002df4:	4603      	mov	r3, r0
 8002df6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	58024400 	.word	0x58024400
 8002e08:	08005eb4 	.word	0x08005eb4
 8002e0c:	24000004 	.word	0x24000004
 8002e10:	24000000 	.word	0x24000000
 8002e14:	24000008 	.word	0x24000008

08002e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	; 0x24
 8002e1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e1e:	4bb3      	ldr	r3, [pc, #716]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e26:	2b18      	cmp	r3, #24
 8002e28:	f200 8155 	bhi.w	80030d6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e2c:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e32:	bf00      	nop
 8002e34:	08002e99 	.word	0x08002e99
 8002e38:	080030d7 	.word	0x080030d7
 8002e3c:	080030d7 	.word	0x080030d7
 8002e40:	080030d7 	.word	0x080030d7
 8002e44:	080030d7 	.word	0x080030d7
 8002e48:	080030d7 	.word	0x080030d7
 8002e4c:	080030d7 	.word	0x080030d7
 8002e50:	080030d7 	.word	0x080030d7
 8002e54:	08002ebf 	.word	0x08002ebf
 8002e58:	080030d7 	.word	0x080030d7
 8002e5c:	080030d7 	.word	0x080030d7
 8002e60:	080030d7 	.word	0x080030d7
 8002e64:	080030d7 	.word	0x080030d7
 8002e68:	080030d7 	.word	0x080030d7
 8002e6c:	080030d7 	.word	0x080030d7
 8002e70:	080030d7 	.word	0x080030d7
 8002e74:	08002ec5 	.word	0x08002ec5
 8002e78:	080030d7 	.word	0x080030d7
 8002e7c:	080030d7 	.word	0x080030d7
 8002e80:	080030d7 	.word	0x080030d7
 8002e84:	080030d7 	.word	0x080030d7
 8002e88:	080030d7 	.word	0x080030d7
 8002e8c:	080030d7 	.word	0x080030d7
 8002e90:	080030d7 	.word	0x080030d7
 8002e94:	08002ecb 	.word	0x08002ecb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e98:	4b94      	ldr	r3, [pc, #592]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d009      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ea4:	4b91      	ldr	r3, [pc, #580]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	08db      	lsrs	r3, r3, #3
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	4a90      	ldr	r2, [pc, #576]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002eb6:	e111      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002eb8:	4b8d      	ldr	r3, [pc, #564]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eba:	61bb      	str	r3, [r7, #24]
    break;
 8002ebc:	e10e      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002ebe:	4b8d      	ldr	r3, [pc, #564]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ec0:	61bb      	str	r3, [r7, #24]
    break;
 8002ec2:	e10b      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002ec4:	4b8c      	ldr	r3, [pc, #560]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ec6:	61bb      	str	r3, [r7, #24]
    break;
 8002ec8:	e108      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002eca:	4b88      	ldr	r3, [pc, #544]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002ed4:	4b85      	ldr	r3, [pc, #532]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ede:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ee0:	4b82      	ldr	r3, [pc, #520]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002eea:	4b80      	ldr	r3, [pc, #512]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eee:	08db      	lsrs	r3, r3, #3
 8002ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	ee07 3a90 	vmov	s15, r3
 8002efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f02:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80e1 	beq.w	80030d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	f000 8083 	beq.w	800301c <HAL_RCC_GetSysClockFreq+0x204>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	f200 80a1 	bhi.w	8003060 <HAL_RCC_GetSysClockFreq+0x248>
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x114>
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d056      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f2a:	e099      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f2c:	4b6f      	ldr	r3, [pc, #444]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d02d      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f38:	4b6c      	ldr	r3, [pc, #432]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	08db      	lsrs	r3, r3, #3
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	4a6b      	ldr	r2, [pc, #428]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
 8002f48:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	ee07 3a90 	vmov	s15, r3
 8002f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f62:	4b62      	ldr	r3, [pc, #392]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f76:	eddf 5a61 	vldr	s11, [pc, #388]	; 80030fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002f92:	e087      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003100 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa6:	4b51      	ldr	r3, [pc, #324]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80030fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fd6:	e065      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003104 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fea:	4b40      	ldr	r3, [pc, #256]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff2:	ee07 3a90 	vmov	s15, r3
 8002ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ffe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80030fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800300a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800300e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800301a:	e043      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003026:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003108 <HAL_RCC_GetSysClockFreq+0x2f0>
 800302a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800302e:	4b2f      	ldr	r3, [pc, #188]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800303e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003042:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80030fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800304a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800304e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800305e:	e021      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003104 <HAL_RCC_GetSysClockFreq+0x2ec>
 800306e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003072:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003082:	ed97 6a02 	vldr	s12, [r7, #8]
 8003086:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80030fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800308a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800308e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800309a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80030a4:	4b11      	ldr	r3, [pc, #68]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	0a5b      	lsrs	r3, r3, #9
 80030aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030ae:	3301      	adds	r3, #1
 80030b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	ee07 3a90 	vmov	s15, r3
 80030b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80030c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030c8:	ee17 3a90 	vmov	r3, s15
 80030cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80030ce:	e005      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
    break;
 80030d4:	e002      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80030d6:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030d8:	61bb      	str	r3, [r7, #24]
    break;
 80030da:	bf00      	nop
  }

  return sysclockfreq;
 80030dc:	69bb      	ldr	r3, [r7, #24]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3724      	adds	r7, #36	; 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	58024400 	.word	0x58024400
 80030f0:	03d09000 	.word	0x03d09000
 80030f4:	003d0900 	.word	0x003d0900
 80030f8:	007a1200 	.word	0x007a1200
 80030fc:	46000000 	.word	0x46000000
 8003100:	4c742400 	.word	0x4c742400
 8003104:	4a742400 	.word	0x4a742400
 8003108:	4af42400 	.word	0x4af42400

0800310c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003112:	f7ff fe81 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8003116:	4602      	mov	r2, r0
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <HAL_RCC_GetHCLKFreq+0x50>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	490f      	ldr	r1, [pc, #60]	; (8003160 <HAL_RCC_GetHCLKFreq+0x54>)
 8003124:	5ccb      	ldrb	r3, [r1, r3]
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	fa22 f303 	lsr.w	r3, r2, r3
 800312e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003130:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_RCC_GetHCLKFreq+0x50>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	4a09      	ldr	r2, [pc, #36]	; (8003160 <HAL_RCC_GetHCLKFreq+0x54>)
 800313a:	5cd3      	ldrb	r3, [r2, r3]
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	fa22 f303 	lsr.w	r3, r2, r3
 8003146:	4a07      	ldr	r2, [pc, #28]	; (8003164 <HAL_RCC_GetHCLKFreq+0x58>)
 8003148:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800314a:	4a07      	ldr	r2, [pc, #28]	; (8003168 <HAL_RCC_GetHCLKFreq+0x5c>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <HAL_RCC_GetHCLKFreq+0x58>)
 8003152:	681b      	ldr	r3, [r3, #0]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	58024400 	.word	0x58024400
 8003160:	08005eb4 	.word	0x08005eb4
 8003164:	24000004 	.word	0x24000004
 8003168:	24000000 	.word	0x24000000

0800316c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003170:	f7ff ffcc 	bl	800310c <HAL_RCC_GetHCLKFreq>
 8003174:	4602      	mov	r2, r0
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	4904      	ldr	r1, [pc, #16]	; (8003194 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003182:	5ccb      	ldrb	r3, [r1, r3]
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}
 8003190:	58024400 	.word	0x58024400
 8003194:	08005eb4 	.word	0x08005eb4

08003198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800319c:	f7ff ffb6 	bl	800310c <HAL_RCC_GetHCLKFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4904      	ldr	r1, [pc, #16]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	58024400 	.word	0x58024400
 80031c0:	08005eb4 	.word	0x08005eb4

080031c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031cc:	2300      	movs	r3, #0
 80031ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031d0:	2300      	movs	r3, #0
 80031d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d03f      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031e8:	d02a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031ee:	d824      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031f4:	d018      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031fa:	d81e      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003204:	d007      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003206:	e018      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003208:	4bab      	ldr	r3, [pc, #684]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	4aaa      	ldr	r2, [pc, #680]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800320e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003212:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003214:	e015      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3304      	adds	r3, #4
 800321a:	2102      	movs	r1, #2
 800321c:	4618      	mov	r0, r3
 800321e:	f001 f9cf 	bl	80045c0 <RCCEx_PLL2_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003226:	e00c      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3324      	adds	r3, #36	; 0x24
 800322c:	2102      	movs	r1, #2
 800322e:	4618      	mov	r0, r3
 8003230:	f001 fa78 	bl	8004724 <RCCEx_PLL3_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003238:	e003      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
      break;
 800323e:	e000      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003242:	7dfb      	ldrb	r3, [r7, #23]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003248:	4b9b      	ldr	r3, [pc, #620]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800324a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003254:	4998      	ldr	r1, [pc, #608]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	650b      	str	r3, [r1, #80]	; 0x50
 800325a:	e001      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325c:	7dfb      	ldrb	r3, [r7, #23]
 800325e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d03d      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	2b04      	cmp	r3, #4
 8003272:	d826      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003274:	a201      	add	r2, pc, #4	; (adr r2, 800327c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	08003291 	.word	0x08003291
 8003280:	0800329f 	.word	0x0800329f
 8003284:	080032b1 	.word	0x080032b1
 8003288:	080032c9 	.word	0x080032c9
 800328c:	080032c9 	.word	0x080032c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003290:	4b89      	ldr	r3, [pc, #548]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	4a88      	ldr	r2, [pc, #544]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800329a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800329c:	e015      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 f98b 	bl	80045c0 <RCCEx_PLL2_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032ae:	e00c      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3324      	adds	r3, #36	; 0x24
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 fa34 	bl	8004724 <RCCEx_PLL3_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	75fb      	strb	r3, [r7, #23]
      break;
 80032c6:	e000      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80032c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d109      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032d0:	4b79      	ldr	r3, [pc, #484]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	f023 0207 	bic.w	r2, r3, #7
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	4976      	ldr	r1, [pc, #472]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	650b      	str	r3, [r1, #80]	; 0x50
 80032e2:	e001      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
 80032e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d042      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032fc:	d02b      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80032fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003302:	d825      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003304:	2bc0      	cmp	r3, #192	; 0xc0
 8003306:	d028      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003308:	2bc0      	cmp	r3, #192	; 0xc0
 800330a:	d821      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800330c:	2b80      	cmp	r3, #128	; 0x80
 800330e:	d016      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003310:	2b80      	cmp	r3, #128	; 0x80
 8003312:	d81d      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	d007      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800331c:	e018      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800331e:	4b66      	ldr	r3, [pc, #408]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	4a65      	ldr	r2, [pc, #404]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003328:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800332a:	e017      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3304      	adds	r3, #4
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f001 f944 	bl	80045c0 <RCCEx_PLL2_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800333c:	e00e      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3324      	adds	r3, #36	; 0x24
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f001 f9ed 	bl	8004724 <RCCEx_PLL3_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800334e:	e005      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	75fb      	strb	r3, [r7, #23]
      break;
 8003354:	e002      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800335a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800335c:	7dfb      	ldrb	r3, [r7, #23]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003362:	4b55      	ldr	r3, [pc, #340]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003366:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336e:	4952      	ldr	r1, [pc, #328]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003370:	4313      	orrs	r3, r2
 8003372:	650b      	str	r3, [r1, #80]	; 0x50
 8003374:	e001      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003376:	7dfb      	ldrb	r3, [r7, #23]
 8003378:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003382:	2b00      	cmp	r3, #0
 8003384:	d049      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800338c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003390:	d030      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003392:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003396:	d82a      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003398:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800339c:	d02c      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800339e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80033a2:	d824      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a8:	d018      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80033aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ae:	d81e      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80033b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033b8:	d007      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 80033ba:	e018      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033bc:	4b3e      	ldr	r3, [pc, #248]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	4a3d      	ldr	r2, [pc, #244]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033c8:	e017      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3304      	adds	r3, #4
 80033ce:	2100      	movs	r1, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f001 f8f5 	bl	80045c0 <RCCEx_PLL2_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80033da:	e00e      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3324      	adds	r3, #36	; 0x24
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f001 f99e 	bl	8004724 <RCCEx_PLL3_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033ec:	e005      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
      break;
 80033f2:	e002      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80033f4:	bf00      	nop
 80033f6:	e000      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80033f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003400:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003404:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800340e:	492a      	ldr	r1, [pc, #168]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003410:	4313      	orrs	r3, r2
 8003412:	658b      	str	r3, [r1, #88]	; 0x58
 8003414:	e001      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003416:	7dfb      	ldrb	r3, [r7, #23]
 8003418:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003422:	2b00      	cmp	r3, #0
 8003424:	d04c      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800342c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003430:	d030      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003432:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003436:	d82a      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003438:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800343c:	d02c      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800343e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003442:	d824      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003444:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003448:	d018      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800344a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800344e:	d81e      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003458:	d007      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800345a:	e018      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800345c:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	4a15      	ldr	r2, [pc, #84]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003466:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003468:	e017      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f001 f8a5 	bl	80045c0 <RCCEx_PLL2_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800347a:	e00e      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3324      	adds	r3, #36	; 0x24
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f001 f94e 	bl	8004724 <RCCEx_PLL3_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800348c:	e005      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]
      break;
 8003492:	e002      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003494:	bf00      	nop
 8003496:	e000      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800349a:	7dfb      	ldrb	r3, [r7, #23]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10d      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034ae:	4902      	ldr	r1, [pc, #8]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	658b      	str	r3, [r1, #88]	; 0x58
 80034b4:	e004      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80034b6:	bf00      	nop
 80034b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d032      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d0:	2b30      	cmp	r3, #48	; 0x30
 80034d2:	d01c      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80034d4:	2b30      	cmp	r3, #48	; 0x30
 80034d6:	d817      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d00c      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d813      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d016      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d10f      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e8:	4baf      	ldr	r3, [pc, #700]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	4aae      	ldr	r2, [pc, #696]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80034f4:	e00e      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3304      	adds	r3, #4
 80034fa:	2102      	movs	r1, #2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 f85f 	bl	80045c0 <RCCEx_PLL2_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003506:	e005      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	75fb      	strb	r3, [r7, #23]
      break;
 800350c:	e002      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800350e:	bf00      	nop
 8003510:	e000      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003514:	7dfb      	ldrb	r3, [r7, #23]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800351a:	4ba3      	ldr	r3, [pc, #652]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800351c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003526:	49a0      	ldr	r1, [pc, #640]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003528:	4313      	orrs	r3, r2
 800352a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800352c:	e001      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352e:	7dfb      	ldrb	r3, [r7, #23]
 8003530:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d047      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003546:	d030      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800354c:	d82a      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800354e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003552:	d02c      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003554:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003558:	d824      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800355a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355e:	d018      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003564:	d81e      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800356a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356e:	d007      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003570:	e018      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003572:	4b8d      	ldr	r3, [pc, #564]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	4a8c      	ldr	r2, [pc, #560]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800357c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800357e:	e017      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f001 f81a 	bl	80045c0 <RCCEx_PLL2_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003590:	e00e      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3324      	adds	r3, #36	; 0x24
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f001 f8c3 	bl	8004724 <RCCEx_PLL3_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035a2:	e005      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	75fb      	strb	r3, [r7, #23]
      break;
 80035a8:	e002      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80035aa:	bf00      	nop
 80035ac:	e000      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80035ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035b6:	4b7c      	ldr	r3, [pc, #496]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ba:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	4979      	ldr	r1, [pc, #484]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	650b      	str	r3, [r1, #80]	; 0x50
 80035c8:	e001      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ca:	7dfb      	ldrb	r3, [r7, #23]
 80035cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d049      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e2:	d02e      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80035e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e8:	d828      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80035ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035ee:	d02a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80035f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035f4:	d822      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80035f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035fa:	d026      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80035fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003600:	d81c      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003602:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003606:	d010      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800360c:	d816      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d01d      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003616:	d111      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	2101      	movs	r1, #1
 800361e:	4618      	mov	r0, r3
 8003620:	f000 ffce 	bl	80045c0 <RCCEx_PLL2_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003628:	e012      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3324      	adds	r3, #36	; 0x24
 800362e:	2101      	movs	r1, #1
 8003630:	4618      	mov	r0, r3
 8003632:	f001 f877 	bl	8004724 <RCCEx_PLL3_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800363a:	e009      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	75fb      	strb	r3, [r7, #23]
      break;
 8003640:	e006      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003642:	bf00      	nop
 8003644:	e004      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003646:	bf00      	nop
 8003648:	e002      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800364e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003650:	7dfb      	ldrb	r3, [r7, #23]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003656:	4b54      	ldr	r3, [pc, #336]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003662:	4951      	ldr	r1, [pc, #324]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003664:	4313      	orrs	r3, r2
 8003666:	650b      	str	r3, [r1, #80]	; 0x50
 8003668:	e001      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d04b      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003684:	d02e      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800368a:	d828      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003690:	d02a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003696:	d822      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003698:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800369c:	d026      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x528>
 800369e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036a2:	d81c      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80036a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a8:	d010      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x508>
 80036aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ae:	d816      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01d      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80036b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036b8:	d111      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3304      	adds	r3, #4
 80036be:	2101      	movs	r1, #1
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 ff7d 	bl	80045c0 <RCCEx_PLL2_Config>
 80036c6:	4603      	mov	r3, r0
 80036c8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80036ca:	e012      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3324      	adds	r3, #36	; 0x24
 80036d0:	2101      	movs	r1, #1
 80036d2:	4618      	mov	r0, r3
 80036d4:	f001 f826 	bl	8004724 <RCCEx_PLL3_Config>
 80036d8:	4603      	mov	r3, r0
 80036da:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80036dc:	e009      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	75fb      	strb	r3, [r7, #23]
      break;
 80036e2:	e006      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80036e4:	bf00      	nop
 80036e6:	e004      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80036e8:	bf00      	nop
 80036ea:	e002      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80036ec:	bf00      	nop
 80036ee:	e000      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80036f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80036f8:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003706:	4928      	ldr	r1, [pc, #160]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	658b      	str	r3, [r1, #88]	; 0x58
 800370c:	e001      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d02f      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003726:	d00e      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800372c:	d814      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d015      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003736:	d10f      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	4a1a      	ldr	r2, [pc, #104]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800373e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003742:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003744:	e00c      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3304      	adds	r3, #4
 800374a:	2101      	movs	r1, #1
 800374c:	4618      	mov	r0, r3
 800374e:	f000 ff37 	bl	80045c0 <RCCEx_PLL2_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003756:	e003      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	75fb      	strb	r3, [r7, #23]
      break;
 800375c:	e000      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800375e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003772:	490d      	ldr	r1, [pc, #52]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003774:	4313      	orrs	r3, r2
 8003776:	650b      	str	r3, [r1, #80]	; 0x50
 8003778:	e001      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377a:	7dfb      	ldrb	r3, [r7, #23]
 800377c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d033      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	2b03      	cmp	r3, #3
 8003790:	d81c      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003792:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003798:	080037d3 	.word	0x080037d3
 800379c:	080037ad 	.word	0x080037ad
 80037a0:	080037bb 	.word	0x080037bb
 80037a4:	080037d3 	.word	0x080037d3
 80037a8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ac:	4bb8      	ldr	r3, [pc, #736]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	4ab7      	ldr	r2, [pc, #732]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80037b8:	e00c      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3304      	adds	r3, #4
 80037be:	2102      	movs	r1, #2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fefd 	bl	80045c0 <RCCEx_PLL2_Config>
 80037c6:	4603      	mov	r3, r0
 80037c8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80037ca:	e003      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	75fb      	strb	r3, [r7, #23]
      break;
 80037d0:	e000      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80037d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80037da:	4bad      	ldr	r3, [pc, #692]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	49aa      	ldr	r1, [pc, #680]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80037ec:	e001      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
 80037f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8086 	beq.w	800390c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003800:	4ba4      	ldr	r3, [pc, #656]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4aa3      	ldr	r2, [pc, #652]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800380c:	f7fd fc64 	bl	80010d8 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003812:	e009      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003814:	f7fd fc60 	bl	80010d8 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d902      	bls.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	75fb      	strb	r3, [r7, #23]
        break;
 8003826:	e005      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003828:	4b9a      	ldr	r3, [pc, #616]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0ef      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003834:	7dfb      	ldrb	r3, [r7, #23]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d166      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800383a:	4b95      	ldr	r3, [pc, #596]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800383c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003844:	4053      	eors	r3, r2
 8003846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384a:	2b00      	cmp	r3, #0
 800384c:	d013      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800384e:	4b90      	ldr	r3, [pc, #576]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003856:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003858:	4b8d      	ldr	r3, [pc, #564]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	4a8c      	ldr	r2, [pc, #560]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800385e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003862:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003864:	4b8a      	ldr	r3, [pc, #552]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	4a89      	ldr	r2, [pc, #548]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800386a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003870:	4a87      	ldr	r2, [pc, #540]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800387c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003880:	d115      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fd fc29 	bl	80010d8 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003888:	e00b      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fd fc25 	bl	80010d8 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	; 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d902      	bls.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	75fb      	strb	r3, [r7, #23]
            break;
 80038a0:	e005      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038a2:	4b7b      	ldr	r3, [pc, #492]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0ed      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d126      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038c2:	d10d      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80038c4:	4b72      	ldr	r3, [pc, #456]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038d2:	0919      	lsrs	r1, r3, #4
 80038d4:	4b70      	ldr	r3, [pc, #448]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80038d6:	400b      	ands	r3, r1
 80038d8:	496d      	ldr	r1, [pc, #436]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	610b      	str	r3, [r1, #16]
 80038de:	e005      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x728>
 80038e0:	4b6b      	ldr	r3, [pc, #428]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	4a6a      	ldr	r2, [pc, #424]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80038ea:	6113      	str	r3, [r2, #16]
 80038ec:	4b68      	ldr	r3, [pc, #416]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fa:	4965      	ldr	r1, [pc, #404]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	670b      	str	r3, [r1, #112]	; 0x70
 8003900:	e004      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003902:	7dfb      	ldrb	r3, [r7, #23]
 8003904:	75bb      	strb	r3, [r7, #22]
 8003906:	e001      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d07e      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800391c:	2b28      	cmp	r3, #40	; 0x28
 800391e:	d867      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003920:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	080039f7 	.word	0x080039f7
 800392c:	080039f1 	.word	0x080039f1
 8003930:	080039f1 	.word	0x080039f1
 8003934:	080039f1 	.word	0x080039f1
 8003938:	080039f1 	.word	0x080039f1
 800393c:	080039f1 	.word	0x080039f1
 8003940:	080039f1 	.word	0x080039f1
 8003944:	080039f1 	.word	0x080039f1
 8003948:	080039cd 	.word	0x080039cd
 800394c:	080039f1 	.word	0x080039f1
 8003950:	080039f1 	.word	0x080039f1
 8003954:	080039f1 	.word	0x080039f1
 8003958:	080039f1 	.word	0x080039f1
 800395c:	080039f1 	.word	0x080039f1
 8003960:	080039f1 	.word	0x080039f1
 8003964:	080039f1 	.word	0x080039f1
 8003968:	080039df 	.word	0x080039df
 800396c:	080039f1 	.word	0x080039f1
 8003970:	080039f1 	.word	0x080039f1
 8003974:	080039f1 	.word	0x080039f1
 8003978:	080039f1 	.word	0x080039f1
 800397c:	080039f1 	.word	0x080039f1
 8003980:	080039f1 	.word	0x080039f1
 8003984:	080039f1 	.word	0x080039f1
 8003988:	080039f7 	.word	0x080039f7
 800398c:	080039f1 	.word	0x080039f1
 8003990:	080039f1 	.word	0x080039f1
 8003994:	080039f1 	.word	0x080039f1
 8003998:	080039f1 	.word	0x080039f1
 800399c:	080039f1 	.word	0x080039f1
 80039a0:	080039f1 	.word	0x080039f1
 80039a4:	080039f1 	.word	0x080039f1
 80039a8:	080039f7 	.word	0x080039f7
 80039ac:	080039f1 	.word	0x080039f1
 80039b0:	080039f1 	.word	0x080039f1
 80039b4:	080039f1 	.word	0x080039f1
 80039b8:	080039f1 	.word	0x080039f1
 80039bc:	080039f1 	.word	0x080039f1
 80039c0:	080039f1 	.word	0x080039f1
 80039c4:	080039f1 	.word	0x080039f1
 80039c8:	080039f7 	.word	0x080039f7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3304      	adds	r3, #4
 80039d0:	2101      	movs	r1, #1
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fdf4 	bl	80045c0 <RCCEx_PLL2_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80039dc:	e00c      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3324      	adds	r3, #36	; 0x24
 80039e2:	2101      	movs	r1, #1
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fe9d 	bl	8004724 <RCCEx_PLL3_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80039ee:	e003      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	75fb      	strb	r3, [r7, #23]
      break;
 80039f4:	e000      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80039f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80039fe:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a02:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a0a:	4921      	ldr	r1, [pc, #132]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	654b      	str	r3, [r1, #84]	; 0x54
 8003a10:	e001      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d03e      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a26:	2b05      	cmp	r3, #5
 8003a28:	d820      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003a2a:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a30:	08003a73 	.word	0x08003a73
 8003a34:	08003a49 	.word	0x08003a49
 8003a38:	08003a5b 	.word	0x08003a5b
 8003a3c:	08003a73 	.word	0x08003a73
 8003a40:	08003a73 	.word	0x08003a73
 8003a44:	08003a73 	.word	0x08003a73
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fdb6 	bl	80045c0 <RCCEx_PLL2_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003a58:	e00c      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3324      	adds	r3, #36	; 0x24
 8003a5e:	2101      	movs	r1, #1
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fe5f 	bl	8004724 <RCCEx_PLL3_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003a6a:	e003      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a70:	e000      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d110      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7e:	f023 0207 	bic.w	r2, r3, #7
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a86:	4902      	ldr	r1, [pc, #8]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	654b      	str	r3, [r1, #84]	; 0x54
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003a8e:	bf00      	nop
 8003a90:	58024400 	.word	0x58024400
 8003a94:	58024800 	.word	0x58024800
 8003a98:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d039      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	2b05      	cmp	r3, #5
 8003ab4:	d820      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003aff 	.word	0x08003aff
 8003ac0:	08003ad5 	.word	0x08003ad5
 8003ac4:	08003ae7 	.word	0x08003ae7
 8003ac8:	08003aff 	.word	0x08003aff
 8003acc:	08003aff 	.word	0x08003aff
 8003ad0:	08003aff 	.word	0x08003aff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	2101      	movs	r1, #1
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fd70 	bl	80045c0 <RCCEx_PLL2_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ae4:	e00c      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3324      	adds	r3, #36	; 0x24
 8003aea:	2101      	movs	r1, #1
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fe19 	bl	8004724 <RCCEx_PLL3_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003af6:	e003      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	75fb      	strb	r3, [r7, #23]
      break;
 8003afc:	e000      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b06:	4bb7      	ldr	r3, [pc, #732]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	f023 0207 	bic.w	r2, r3, #7
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	49b3      	ldr	r1, [pc, #716]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	658b      	str	r3, [r1, #88]	; 0x58
 8003b1a:	e001      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d04b      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b36:	d02e      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b3c:	d828      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b42:	d02a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b48:	d822      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003b4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b4e:	d026      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003b50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b54:	d81c      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5a:	d010      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b60:	d816      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d01d      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003b66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b6a:	d111      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fd24 	bl	80045c0 <RCCEx_PLL2_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b7c:	e012      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3324      	adds	r3, #36	; 0x24
 8003b82:	2102      	movs	r1, #2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fdcd 	bl	8004724 <RCCEx_PLL3_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b8e:	e009      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	75fb      	strb	r3, [r7, #23]
      break;
 8003b94:	e006      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003b96:	bf00      	nop
 8003b98:	e004      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e002      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003b9e:	bf00      	nop
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003baa:	4b8e      	ldr	r3, [pc, #568]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb8:	498a      	ldr	r1, [pc, #552]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	654b      	str	r3, [r1, #84]	; 0x54
 8003bbe:	e001      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc0:	7dfb      	ldrb	r3, [r7, #23]
 8003bc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d04b      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003bda:	d02e      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003bdc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003be0:	d828      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be6:	d02a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bec:	d822      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003bee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bf2:	d026      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003bf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bf8:	d81c      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bfe:	d010      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c04:	d816      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d01d      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0e:	d111      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	2100      	movs	r1, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fcd2 	bl	80045c0 <RCCEx_PLL2_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c20:	e012      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3324      	adds	r3, #36	; 0x24
 8003c26:	2102      	movs	r1, #2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fd7b 	bl	8004724 <RCCEx_PLL3_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c32:	e009      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	75fb      	strb	r3, [r7, #23]
      break;
 8003c38:	e006      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e004      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e002      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c4e:	4b65      	ldr	r3, [pc, #404]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c5c:	4961      	ldr	r1, [pc, #388]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	658b      	str	r3, [r1, #88]	; 0x58
 8003c62:	e001      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d04b      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c7a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c7e:	d02e      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003c80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c84:	d828      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8a:	d02a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c90:	d822      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003c92:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c96:	d026      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003c98:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c9c:	d81c      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ca2:	d010      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ca8:	d816      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01d      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb2:	d111      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fc80 	bl	80045c0 <RCCEx_PLL2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003cc4:	e012      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3324      	adds	r3, #36	; 0x24
 8003cca:	2102      	movs	r1, #2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fd29 	bl	8004724 <RCCEx_PLL3_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003cd6:	e009      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	75fb      	strb	r3, [r7, #23]
      break;
 8003cdc:	e006      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e004      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003ce2:	bf00      	nop
 8003ce4:	e002      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e000      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003cf2:	4b3c      	ldr	r3, [pc, #240]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d00:	4938      	ldr	r1, [pc, #224]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	658b      	str	r3, [r1, #88]	; 0x58
 8003d06:	e001      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d22:	d10a      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3324      	adds	r3, #36	; 0x24
 8003d28:	2102      	movs	r1, #2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fcfa 	bl	8004724 <RCCEx_PLL3_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d3a:	4b2a      	ldr	r3, [pc, #168]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d48:	4926      	ldr	r1, [pc, #152]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0310 	and.w	r3, r3, #16
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d64:	d10a      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3324      	adds	r3, #36	; 0x24
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fcd9 	bl	8004724 <RCCEx_PLL3_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8a:	4916      	ldr	r1, [pc, #88]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d036      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003da2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003da6:	d01f      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dac:	d817      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db6:	d009      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003db8:	e011      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fbfd 	bl	80045c0 <RCCEx_PLL2_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003dca:	e00e      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3324      	adds	r3, #36	; 0x24
 8003dd0:	2102      	movs	r1, #2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fca6 	bl	8004724 <RCCEx_PLL3_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ddc:	e005      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
      break;
 8003de2:	e002      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003de4:	58024400 	.word	0x58024400
      break;
 8003de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003df0:	4b93      	ldr	r3, [pc, #588]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dfe:	4990      	ldr	r1, [pc, #576]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	658b      	str	r3, [r1, #88]	; 0x58
 8003e04:	e001      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
 8003e08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d033      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e20:	d01c      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003e22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e26:	d816      	bhi.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e2c:	d003      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003e2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e32:	d007      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003e34:	e00f      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e36:	4b82      	ldr	r3, [pc, #520]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	4a81      	ldr	r2, [pc, #516]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003e42:	e00c      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3324      	adds	r3, #36	; 0x24
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fc6a 	bl	8004724 <RCCEx_PLL3_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003e54:	e003      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5a:	e000      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e64:	4b76      	ldr	r3, [pc, #472]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e72:	4973      	ldr	r1, [pc, #460]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	654b      	str	r3, [r1, #84]	; 0x54
 8003e78:	e001      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d029      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e96:	d007      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003e98:	e00f      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e9a:	4b69      	ldr	r3, [pc, #420]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	4a68      	ldr	r2, [pc, #416]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ea6:	e00b      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	2102      	movs	r1, #2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fb86 	bl	80045c0 <RCCEx_PLL2_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003eb8:	e002      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003ec6:	4b5e      	ldr	r3, [pc, #376]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed2:	495b      	ldr	r1, [pc, #364]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ed8:	e001      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
 8003edc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3324      	adds	r3, #36	; 0x24
 8003eee:	2102      	movs	r1, #2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fc17 	bl	8004724 <RCCEx_PLL3_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d030      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f14:	d017      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003f16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f1a:	d811      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f20:	d013      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f26:	d80b      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d010      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f30:	d106      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f32:	4b43      	ldr	r3, [pc, #268]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	4a42      	ldr	r2, [pc, #264]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003f3e:	e007      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	75fb      	strb	r3, [r7, #23]
      break;
 8003f44:	e004      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003f46:	bf00      	nop
 8003f48:	e002      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e000      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f50:	7dfb      	ldrb	r3, [r7, #23]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f56:	4b3a      	ldr	r3, [pc, #232]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f62:	4937      	ldr	r1, [pc, #220]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	654b      	str	r3, [r1, #84]	; 0x54
 8003f68:	e001      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
 8003f6c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f7a:	4b31      	ldr	r3, [pc, #196]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	492e      	ldr	r1, [pc, #184]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d009      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f98:	4b29      	ldr	r3, [pc, #164]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fa6:	4926      	ldr	r1, [pc, #152]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fb8:	4b21      	ldr	r3, [pc, #132]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fbc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc4:	491e      	ldr	r1, [pc, #120]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fd6:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	4a19      	ldr	r2, [pc, #100]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fe0:	6113      	str	r3, [r2, #16]
 8003fe2:	4b17      	ldr	r3, [pc, #92]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003fec:	4914      	ldr	r1, [pc, #80]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	da08      	bge.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ffe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004006:	490e      	ldr	r1, [pc, #56]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004008:	4313      	orrs	r3, r2
 800400a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d009      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004018:	4b09      	ldr	r3, [pc, #36]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800401a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	4906      	ldr	r1, [pc, #24]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004028:	4313      	orrs	r3, r2
 800402a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800402c:	7dbb      	ldrb	r3, [r7, #22]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	e000      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	58024400 	.word	0x58024400

08004044 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004048:	f7ff f860 	bl	800310c <HAL_RCC_GetHCLKFreq>
 800404c:	4602      	mov	r2, r0
 800404e:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	4904      	ldr	r1, [pc, #16]	; (800406c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800405a:	5ccb      	ldrb	r3, [r1, r3]
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004064:	4618      	mov	r0, r3
 8004066:	bd80      	pop	{r7, pc}
 8004068:	58024400 	.word	0x58024400
 800406c:	08005eb4 	.word	0x08005eb4

08004070 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004070:	b480      	push	{r7}
 8004072:	b089      	sub	sp, #36	; 0x24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004078:	4ba1      	ldr	r3, [pc, #644]	; (8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004082:	4b9f      	ldr	r3, [pc, #636]	; (8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	0b1b      	lsrs	r3, r3, #12
 8004088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800408c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800408e:	4b9c      	ldr	r3, [pc, #624]	; (8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800409a:	4b99      	ldr	r3, [pc, #612]	; (8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800409c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409e:	08db      	lsrs	r3, r3, #3
 80040a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	fb02 f303 	mul.w	r3, r2, r3
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8111 	beq.w	80042e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	f000 8083 	beq.w	80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	f200 80a1 	bhi.w	8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d056      	beq.n	8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80040da:	e099      	b.n	8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040dc:	4b88      	ldr	r3, [pc, #544]	; (8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d02d      	beq.n	8004144 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80040e8:	4b85      	ldr	r3, [pc, #532]	; (8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	08db      	lsrs	r3, r3, #3
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	4a84      	ldr	r2, [pc, #528]	; (8004304 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
 80040f8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	ee07 3a90 	vmov	s15, r3
 8004100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004112:	4b7b      	ldr	r3, [pc, #492]	; (8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004122:	ed97 6a03 	vldr	s12, [r7, #12]
 8004126:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800412a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800412e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800413a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004142:	e087      	b.n	8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800430c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004156:	4b6a      	ldr	r3, [pc, #424]	; (8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004166:	ed97 6a03 	vldr	s12, [r7, #12]
 800416a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800416e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800417a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800417e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004182:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004186:	e065      	b.n	8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004192:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419a:	4b59      	ldr	r3, [pc, #356]	; (8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041ca:	e043      	b.n	8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	ee07 3a90 	vmov	s15, r3
 80041d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80041da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041de:	4b48      	ldr	r3, [pc, #288]	; (8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e6:	ee07 3a90 	vmov	s15, r3
 80041ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80041f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800420a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800420e:	e021      	b.n	8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	ee07 3a90 	vmov	s15, r3
 8004216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800421e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004222:	4b37      	ldr	r3, [pc, #220]	; (8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004232:	ed97 6a03 	vldr	s12, [r7, #12]
 8004236:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800423a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800423e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800424a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800424e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004252:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004254:	4b2a      	ldr	r3, [pc, #168]	; (8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	0a5b      	lsrs	r3, r3, #9
 800425a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004266:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800426a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800426e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800427a:	ee17 2a90 	vmov	r2, s15
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004282:	4b1f      	ldr	r3, [pc, #124]	; (8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	0c1b      	lsrs	r3, r3, #16
 8004288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800428c:	ee07 3a90 	vmov	s15, r3
 8004290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004294:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004298:	ee37 7a87 	vadd.f32	s14, s15, s14
 800429c:	edd7 6a07 	vldr	s13, [r7, #28]
 80042a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042a8:	ee17 2a90 	vmov	r2, s15
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80042b0:	4b13      	ldr	r3, [pc, #76]	; (8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	0e1b      	lsrs	r3, r3, #24
 80042b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80042ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042d6:	ee17 2a90 	vmov	r2, s15
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80042de:	e008      	b.n	80042f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	609a      	str	r2, [r3, #8]
}
 80042f2:	bf00      	nop
 80042f4:	3724      	adds	r7, #36	; 0x24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	58024400 	.word	0x58024400
 8004304:	03d09000 	.word	0x03d09000
 8004308:	46000000 	.word	0x46000000
 800430c:	4c742400 	.word	0x4c742400
 8004310:	4a742400 	.word	0x4a742400
 8004314:	4af42400 	.word	0x4af42400

08004318 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004318:	b480      	push	{r7}
 800431a:	b089      	sub	sp, #36	; 0x24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004320:	4ba1      	ldr	r3, [pc, #644]	; (80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	f003 0303 	and.w	r3, r3, #3
 8004328:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800432a:	4b9f      	ldr	r3, [pc, #636]	; (80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800432c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432e:	0d1b      	lsrs	r3, r3, #20
 8004330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004334:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004336:	4b9c      	ldr	r3, [pc, #624]	; (80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	0a1b      	lsrs	r3, r3, #8
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004342:	4b99      	ldr	r3, [pc, #612]	; (80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	08db      	lsrs	r3, r3, #3
 8004348:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	fb02 f303 	mul.w	r3, r2, r3
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8111 	beq.w	8004588 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2b02      	cmp	r3, #2
 800436a:	f000 8083 	beq.w	8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b02      	cmp	r3, #2
 8004372:	f200 80a1 	bhi.w	80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d056      	beq.n	8004430 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004382:	e099      	b.n	80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004384:	4b88      	ldr	r3, [pc, #544]	; (80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d02d      	beq.n	80043ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004390:	4b85      	ldr	r3, [pc, #532]	; (80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	08db      	lsrs	r3, r3, #3
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	4a84      	ldr	r2, [pc, #528]	; (80045ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
 80043a0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	ee07 3a90 	vmov	s15, r3
 80043a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ba:	4b7b      	ldr	r3, [pc, #492]	; (80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80043ea:	e087      	b.n	80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80043fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fe:	4b6a      	ldr	r3, [pc, #424]	; (80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004412:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800441a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800441e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800442e:	e065      	b.n	80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800443e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004442:	4b59      	ldr	r3, [pc, #356]	; (80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004452:	ed97 6a03 	vldr	s12, [r7, #12]
 8004456:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800445a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004472:	e043      	b.n	80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004486:	4b48      	ldr	r3, [pc, #288]	; (80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800448e:	ee07 3a90 	vmov	s15, r3
 8004492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004496:	ed97 6a03 	vldr	s12, [r7, #12]
 800449a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800449e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044b6:	e021      	b.n	80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ca:	4b37      	ldr	r3, [pc, #220]	; (80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044da:	ed97 6a03 	vldr	s12, [r7, #12]
 80044de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80044fc:	4b2a      	ldr	r3, [pc, #168]	; (80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	0a5b      	lsrs	r3, r3, #9
 8004502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004512:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004516:	edd7 6a07 	vldr	s13, [r7, #28]
 800451a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800451e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004522:	ee17 2a90 	vmov	r2, s15
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800452a:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	0c1b      	lsrs	r3, r3, #16
 8004530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004534:	ee07 3a90 	vmov	s15, r3
 8004538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004540:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004544:	edd7 6a07 	vldr	s13, [r7, #28]
 8004548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800454c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004550:	ee17 2a90 	vmov	r2, s15
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004558:	4b13      	ldr	r3, [pc, #76]	; (80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	0e1b      	lsrs	r3, r3, #24
 800455e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800456e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004572:	edd7 6a07 	vldr	s13, [r7, #28]
 8004576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800457a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800457e:	ee17 2a90 	vmov	r2, s15
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004586:	e008      	b.n	800459a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	609a      	str	r2, [r3, #8]
}
 800459a:	bf00      	nop
 800459c:	3724      	adds	r7, #36	; 0x24
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	58024400 	.word	0x58024400
 80045ac:	03d09000 	.word	0x03d09000
 80045b0:	46000000 	.word	0x46000000
 80045b4:	4c742400 	.word	0x4c742400
 80045b8:	4a742400 	.word	0x4a742400
 80045bc:	4af42400 	.word	0x4af42400

080045c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045ce:	4b53      	ldr	r3, [pc, #332]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d101      	bne.n	80045de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e099      	b.n	8004712 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80045de:	4b4f      	ldr	r3, [pc, #316]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a4e      	ldr	r2, [pc, #312]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 80045e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ea:	f7fc fd75 	bl	80010d8 <HAL_GetTick>
 80045ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045f0:	e008      	b.n	8004604 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80045f2:	f7fc fd71 	bl	80010d8 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e086      	b.n	8004712 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004604:	4b45      	ldr	r3, [pc, #276]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f0      	bne.n	80045f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004610:	4b42      	ldr	r3, [pc, #264]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	031b      	lsls	r3, r3, #12
 800461e:	493f      	ldr	r1, [pc, #252]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 8004620:	4313      	orrs	r3, r2
 8004622:	628b      	str	r3, [r1, #40]	; 0x28
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	3b01      	subs	r3, #1
 800462a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	3b01      	subs	r3, #1
 8004634:	025b      	lsls	r3, r3, #9
 8004636:	b29b      	uxth	r3, r3
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	3b01      	subs	r3, #1
 8004640:	041b      	lsls	r3, r3, #16
 8004642:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	3b01      	subs	r3, #1
 800464e:	061b      	lsls	r3, r3, #24
 8004650:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004654:	4931      	ldr	r1, [pc, #196]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 8004656:	4313      	orrs	r3, r2
 8004658:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800465a:	4b30      	ldr	r3, [pc, #192]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	492d      	ldr	r1, [pc, #180]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 8004668:	4313      	orrs	r3, r2
 800466a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800466c:	4b2b      	ldr	r3, [pc, #172]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	f023 0220 	bic.w	r2, r3, #32
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	4928      	ldr	r1, [pc, #160]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 800467a:	4313      	orrs	r3, r2
 800467c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800467e:	4b27      	ldr	r3, [pc, #156]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	4a26      	ldr	r2, [pc, #152]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 8004684:	f023 0310 	bic.w	r3, r3, #16
 8004688:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800468a:	4b24      	ldr	r3, [pc, #144]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 800468c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800468e:	4b24      	ldr	r3, [pc, #144]	; (8004720 <RCCEx_PLL2_Config+0x160>)
 8004690:	4013      	ands	r3, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	69d2      	ldr	r2, [r2, #28]
 8004696:	00d2      	lsls	r2, r2, #3
 8004698:	4920      	ldr	r1, [pc, #128]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 800469a:	4313      	orrs	r3, r2
 800469c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800469e:	4b1f      	ldr	r3, [pc, #124]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	4a1e      	ldr	r2, [pc, #120]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 80046a4:	f043 0310 	orr.w	r3, r3, #16
 80046a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d106      	bne.n	80046be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046b0:	4b1a      	ldr	r3, [pc, #104]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	4a19      	ldr	r2, [pc, #100]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 80046b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046bc:	e00f      	b.n	80046de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d106      	bne.n	80046d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80046c4:	4b15      	ldr	r3, [pc, #84]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	4a14      	ldr	r2, [pc, #80]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 80046ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046d0:	e005      	b.n	80046de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	4a11      	ldr	r2, [pc, #68]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 80046d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a0e      	ldr	r2, [pc, #56]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 80046e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ea:	f7fc fcf5 	bl	80010d8 <HAL_GetTick>
 80046ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046f0:	e008      	b.n	8004704 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80046f2:	f7fc fcf1 	bl	80010d8 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e006      	b.n	8004712 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <RCCEx_PLL2_Config+0x15c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004710:	7bfb      	ldrb	r3, [r7, #15]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	58024400 	.word	0x58024400
 8004720:	ffff0007 	.word	0xffff0007

08004724 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004732:	4b53      	ldr	r3, [pc, #332]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 8004734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b03      	cmp	r3, #3
 800473c:	d101      	bne.n	8004742 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e099      	b.n	8004876 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004742:	4b4f      	ldr	r3, [pc, #316]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a4e      	ldr	r2, [pc, #312]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 8004748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800474c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474e:	f7fc fcc3 	bl	80010d8 <HAL_GetTick>
 8004752:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004754:	e008      	b.n	8004768 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004756:	f7fc fcbf 	bl	80010d8 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e086      	b.n	8004876 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004768:	4b45      	ldr	r3, [pc, #276]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f0      	bne.n	8004756 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004774:	4b42      	ldr	r3, [pc, #264]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	051b      	lsls	r3, r3, #20
 8004782:	493f      	ldr	r1, [pc, #252]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 8004784:	4313      	orrs	r3, r2
 8004786:	628b      	str	r3, [r1, #40]	; 0x28
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	3b01      	subs	r3, #1
 800478e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	3b01      	subs	r3, #1
 8004798:	025b      	lsls	r3, r3, #9
 800479a:	b29b      	uxth	r3, r3
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	041b      	lsls	r3, r3, #16
 80047a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	061b      	lsls	r3, r3, #24
 80047b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047b8:	4931      	ldr	r1, [pc, #196]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80047be:	4b30      	ldr	r3, [pc, #192]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	492d      	ldr	r1, [pc, #180]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80047d0:	4b2b      	ldr	r3, [pc, #172]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	4928      	ldr	r1, [pc, #160]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80047e2:	4b27      	ldr	r3, [pc, #156]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	4a26      	ldr	r2, [pc, #152]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 80047e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80047ee:	4b24      	ldr	r3, [pc, #144]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 80047f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047f2:	4b24      	ldr	r3, [pc, #144]	; (8004884 <RCCEx_PLL3_Config+0x160>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	69d2      	ldr	r2, [r2, #28]
 80047fa:	00d2      	lsls	r2, r2, #3
 80047fc:	4920      	ldr	r1, [pc, #128]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004802:	4b1f      	ldr	r3, [pc, #124]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	4a1e      	ldr	r2, [pc, #120]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 8004808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004814:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	4a19      	ldr	r2, [pc, #100]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 800481a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800481e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004820:	e00f      	b.n	8004842 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d106      	bne.n	8004836 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004828:	4b15      	ldr	r3, [pc, #84]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	4a14      	ldr	r2, [pc, #80]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 800482e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004832:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004834:	e005      	b.n	8004842 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	4a11      	ldr	r2, [pc, #68]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 800483c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004840:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004842:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a0e      	ldr	r2, [pc, #56]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 8004848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800484c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800484e:	f7fc fc43 	bl	80010d8 <HAL_GetTick>
 8004852:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004854:	e008      	b.n	8004868 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004856:	f7fc fc3f 	bl	80010d8 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e006      	b.n	8004876 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <RCCEx_PLL3_Config+0x15c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0f0      	beq.n	8004856 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	58024400 	.word	0x58024400
 8004884:	ffff0007 	.word	0xffff0007

08004888 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e042      	b.n	8004920 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7fc fa39 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2224      	movs	r2, #36	; 0x24
 80048b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0201 	bic.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f82c 	bl	8004928 <UART_SetConfig>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e022      	b.n	8004920 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fd80 	bl	80053e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004906:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fe07 	bl	800552c <UART_CheckIdleState>
 800491e:	4603      	mov	r3, r0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004928:	b5b0      	push	{r4, r5, r7, lr}
 800492a:	b08e      	sub	sp, #56	; 0x38
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	4313      	orrs	r3, r2
 800494c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	4bbf      	ldr	r3, [pc, #764]	; (8004c54 <UART_SetConfig+0x32c>)
 8004956:	4013      	ands	r3, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6812      	ldr	r2, [r2, #0]
 800495c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800495e:	430b      	orrs	r3, r1
 8004960:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4ab5      	ldr	r2, [pc, #724]	; (8004c58 <UART_SetConfig+0x330>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d004      	beq.n	8004992 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800498e:	4313      	orrs	r3, r2
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	4bb0      	ldr	r3, [pc, #704]	; (8004c5c <UART_SetConfig+0x334>)
 800499a:	4013      	ands	r3, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80049a2:	430b      	orrs	r3, r1
 80049a4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	f023 010f 	bic.w	r1, r3, #15
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4aa7      	ldr	r2, [pc, #668]	; (8004c60 <UART_SetConfig+0x338>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d176      	bne.n	8004ab4 <UART_SetConfig+0x18c>
 80049c6:	4ba7      	ldr	r3, [pc, #668]	; (8004c64 <UART_SetConfig+0x33c>)
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049ce:	2b28      	cmp	r3, #40	; 0x28
 80049d0:	d86c      	bhi.n	8004aac <UART_SetConfig+0x184>
 80049d2:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <UART_SetConfig+0xb0>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	08004a7d 	.word	0x08004a7d
 80049dc:	08004aad 	.word	0x08004aad
 80049e0:	08004aad 	.word	0x08004aad
 80049e4:	08004aad 	.word	0x08004aad
 80049e8:	08004aad 	.word	0x08004aad
 80049ec:	08004aad 	.word	0x08004aad
 80049f0:	08004aad 	.word	0x08004aad
 80049f4:	08004aad 	.word	0x08004aad
 80049f8:	08004a85 	.word	0x08004a85
 80049fc:	08004aad 	.word	0x08004aad
 8004a00:	08004aad 	.word	0x08004aad
 8004a04:	08004aad 	.word	0x08004aad
 8004a08:	08004aad 	.word	0x08004aad
 8004a0c:	08004aad 	.word	0x08004aad
 8004a10:	08004aad 	.word	0x08004aad
 8004a14:	08004aad 	.word	0x08004aad
 8004a18:	08004a8d 	.word	0x08004a8d
 8004a1c:	08004aad 	.word	0x08004aad
 8004a20:	08004aad 	.word	0x08004aad
 8004a24:	08004aad 	.word	0x08004aad
 8004a28:	08004aad 	.word	0x08004aad
 8004a2c:	08004aad 	.word	0x08004aad
 8004a30:	08004aad 	.word	0x08004aad
 8004a34:	08004aad 	.word	0x08004aad
 8004a38:	08004a95 	.word	0x08004a95
 8004a3c:	08004aad 	.word	0x08004aad
 8004a40:	08004aad 	.word	0x08004aad
 8004a44:	08004aad 	.word	0x08004aad
 8004a48:	08004aad 	.word	0x08004aad
 8004a4c:	08004aad 	.word	0x08004aad
 8004a50:	08004aad 	.word	0x08004aad
 8004a54:	08004aad 	.word	0x08004aad
 8004a58:	08004a9d 	.word	0x08004a9d
 8004a5c:	08004aad 	.word	0x08004aad
 8004a60:	08004aad 	.word	0x08004aad
 8004a64:	08004aad 	.word	0x08004aad
 8004a68:	08004aad 	.word	0x08004aad
 8004a6c:	08004aad 	.word	0x08004aad
 8004a70:	08004aad 	.word	0x08004aad
 8004a74:	08004aad 	.word	0x08004aad
 8004a78:	08004aa5 	.word	0x08004aa5
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a82:	e222      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004a84:	2304      	movs	r3, #4
 8004a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a8a:	e21e      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a92:	e21a      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004a94:	2310      	movs	r3, #16
 8004a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a9a:	e216      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004a9c:	2320      	movs	r3, #32
 8004a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aa2:	e212      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004aa4:	2340      	movs	r3, #64	; 0x40
 8004aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aaa:	e20e      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004aac:	2380      	movs	r3, #128	; 0x80
 8004aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ab2:	e20a      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a6b      	ldr	r2, [pc, #428]	; (8004c68 <UART_SetConfig+0x340>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d130      	bne.n	8004b20 <UART_SetConfig+0x1f8>
 8004abe:	4b69      	ldr	r3, [pc, #420]	; (8004c64 <UART_SetConfig+0x33c>)
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	2b05      	cmp	r3, #5
 8004ac8:	d826      	bhi.n	8004b18 <UART_SetConfig+0x1f0>
 8004aca:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <UART_SetConfig+0x1a8>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004ae9 	.word	0x08004ae9
 8004ad4:	08004af1 	.word	0x08004af1
 8004ad8:	08004af9 	.word	0x08004af9
 8004adc:	08004b01 	.word	0x08004b01
 8004ae0:	08004b09 	.word	0x08004b09
 8004ae4:	08004b11 	.word	0x08004b11
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aee:	e1ec      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004af0:	2304      	movs	r3, #4
 8004af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004af6:	e1e8      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004af8:	2308      	movs	r3, #8
 8004afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004afe:	e1e4      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004b00:	2310      	movs	r3, #16
 8004b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b06:	e1e0      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004b08:	2320      	movs	r3, #32
 8004b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b0e:	e1dc      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004b10:	2340      	movs	r3, #64	; 0x40
 8004b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b16:	e1d8      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004b18:	2380      	movs	r3, #128	; 0x80
 8004b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b1e:	e1d4      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a51      	ldr	r2, [pc, #324]	; (8004c6c <UART_SetConfig+0x344>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d130      	bne.n	8004b8c <UART_SetConfig+0x264>
 8004b2a:	4b4e      	ldr	r3, [pc, #312]	; (8004c64 <UART_SetConfig+0x33c>)
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	2b05      	cmp	r3, #5
 8004b34:	d826      	bhi.n	8004b84 <UART_SetConfig+0x25c>
 8004b36:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <UART_SetConfig+0x214>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b55 	.word	0x08004b55
 8004b40:	08004b5d 	.word	0x08004b5d
 8004b44:	08004b65 	.word	0x08004b65
 8004b48:	08004b6d 	.word	0x08004b6d
 8004b4c:	08004b75 	.word	0x08004b75
 8004b50:	08004b7d 	.word	0x08004b7d
 8004b54:	2300      	movs	r3, #0
 8004b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b5a:	e1b6      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b62:	e1b2      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004b64:	2308      	movs	r3, #8
 8004b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b6a:	e1ae      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b72:	e1aa      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004b74:	2320      	movs	r3, #32
 8004b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b7a:	e1a6      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004b7c:	2340      	movs	r3, #64	; 0x40
 8004b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b82:	e1a2      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b8a:	e19e      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a37      	ldr	r2, [pc, #220]	; (8004c70 <UART_SetConfig+0x348>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d130      	bne.n	8004bf8 <UART_SetConfig+0x2d0>
 8004b96:	4b33      	ldr	r3, [pc, #204]	; (8004c64 <UART_SetConfig+0x33c>)
 8004b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	2b05      	cmp	r3, #5
 8004ba0:	d826      	bhi.n	8004bf0 <UART_SetConfig+0x2c8>
 8004ba2:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <UART_SetConfig+0x280>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bc1 	.word	0x08004bc1
 8004bac:	08004bc9 	.word	0x08004bc9
 8004bb0:	08004bd1 	.word	0x08004bd1
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004be1 	.word	0x08004be1
 8004bbc:	08004be9 	.word	0x08004be9
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bc6:	e180      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bce:	e17c      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004bd0:	2308      	movs	r3, #8
 8004bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bd6:	e178      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bde:	e174      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004be0:	2320      	movs	r3, #32
 8004be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004be6:	e170      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004be8:	2340      	movs	r3, #64	; 0x40
 8004bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bee:	e16c      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004bf0:	2380      	movs	r3, #128	; 0x80
 8004bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bf6:	e168      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1d      	ldr	r2, [pc, #116]	; (8004c74 <UART_SetConfig+0x34c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d142      	bne.n	8004c88 <UART_SetConfig+0x360>
 8004c02:	4b18      	ldr	r3, [pc, #96]	; (8004c64 <UART_SetConfig+0x33c>)
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	2b05      	cmp	r3, #5
 8004c0c:	d838      	bhi.n	8004c80 <UART_SetConfig+0x358>
 8004c0e:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <UART_SetConfig+0x2ec>)
 8004c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c14:	08004c2d 	.word	0x08004c2d
 8004c18:	08004c35 	.word	0x08004c35
 8004c1c:	08004c3d 	.word	0x08004c3d
 8004c20:	08004c45 	.word	0x08004c45
 8004c24:	08004c4d 	.word	0x08004c4d
 8004c28:	08004c79 	.word	0x08004c79
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c32:	e14a      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004c34:	2304      	movs	r3, #4
 8004c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c3a:	e146      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004c3c:	2308      	movs	r3, #8
 8004c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c42:	e142      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004c44:	2310      	movs	r3, #16
 8004c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c4a:	e13e      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004c4c:	2320      	movs	r3, #32
 8004c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c52:	e13a      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004c54:	cfff69f3 	.word	0xcfff69f3
 8004c58:	58000c00 	.word	0x58000c00
 8004c5c:	11fff4ff 	.word	0x11fff4ff
 8004c60:	40011000 	.word	0x40011000
 8004c64:	58024400 	.word	0x58024400
 8004c68:	40004400 	.word	0x40004400
 8004c6c:	40004800 	.word	0x40004800
 8004c70:	40004c00 	.word	0x40004c00
 8004c74:	40005000 	.word	0x40005000
 8004c78:	2340      	movs	r3, #64	; 0x40
 8004c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c7e:	e124      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004c80:	2380      	movs	r3, #128	; 0x80
 8004c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c86:	e120      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4acc      	ldr	r2, [pc, #816]	; (8004fc0 <UART_SetConfig+0x698>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d176      	bne.n	8004d80 <UART_SetConfig+0x458>
 8004c92:	4bcc      	ldr	r3, [pc, #816]	; (8004fc4 <UART_SetConfig+0x69c>)
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c9a:	2b28      	cmp	r3, #40	; 0x28
 8004c9c:	d86c      	bhi.n	8004d78 <UART_SetConfig+0x450>
 8004c9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <UART_SetConfig+0x37c>)
 8004ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca4:	08004d49 	.word	0x08004d49
 8004ca8:	08004d79 	.word	0x08004d79
 8004cac:	08004d79 	.word	0x08004d79
 8004cb0:	08004d79 	.word	0x08004d79
 8004cb4:	08004d79 	.word	0x08004d79
 8004cb8:	08004d79 	.word	0x08004d79
 8004cbc:	08004d79 	.word	0x08004d79
 8004cc0:	08004d79 	.word	0x08004d79
 8004cc4:	08004d51 	.word	0x08004d51
 8004cc8:	08004d79 	.word	0x08004d79
 8004ccc:	08004d79 	.word	0x08004d79
 8004cd0:	08004d79 	.word	0x08004d79
 8004cd4:	08004d79 	.word	0x08004d79
 8004cd8:	08004d79 	.word	0x08004d79
 8004cdc:	08004d79 	.word	0x08004d79
 8004ce0:	08004d79 	.word	0x08004d79
 8004ce4:	08004d59 	.word	0x08004d59
 8004ce8:	08004d79 	.word	0x08004d79
 8004cec:	08004d79 	.word	0x08004d79
 8004cf0:	08004d79 	.word	0x08004d79
 8004cf4:	08004d79 	.word	0x08004d79
 8004cf8:	08004d79 	.word	0x08004d79
 8004cfc:	08004d79 	.word	0x08004d79
 8004d00:	08004d79 	.word	0x08004d79
 8004d04:	08004d61 	.word	0x08004d61
 8004d08:	08004d79 	.word	0x08004d79
 8004d0c:	08004d79 	.word	0x08004d79
 8004d10:	08004d79 	.word	0x08004d79
 8004d14:	08004d79 	.word	0x08004d79
 8004d18:	08004d79 	.word	0x08004d79
 8004d1c:	08004d79 	.word	0x08004d79
 8004d20:	08004d79 	.word	0x08004d79
 8004d24:	08004d69 	.word	0x08004d69
 8004d28:	08004d79 	.word	0x08004d79
 8004d2c:	08004d79 	.word	0x08004d79
 8004d30:	08004d79 	.word	0x08004d79
 8004d34:	08004d79 	.word	0x08004d79
 8004d38:	08004d79 	.word	0x08004d79
 8004d3c:	08004d79 	.word	0x08004d79
 8004d40:	08004d79 	.word	0x08004d79
 8004d44:	08004d71 	.word	0x08004d71
 8004d48:	2301      	movs	r3, #1
 8004d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d4e:	e0bc      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004d50:	2304      	movs	r3, #4
 8004d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d56:	e0b8      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004d58:	2308      	movs	r3, #8
 8004d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d5e:	e0b4      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004d60:	2310      	movs	r3, #16
 8004d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d66:	e0b0      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004d68:	2320      	movs	r3, #32
 8004d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d6e:	e0ac      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004d70:	2340      	movs	r3, #64	; 0x40
 8004d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d76:	e0a8      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004d78:	2380      	movs	r3, #128	; 0x80
 8004d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d7e:	e0a4      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a90      	ldr	r2, [pc, #576]	; (8004fc8 <UART_SetConfig+0x6a0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d130      	bne.n	8004dec <UART_SetConfig+0x4c4>
 8004d8a:	4b8e      	ldr	r3, [pc, #568]	; (8004fc4 <UART_SetConfig+0x69c>)
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	2b05      	cmp	r3, #5
 8004d94:	d826      	bhi.n	8004de4 <UART_SetConfig+0x4bc>
 8004d96:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <UART_SetConfig+0x474>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004db5 	.word	0x08004db5
 8004da0:	08004dbd 	.word	0x08004dbd
 8004da4:	08004dc5 	.word	0x08004dc5
 8004da8:	08004dcd 	.word	0x08004dcd
 8004dac:	08004dd5 	.word	0x08004dd5
 8004db0:	08004ddd 	.word	0x08004ddd
 8004db4:	2300      	movs	r3, #0
 8004db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dba:	e086      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dc2:	e082      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004dc4:	2308      	movs	r3, #8
 8004dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dca:	e07e      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004dcc:	2310      	movs	r3, #16
 8004dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dd2:	e07a      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004dd4:	2320      	movs	r3, #32
 8004dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dda:	e076      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004ddc:	2340      	movs	r3, #64	; 0x40
 8004dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004de2:	e072      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dea:	e06e      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a76      	ldr	r2, [pc, #472]	; (8004fcc <UART_SetConfig+0x6a4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d130      	bne.n	8004e58 <UART_SetConfig+0x530>
 8004df6:	4b73      	ldr	r3, [pc, #460]	; (8004fc4 <UART_SetConfig+0x69c>)
 8004df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	2b05      	cmp	r3, #5
 8004e00:	d826      	bhi.n	8004e50 <UART_SetConfig+0x528>
 8004e02:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <UART_SetConfig+0x4e0>)
 8004e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e08:	08004e21 	.word	0x08004e21
 8004e0c:	08004e29 	.word	0x08004e29
 8004e10:	08004e31 	.word	0x08004e31
 8004e14:	08004e39 	.word	0x08004e39
 8004e18:	08004e41 	.word	0x08004e41
 8004e1c:	08004e49 	.word	0x08004e49
 8004e20:	2300      	movs	r3, #0
 8004e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e26:	e050      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004e28:	2304      	movs	r3, #4
 8004e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e2e:	e04c      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004e30:	2308      	movs	r3, #8
 8004e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e36:	e048      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004e38:	2310      	movs	r3, #16
 8004e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e3e:	e044      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004e40:	2320      	movs	r3, #32
 8004e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e46:	e040      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004e48:	2340      	movs	r3, #64	; 0x40
 8004e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e4e:	e03c      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e56:	e038      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a5c      	ldr	r2, [pc, #368]	; (8004fd0 <UART_SetConfig+0x6a8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d130      	bne.n	8004ec4 <UART_SetConfig+0x59c>
 8004e62:	4b58      	ldr	r3, [pc, #352]	; (8004fc4 <UART_SetConfig+0x69c>)
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	2b05      	cmp	r3, #5
 8004e6c:	d826      	bhi.n	8004ebc <UART_SetConfig+0x594>
 8004e6e:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <UART_SetConfig+0x54c>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004e8d 	.word	0x08004e8d
 8004e78:	08004e95 	.word	0x08004e95
 8004e7c:	08004e9d 	.word	0x08004e9d
 8004e80:	08004ea5 	.word	0x08004ea5
 8004e84:	08004ead 	.word	0x08004ead
 8004e88:	08004eb5 	.word	0x08004eb5
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e92:	e01a      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004e94:	2304      	movs	r3, #4
 8004e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e9a:	e016      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ea2:	e012      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eaa:	e00e      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004eac:	2320      	movs	r3, #32
 8004eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eb2:	e00a      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004eb4:	2340      	movs	r3, #64	; 0x40
 8004eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eba:	e006      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004ebc:	2380      	movs	r3, #128	; 0x80
 8004ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ec2:	e002      	b.n	8004eca <UART_SetConfig+0x5a2>
 8004ec4:	2380      	movs	r3, #128	; 0x80
 8004ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a40      	ldr	r2, [pc, #256]	; (8004fd0 <UART_SetConfig+0x6a8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	f040 80ef 	bne.w	80050b4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ed6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	dc46      	bgt.n	8004f6c <UART_SetConfig+0x644>
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	f2c0 8081 	blt.w	8004fe6 <UART_SetConfig+0x6be>
 8004ee4:	3b02      	subs	r3, #2
 8004ee6:	2b1e      	cmp	r3, #30
 8004ee8:	d87d      	bhi.n	8004fe6 <UART_SetConfig+0x6be>
 8004eea:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <UART_SetConfig+0x5c8>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f73 	.word	0x08004f73
 8004ef4:	08004fe7 	.word	0x08004fe7
 8004ef8:	08004f7b 	.word	0x08004f7b
 8004efc:	08004fe7 	.word	0x08004fe7
 8004f00:	08004fe7 	.word	0x08004fe7
 8004f04:	08004fe7 	.word	0x08004fe7
 8004f08:	08004f8b 	.word	0x08004f8b
 8004f0c:	08004fe7 	.word	0x08004fe7
 8004f10:	08004fe7 	.word	0x08004fe7
 8004f14:	08004fe7 	.word	0x08004fe7
 8004f18:	08004fe7 	.word	0x08004fe7
 8004f1c:	08004fe7 	.word	0x08004fe7
 8004f20:	08004fe7 	.word	0x08004fe7
 8004f24:	08004fe7 	.word	0x08004fe7
 8004f28:	08004f9b 	.word	0x08004f9b
 8004f2c:	08004fe7 	.word	0x08004fe7
 8004f30:	08004fe7 	.word	0x08004fe7
 8004f34:	08004fe7 	.word	0x08004fe7
 8004f38:	08004fe7 	.word	0x08004fe7
 8004f3c:	08004fe7 	.word	0x08004fe7
 8004f40:	08004fe7 	.word	0x08004fe7
 8004f44:	08004fe7 	.word	0x08004fe7
 8004f48:	08004fe7 	.word	0x08004fe7
 8004f4c:	08004fe7 	.word	0x08004fe7
 8004f50:	08004fe7 	.word	0x08004fe7
 8004f54:	08004fe7 	.word	0x08004fe7
 8004f58:	08004fe7 	.word	0x08004fe7
 8004f5c:	08004fe7 	.word	0x08004fe7
 8004f60:	08004fe7 	.word	0x08004fe7
 8004f64:	08004fe7 	.word	0x08004fe7
 8004f68:	08004fd9 	.word	0x08004fd9
 8004f6c:	2b40      	cmp	r3, #64	; 0x40
 8004f6e:	d036      	beq.n	8004fde <UART_SetConfig+0x6b6>
 8004f70:	e039      	b.n	8004fe6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004f72:	f7ff f867 	bl	8004044 <HAL_RCCEx_GetD3PCLK1Freq>
 8004f76:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004f78:	e03b      	b.n	8004ff2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f7a:	f107 0314 	add.w	r3, r7, #20
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff f876 	bl	8004070 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f88:	e033      	b.n	8004ff2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f8a:	f107 0308 	add.w	r3, r7, #8
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff f9c2 	bl	8004318 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f98:	e02b      	b.n	8004ff2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f9a:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <UART_SetConfig+0x69c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d009      	beq.n	8004fba <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004fa6:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <UART_SetConfig+0x69c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	08db      	lsrs	r3, r3, #3
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	4a08      	ldr	r2, [pc, #32]	; (8004fd4 <UART_SetConfig+0x6ac>)
 8004fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004fb8:	e01b      	b.n	8004ff2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <UART_SetConfig+0x6ac>)
 8004fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fbe:	e018      	b.n	8004ff2 <UART_SetConfig+0x6ca>
 8004fc0:	40011400 	.word	0x40011400
 8004fc4:	58024400 	.word	0x58024400
 8004fc8:	40007800 	.word	0x40007800
 8004fcc:	40007c00 	.word	0x40007c00
 8004fd0:	58000c00 	.word	0x58000c00
 8004fd4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004fd8:	4bc4      	ldr	r3, [pc, #784]	; (80052ec <UART_SetConfig+0x9c4>)
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fdc:	e009      	b.n	8004ff2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fe4:	e005      	b.n	8004ff2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004ff0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 81da 	beq.w	80053ae <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	4abc      	ldr	r2, [pc, #752]	; (80052f0 <UART_SetConfig+0x9c8>)
 8005000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005004:	461a      	mov	r2, r3
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	fbb3 f3f2 	udiv	r3, r3, r2
 800500c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	4413      	add	r3, r2
 8005018:	6a3a      	ldr	r2, [r7, #32]
 800501a:	429a      	cmp	r2, r3
 800501c:	d305      	bcc.n	800502a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005024:	6a3a      	ldr	r2, [r7, #32]
 8005026:	429a      	cmp	r2, r3
 8005028:	d903      	bls.n	8005032 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005030:	e1bd      	b.n	80053ae <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	4618      	mov	r0, r3
 8005036:	f04f 0100 	mov.w	r1, #0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	4aac      	ldr	r2, [pc, #688]	; (80052f0 <UART_SetConfig+0x9c8>)
 8005040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005044:	b29a      	uxth	r2, r3
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	f7fb f945 	bl	80002d8 <__aeabi_uldivmod>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	4610      	mov	r0, r2
 8005054:	4619      	mov	r1, r3
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	020b      	lsls	r3, r1, #8
 8005060:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005064:	0202      	lsls	r2, r0, #8
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	6849      	ldr	r1, [r1, #4]
 800506a:	0849      	lsrs	r1, r1, #1
 800506c:	4608      	mov	r0, r1
 800506e:	f04f 0100 	mov.w	r1, #0
 8005072:	1814      	adds	r4, r2, r0
 8005074:	eb43 0501 	adc.w	r5, r3, r1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	461a      	mov	r2, r3
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	4620      	mov	r0, r4
 8005084:	4629      	mov	r1, r5
 8005086:	f7fb f927 	bl	80002d8 <__aeabi_uldivmod>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4613      	mov	r3, r2
 8005090:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005098:	d308      	bcc.n	80050ac <UART_SetConfig+0x784>
 800509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050a0:	d204      	bcs.n	80050ac <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a8:	60da      	str	r2, [r3, #12]
 80050aa:	e180      	b.n	80053ae <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80050b2:	e17c      	b.n	80053ae <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050bc:	f040 80bf 	bne.w	800523e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80050c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	dc49      	bgt.n	800515c <UART_SetConfig+0x834>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	db7c      	blt.n	80051c6 <UART_SetConfig+0x89e>
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d87a      	bhi.n	80051c6 <UART_SetConfig+0x89e>
 80050d0:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <UART_SetConfig+0x7b0>)
 80050d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	08005163 	.word	0x08005163
 80050dc:	0800516b 	.word	0x0800516b
 80050e0:	080051c7 	.word	0x080051c7
 80050e4:	080051c7 	.word	0x080051c7
 80050e8:	08005173 	.word	0x08005173
 80050ec:	080051c7 	.word	0x080051c7
 80050f0:	080051c7 	.word	0x080051c7
 80050f4:	080051c7 	.word	0x080051c7
 80050f8:	08005183 	.word	0x08005183
 80050fc:	080051c7 	.word	0x080051c7
 8005100:	080051c7 	.word	0x080051c7
 8005104:	080051c7 	.word	0x080051c7
 8005108:	080051c7 	.word	0x080051c7
 800510c:	080051c7 	.word	0x080051c7
 8005110:	080051c7 	.word	0x080051c7
 8005114:	080051c7 	.word	0x080051c7
 8005118:	08005193 	.word	0x08005193
 800511c:	080051c7 	.word	0x080051c7
 8005120:	080051c7 	.word	0x080051c7
 8005124:	080051c7 	.word	0x080051c7
 8005128:	080051c7 	.word	0x080051c7
 800512c:	080051c7 	.word	0x080051c7
 8005130:	080051c7 	.word	0x080051c7
 8005134:	080051c7 	.word	0x080051c7
 8005138:	080051c7 	.word	0x080051c7
 800513c:	080051c7 	.word	0x080051c7
 8005140:	080051c7 	.word	0x080051c7
 8005144:	080051c7 	.word	0x080051c7
 8005148:	080051c7 	.word	0x080051c7
 800514c:	080051c7 	.word	0x080051c7
 8005150:	080051c7 	.word	0x080051c7
 8005154:	080051c7 	.word	0x080051c7
 8005158:	080051b9 	.word	0x080051b9
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d02e      	beq.n	80051be <UART_SetConfig+0x896>
 8005160:	e031      	b.n	80051c6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005162:	f7fe f803 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 8005166:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005168:	e033      	b.n	80051d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800516a:	f7fe f815 	bl	8003198 <HAL_RCC_GetPCLK2Freq>
 800516e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005170:	e02f      	b.n	80051d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005172:	f107 0314 	add.w	r3, r7, #20
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe ff7a 	bl	8004070 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005180:	e027      	b.n	80051d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005182:	f107 0308 	add.w	r3, r7, #8
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff f8c6 	bl	8004318 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005190:	e01f      	b.n	80051d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005192:	4b58      	ldr	r3, [pc, #352]	; (80052f4 <UART_SetConfig+0x9cc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800519e:	4b55      	ldr	r3, [pc, #340]	; (80052f4 <UART_SetConfig+0x9cc>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	08db      	lsrs	r3, r3, #3
 80051a4:	f003 0303 	and.w	r3, r3, #3
 80051a8:	4a53      	ldr	r2, [pc, #332]	; (80052f8 <UART_SetConfig+0x9d0>)
 80051aa:	fa22 f303 	lsr.w	r3, r2, r3
 80051ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051b0:	e00f      	b.n	80051d2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80051b2:	4b51      	ldr	r3, [pc, #324]	; (80052f8 <UART_SetConfig+0x9d0>)
 80051b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051b6:	e00c      	b.n	80051d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80051b8:	4b4c      	ldr	r3, [pc, #304]	; (80052ec <UART_SetConfig+0x9c4>)
 80051ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051bc:	e009      	b.n	80051d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051c4:	e005      	b.n	80051d2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80051d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 80ea 	beq.w	80053ae <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	4a44      	ldr	r2, [pc, #272]	; (80052f0 <UART_SetConfig+0x9c8>)
 80051e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051e4:	461a      	mov	r2, r3
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80051ec:	005a      	lsls	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	441a      	add	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fe:	b29b      	uxth	r3, r3
 8005200:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	2b0f      	cmp	r3, #15
 8005206:	d916      	bls.n	8005236 <UART_SetConfig+0x90e>
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520e:	d212      	bcs.n	8005236 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	b29b      	uxth	r3, r3
 8005214:	f023 030f 	bic.w	r3, r3, #15
 8005218:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	085b      	lsrs	r3, r3, #1
 800521e:	b29b      	uxth	r3, r3
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	b29a      	uxth	r2, r3
 8005226:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005228:	4313      	orrs	r3, r2
 800522a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005232:	60da      	str	r2, [r3, #12]
 8005234:	e0bb      	b.n	80053ae <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800523c:	e0b7      	b.n	80053ae <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800523e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005242:	2b20      	cmp	r3, #32
 8005244:	dc4a      	bgt.n	80052dc <UART_SetConfig+0x9b4>
 8005246:	2b00      	cmp	r3, #0
 8005248:	f2c0 8086 	blt.w	8005358 <UART_SetConfig+0xa30>
 800524c:	2b20      	cmp	r3, #32
 800524e:	f200 8083 	bhi.w	8005358 <UART_SetConfig+0xa30>
 8005252:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <UART_SetConfig+0x930>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	080052e3 	.word	0x080052e3
 800525c:	080052fd 	.word	0x080052fd
 8005260:	08005359 	.word	0x08005359
 8005264:	08005359 	.word	0x08005359
 8005268:	08005305 	.word	0x08005305
 800526c:	08005359 	.word	0x08005359
 8005270:	08005359 	.word	0x08005359
 8005274:	08005359 	.word	0x08005359
 8005278:	08005315 	.word	0x08005315
 800527c:	08005359 	.word	0x08005359
 8005280:	08005359 	.word	0x08005359
 8005284:	08005359 	.word	0x08005359
 8005288:	08005359 	.word	0x08005359
 800528c:	08005359 	.word	0x08005359
 8005290:	08005359 	.word	0x08005359
 8005294:	08005359 	.word	0x08005359
 8005298:	08005325 	.word	0x08005325
 800529c:	08005359 	.word	0x08005359
 80052a0:	08005359 	.word	0x08005359
 80052a4:	08005359 	.word	0x08005359
 80052a8:	08005359 	.word	0x08005359
 80052ac:	08005359 	.word	0x08005359
 80052b0:	08005359 	.word	0x08005359
 80052b4:	08005359 	.word	0x08005359
 80052b8:	08005359 	.word	0x08005359
 80052bc:	08005359 	.word	0x08005359
 80052c0:	08005359 	.word	0x08005359
 80052c4:	08005359 	.word	0x08005359
 80052c8:	08005359 	.word	0x08005359
 80052cc:	08005359 	.word	0x08005359
 80052d0:	08005359 	.word	0x08005359
 80052d4:	08005359 	.word	0x08005359
 80052d8:	0800534b 	.word	0x0800534b
 80052dc:	2b40      	cmp	r3, #64	; 0x40
 80052de:	d037      	beq.n	8005350 <UART_SetConfig+0xa28>
 80052e0:	e03a      	b.n	8005358 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e2:	f7fd ff43 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 80052e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80052e8:	e03c      	b.n	8005364 <UART_SetConfig+0xa3c>
 80052ea:	bf00      	nop
 80052ec:	003d0900 	.word	0x003d0900
 80052f0:	08005ec4 	.word	0x08005ec4
 80052f4:	58024400 	.word	0x58024400
 80052f8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052fc:	f7fd ff4c 	bl	8003198 <HAL_RCC_GetPCLK2Freq>
 8005300:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005302:	e02f      	b.n	8005364 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005304:	f107 0314 	add.w	r3, r7, #20
 8005308:	4618      	mov	r0, r3
 800530a:	f7fe feb1 	bl	8004070 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005312:	e027      	b.n	8005364 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005314:	f107 0308 	add.w	r3, r7, #8
 8005318:	4618      	mov	r0, r3
 800531a:	f7fe fffd 	bl	8004318 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005322:	e01f      	b.n	8005364 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005324:	4b2c      	ldr	r3, [pc, #176]	; (80053d8 <UART_SetConfig+0xab0>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d009      	beq.n	8005344 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005330:	4b29      	ldr	r3, [pc, #164]	; (80053d8 <UART_SetConfig+0xab0>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	08db      	lsrs	r3, r3, #3
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	4a28      	ldr	r2, [pc, #160]	; (80053dc <UART_SetConfig+0xab4>)
 800533c:	fa22 f303 	lsr.w	r3, r2, r3
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005342:	e00f      	b.n	8005364 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005344:	4b25      	ldr	r3, [pc, #148]	; (80053dc <UART_SetConfig+0xab4>)
 8005346:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005348:	e00c      	b.n	8005364 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800534a:	4b25      	ldr	r3, [pc, #148]	; (80053e0 <UART_SetConfig+0xab8>)
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800534e:	e009      	b.n	8005364 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005350:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005354:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005356:	e005      	b.n	8005364 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005362:	bf00      	nop
    }

    if (pclk != 0U)
 8005364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005366:	2b00      	cmp	r3, #0
 8005368:	d021      	beq.n	80053ae <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	4a1d      	ldr	r2, [pc, #116]	; (80053e4 <UART_SetConfig+0xabc>)
 8005370:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005374:	461a      	mov	r2, r3
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	fbb3 f2f2 	udiv	r2, r3, r2
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	441a      	add	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	b29b      	uxth	r3, r3
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	2b0f      	cmp	r3, #15
 8005394:	d908      	bls.n	80053a8 <UART_SetConfig+0xa80>
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539c:	d204      	bcs.n	80053a8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a4:	60da      	str	r2, [r3, #12]
 80053a6:	e002      	b.n	80053ae <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80053ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3738      	adds	r7, #56	; 0x38
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bdb0      	pop	{r4, r5, r7, pc}
 80053d6:	bf00      	nop
 80053d8:	58024400 	.word	0x58024400
 80053dc:	03d09000 	.word	0x03d09000
 80053e0:	003d0900 	.word	0x003d0900
 80053e4:	08005ec4 	.word	0x08005ec4

080053e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01a      	beq.n	80054fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e6:	d10a      	bne.n	80054fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	605a      	str	r2, [r3, #4]
  }
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af02      	add	r7, sp, #8
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800553c:	f7fb fdcc 	bl	80010d8 <HAL_GetTick>
 8005540:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b08      	cmp	r3, #8
 800554e:	d10e      	bne.n	800556e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f82f 	bl	80055c2 <UART_WaitOnFlagUntilTimeout>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e025      	b.n	80055ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b04      	cmp	r3, #4
 800557a:	d10e      	bne.n	800559a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800557c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f819 	bl	80055c2 <UART_WaitOnFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e00f      	b.n	80055ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	603b      	str	r3, [r7, #0]
 80055ce:	4613      	mov	r3, r2
 80055d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d2:	e062      	b.n	800569a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055da:	d05e      	beq.n	800569a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055dc:	f7fb fd7c 	bl	80010d8 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d302      	bcc.n	80055f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d11d      	bne.n	800562e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005600:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0201 	bic.w	r2, r2, #1
 8005610:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e045      	b.n	80056ba <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d02e      	beq.n	800569a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564a:	d126      	bne.n	800569a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005654:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005664:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0201 	bic.w	r2, r2, #1
 8005674:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2220      	movs	r2, #32
 8005682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2220      	movs	r2, #32
 800568a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e00f      	b.n	80056ba <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4013      	ands	r3, r2
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	bf0c      	ite	eq
 80056aa:	2301      	moveq	r3, #1
 80056ac:	2300      	movne	r3, #0
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d08d      	beq.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b085      	sub	sp, #20
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e027      	b.n	8005728 <HAL_UARTEx_DisableFifoMode+0x66>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2224      	movs	r2, #36	; 0x24
 80056e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0201 	bic.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005706:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005748:	2302      	movs	r3, #2
 800574a:	e02d      	b.n	80057a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2224      	movs	r2, #36	; 0x24
 8005758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0201 	bic.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f84f 	bl	800582c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e02d      	b.n	8005824 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2224      	movs	r2, #36	; 0x24
 80057d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0201 	bic.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f811 	bl	800582c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2220      	movs	r2, #32
 8005816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005838:	2b00      	cmp	r3, #0
 800583a:	d108      	bne.n	800584e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800584c:	e031      	b.n	80058b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800584e:	2310      	movs	r3, #16
 8005850:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005852:	2310      	movs	r3, #16
 8005854:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	0e5b      	lsrs	r3, r3, #25
 800585e:	b2db      	uxtb	r3, r3
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	0f5b      	lsrs	r3, r3, #29
 800586e:	b2db      	uxtb	r3, r3
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005876:	7bbb      	ldrb	r3, [r7, #14]
 8005878:	7b3a      	ldrb	r2, [r7, #12]
 800587a:	4911      	ldr	r1, [pc, #68]	; (80058c0 <UARTEx_SetNbDataToProcess+0x94>)
 800587c:	5c8a      	ldrb	r2, [r1, r2]
 800587e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005882:	7b3a      	ldrb	r2, [r7, #12]
 8005884:	490f      	ldr	r1, [pc, #60]	; (80058c4 <UARTEx_SetNbDataToProcess+0x98>)
 8005886:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005888:	fb93 f3f2 	sdiv	r3, r3, r2
 800588c:	b29a      	uxth	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	7b7a      	ldrb	r2, [r7, #13]
 8005898:	4909      	ldr	r1, [pc, #36]	; (80058c0 <UARTEx_SetNbDataToProcess+0x94>)
 800589a:	5c8a      	ldrb	r2, [r1, r2]
 800589c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058a0:	7b7a      	ldrb	r2, [r7, #13]
 80058a2:	4908      	ldr	r1, [pc, #32]	; (80058c4 <UARTEx_SetNbDataToProcess+0x98>)
 80058a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80058b2:	bf00      	nop
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	08005edc 	.word	0x08005edc
 80058c4:	08005ee4 	.word	0x08005ee4

080058c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058c8:	b084      	sub	sp, #16
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	f107 001c 	add.w	r0, r7, #28
 80058d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d120      	bne.n	8005922 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	4b2a      	ldr	r3, [pc, #168]	; (800599c <USB_CoreInit+0xd4>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005906:	2b01      	cmp	r3, #1
 8005908:	d105      	bne.n	8005916 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fa60 	bl	8005ddc <USB_CoreReset>
 800591c:	4603      	mov	r3, r0
 800591e:	73fb      	strb	r3, [r7, #15]
 8005920:	e01a      	b.n	8005958 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fa54 	bl	8005ddc <USB_CoreReset>
 8005934:	4603      	mov	r3, r0
 8005936:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	639a      	str	r2, [r3, #56]	; 0x38
 800594a:	e005      	b.n	8005958 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005950:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	2b01      	cmp	r3, #1
 800595c:	d116      	bne.n	800598c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005962:	b29a      	uxth	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800596c:	4b0c      	ldr	r3, [pc, #48]	; (80059a0 <USB_CoreInit+0xd8>)
 800596e:	4313      	orrs	r3, r2
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f043 0206 	orr.w	r2, r3, #6
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f043 0220 	orr.w	r2, r3, #32
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005998:	b004      	add	sp, #16
 800599a:	4770      	bx	lr
 800599c:	ffbdffbf 	.word	0xffbdffbf
 80059a0:	03ee0000 	.word	0x03ee0000

080059a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f023 0201 	bic.w	r2, r3, #1
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b082      	sub	sp, #8
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	460b      	mov	r3, r1
 80059d0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d106      	bne.n	80059f2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	60da      	str	r2, [r3, #12]
 80059f0:	e00b      	b.n	8005a0a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80059f2:	78fb      	ldrb	r3, [r7, #3]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d106      	bne.n	8005a06 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	60da      	str	r2, [r3, #12]
 8005a04:	e001      	b.n	8005a0a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e003      	b.n	8005a12 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005a0a:	2032      	movs	r0, #50	; 0x32
 8005a0c:	f7fb fb70 	bl	80010f0 <HAL_Delay>

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
	...

08005a1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b086      	sub	sp, #24
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a36:	2300      	movs	r3, #0
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	e009      	b.n	8005a50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	3340      	adds	r3, #64	; 0x40
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	2200      	movs	r2, #0
 8005a48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	2b0e      	cmp	r3, #14
 8005a54:	d9f2      	bls.n	8005a3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d11c      	bne.n	8005a96 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a6a:	f043 0302 	orr.w	r3, r3, #2
 8005a6e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	e005      	b.n	8005aa2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	2300      	movs	r3, #0
 8005aac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abc:	461a      	mov	r2, r3
 8005abe:	680b      	ldr	r3, [r1, #0]
 8005ac0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d10c      	bne.n	8005ae2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d104      	bne.n	8005ad8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005ace:	2100      	movs	r1, #0
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f949 	bl	8005d68 <USB_SetDevSpeed>
 8005ad6:	e008      	b.n	8005aea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ad8:	2101      	movs	r1, #1
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f944 	bl	8005d68 <USB_SetDevSpeed>
 8005ae0:	e003      	b.n	8005aea <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ae2:	2103      	movs	r1, #3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f93f 	bl	8005d68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005aea:	2110      	movs	r1, #16
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f8f3 	bl	8005cd8 <USB_FlushTxFifo>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f911 	bl	8005d24 <USB_FlushRxFifo>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b12:	461a      	mov	r2, r3
 8005b14:	2300      	movs	r3, #0
 8005b16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1e:	461a      	mov	r2, r3
 8005b20:	2300      	movs	r3, #0
 8005b22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b30:	2300      	movs	r3, #0
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	e043      	b.n	8005bbe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b4c:	d118      	bne.n	8005b80 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b60:	461a      	mov	r2, r3
 8005b62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	e013      	b.n	8005b92 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b76:	461a      	mov	r2, r3
 8005b78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	e008      	b.n	8005b92 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	613b      	str	r3, [r7, #16]
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d3b7      	bcc.n	8005b36 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	e043      	b.n	8005c54 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005be2:	d118      	bne.n	8005c16 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	e013      	b.n	8005c28 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	e008      	b.n	8005c28 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c22:	461a      	mov	r2, r3
 8005c24:	2300      	movs	r3, #0
 8005c26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c34:	461a      	mov	r2, r3
 8005c36:	2300      	movs	r3, #0
 8005c38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c46:	461a      	mov	r2, r3
 8005c48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	3301      	adds	r3, #1
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d3b7      	bcc.n	8005bcc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d105      	bne.n	8005c90 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f043 0210 	orr.w	r2, r3, #16
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699a      	ldr	r2, [r3, #24]
 8005c94:	4b0e      	ldr	r3, [pc, #56]	; (8005cd0 <USB_DevInit+0x2b4>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d005      	beq.n	8005cae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	f043 0208 	orr.w	r2, r3, #8
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d105      	bne.n	8005cc0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699a      	ldr	r2, [r3, #24]
 8005cb8:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <USB_DevInit+0x2b8>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ccc:	b004      	add	sp, #16
 8005cce:	4770      	bx	lr
 8005cd0:	803c3800 	.word	0x803c3800
 8005cd4:	40000004 	.word	0x40000004

08005cd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	019b      	lsls	r3, r3, #6
 8005cea:	f043 0220 	orr.w	r2, r3, #32
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <USB_FlushTxFifo+0x48>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d901      	bls.n	8005d04 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e006      	b.n	8005d12 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f003 0320 	and.w	r3, r3, #32
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d0f0      	beq.n	8005cf2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	00030d40 	.word	0x00030d40

08005d24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2210      	movs	r2, #16
 8005d34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4a09      	ldr	r2, [pc, #36]	; (8005d64 <USB_FlushRxFifo+0x40>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d901      	bls.n	8005d48 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e006      	b.n	8005d56 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f003 0310 	and.w	r3, r3, #16
 8005d50:	2b10      	cmp	r3, #16
 8005d52:	d0f0      	beq.n	8005d36 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	00030d40 	.word	0x00030d40

08005d68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	68f9      	ldr	r1, [r7, #12]
 8005d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005db4:	f023 0303 	bic.w	r3, r3, #3
 8005db8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dc8:	f043 0302 	orr.w	r3, r3, #2
 8005dcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3301      	adds	r3, #1
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4a13      	ldr	r2, [pc, #76]	; (8005e40 <USB_CoreReset+0x64>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d901      	bls.n	8005dfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e01b      	b.n	8005e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	daf2      	bge.n	8005de8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f043 0201 	orr.w	r2, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3301      	adds	r3, #1
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4a09      	ldr	r2, [pc, #36]	; (8005e40 <USB_CoreReset+0x64>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d901      	bls.n	8005e24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e006      	b.n	8005e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d0f0      	beq.n	8005e12 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	00030d40 	.word	0x00030d40

08005e44 <__libc_init_array>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	4d0d      	ldr	r5, [pc, #52]	; (8005e7c <__libc_init_array+0x38>)
 8005e48:	4c0d      	ldr	r4, [pc, #52]	; (8005e80 <__libc_init_array+0x3c>)
 8005e4a:	1b64      	subs	r4, r4, r5
 8005e4c:	10a4      	asrs	r4, r4, #2
 8005e4e:	2600      	movs	r6, #0
 8005e50:	42a6      	cmp	r6, r4
 8005e52:	d109      	bne.n	8005e68 <__libc_init_array+0x24>
 8005e54:	4d0b      	ldr	r5, [pc, #44]	; (8005e84 <__libc_init_array+0x40>)
 8005e56:	4c0c      	ldr	r4, [pc, #48]	; (8005e88 <__libc_init_array+0x44>)
 8005e58:	f000 f820 	bl	8005e9c <_init>
 8005e5c:	1b64      	subs	r4, r4, r5
 8005e5e:	10a4      	asrs	r4, r4, #2
 8005e60:	2600      	movs	r6, #0
 8005e62:	42a6      	cmp	r6, r4
 8005e64:	d105      	bne.n	8005e72 <__libc_init_array+0x2e>
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6c:	4798      	blx	r3
 8005e6e:	3601      	adds	r6, #1
 8005e70:	e7ee      	b.n	8005e50 <__libc_init_array+0xc>
 8005e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e76:	4798      	blx	r3
 8005e78:	3601      	adds	r6, #1
 8005e7a:	e7f2      	b.n	8005e62 <__libc_init_array+0x1e>
 8005e7c:	08005ef4 	.word	0x08005ef4
 8005e80:	08005ef4 	.word	0x08005ef4
 8005e84:	08005ef4 	.word	0x08005ef4
 8005e88:	08005ef8 	.word	0x08005ef8

08005e8c <memset>:
 8005e8c:	4402      	add	r2, r0
 8005e8e:	4603      	mov	r3, r0
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d100      	bne.n	8005e96 <memset+0xa>
 8005e94:	4770      	bx	lr
 8005e96:	f803 1b01 	strb.w	r1, [r3], #1
 8005e9a:	e7f9      	b.n	8005e90 <memset+0x4>

08005e9c <_init>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	bf00      	nop
 8005ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea2:	bc08      	pop	{r3}
 8005ea4:	469e      	mov	lr, r3
 8005ea6:	4770      	bx	lr

08005ea8 <_fini>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	bf00      	nop
 8005eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eae:	bc08      	pop	{r3}
 8005eb0:	469e      	mov	lr, r3
 8005eb2:	4770      	bx	lr
